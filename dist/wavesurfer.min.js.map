{"version":3,"sources":["webpack://WaveSurfer/webpack/universalModuleDefinition","webpack://WaveSurfer/webpack/bootstrap","webpack://WaveSurfer/./src/util/index.js","webpack://WaveSurfer/./src/util/observer.js","webpack://WaveSurfer/./src/util/get-id.js","webpack://WaveSurfer/./src/util/style.js","webpack://WaveSurfer/./src/util/request-animation-frame.js","webpack://WaveSurfer/./src/webaudio.js","webpack://WaveSurfer/./src/wavesurfer.js","webpack://WaveSurfer/./src/util/ajax.js","webpack://WaveSurfer/./src/util/max.js","webpack://WaveSurfer/./src/util/min.js","webpack://WaveSurfer/./src/util/extend.js","webpack://WaveSurfer/./src/util/frame.js","webpack://WaveSurfer/./node_modules/debounce/index.js","webpack://WaveSurfer/./src/util/prevent-click.js","webpack://WaveSurfer/./src/drawer.multicanvas.js","webpack://WaveSurfer/./src/drawer.js","webpack://WaveSurfer/./src/drawer.canvasentry.js","webpack://WaveSurfer/./src/mediaelement.js","webpack://WaveSurfer/./src/peakcache.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","_ajax","_interopRequireDefault","_getId","_max","_min","_observer","_extend","_style","_requestAnimationFrame","_frame","_debounce","_preventClick","Observer","_classCallCheck","this","handlers","event","fn","_this","push","callback","un","e","length","splice","handler","_this2","on","_len","arguments","args","Array","_key","apply","setTimeout","_len2","_key2","forEach","prefix","undefined","Math","random","toString","substring","el","styles","keys","prop","style","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","oRequestAnimationFrame","msRequestAnimationFrame","element","util","_interopRequireWildcard","PLAYING","PAUSED","FINISHED","WebAudio","params","_this$stateBehaviors","_this$states","_possibleConstructorReturn","_getPrototypeOf","audioContext","offlineAudioContext","stateBehaviors","_defineProperty","init","addOnAudioProcess","getPlayedPercents","duration","getDuration","getCurrentTime","startPosition","getPlayedTime","removeOnAudioProcess","fireEvent","ac","supportsWebAudio","getAudioContext","lastPlay","currentTime","scheduledPause","states","analyser","buffer","filters","gainNode","mergedPeaks","offlineAc","peaks","playbackRate","scriptNode","source","splitPeaks","state","explicitDuration","AudioContext","webkitAudioContext","WaveSurferAudioContext","sampleRate","WaveSurferOfflineAudioContext","OfflineAudioContext","webkitOfflineAudioContext","createVolumeNode","createScriptNode","createAnalyserNode","setState","setPlaybackRate","audioRate","setLength","filter","disconnect","connect","setFilters","disconnectFilters","reduce","prev","curr","audioScriptProcessor","createScriptProcessor","scriptBufferSize","createJavaScriptNode","destination","onaudioprocess","time","pause","createAnalyser","createGain","createGainNode","deviceId","audio","Audio","setSinkId","Promise","reject","Error","autoplay","dest","createMediaStreamDestination","srcObject","stream","gain","setValueAtTime","arraybuffer","errback","getOfflineAudioContext","decodeAudioData","data","channels","numberOfChannels","first","last","splitChannels","newBuffer","createBuffer","sampleSize","sampleStep","chan","getChannelData","start","end","min","max","j","isPaused","unAll","disconnectSource","closeAudioContext","close","createSource","createBufferSource","noteGrainOn","stop","noteOff","adjustedTime","seekTo","resume","play","_drawer","_webaudio","_mediaelement","_peakcache","WaveSurfer","defaultParams","autoCenter","backend","backgroundColor","barHeight","barGap","container","cursorColor","cursorWidth","dragSelection","fillParent","forceDecode","height","hideScrollbar","interact","loopSelection","maxCanvasWidth","mediaContainer","mediaControls","mediaType","minPxPerSec","normalize","partialRender","pixelRatio","devicePixelRatio","screen","deviceXDPI","logicalXDPI","plugins","progressColor","removeMediaElementOnDestroy","renderer","MultiCanvas","responsive","rtl","scrollParent","skipLength","waveColor","xhr","backends","MediaElement","extend","document","querySelector","transform","setBackgroundColor","savedVolume","isMuted","tmpEvents","currentAjax","drawer","peakCache","Drawer","Backend","initialisedPluginList","isDestroyed","isReady","prevWidth","_onResize","debounce","wrapper","clientWidth","_assertThisInitialized","registerPlugins","createDrawer","createBackend","createPeakCache","plugin","addPlugin","deferInit","initPlugin","_this3","instance","concat","staticProps","pluginStaticProp","Instance","getOwnPropertyNames","destroyPlugin","destroy","_this4","_this5","addEventListener","drawBuffer","progress","oldScrollParent","_this6","newVolume","getVolume","PeakCache","seconds","_this7","skip","offset","position","seekAndCenter","recenter","_this8","isFinite","paused","setVolume","rate","getPlaybackRate","setMute","mute","color","background","updateCursor","setHeight","nominalWidth","round","parentWidth","getWidth","width","newRanges","addRangeToPeakCache","getPeaks","drawPeaks","pxPerSec","_this9","decodeArrayBuffer","loadDecodedBuffer","load","blob","_this10","reader","FileReader","onProgress","loadArrayBuffer","target","result","readAsArrayBuffer","empty","url","preload","preloadIgnoreReasons","Preload is not 'auto', 'none' or 'metadata'","indexOf","Peaks are not provided","Backend is not of type MediaElement","Url is not of type string","activeReasons","reason","console","warn","join","loadBuffer","loadMediaElement","_this11","action","once","getArrayBuffer","setPeaks","urlOrElt","_this12","elt","loadElt","src","err","_this13","_this14","ajax","responseType","statusText","percentComplete","lengthComputable","loaded","total","accuracy","noWindow","arr","map","val","json","JSON","stringify","open","encodeURIComponent","format","quality","type","getImage","abort","cancelAjax","clearTmpEvents","setWidth","destroyAllPlugins","removeEventListener","VERSION","__VERSION__","options","XMLHttpRequest","fired100","method","requestHeaders","header","setRequestHeader","withCredentials","status","response","send","values","largest","Infinity","smallest","Number","sources","func","default","wait","immediate","timeout","context","timestamp","later","Date","now","debounced","callNow","clear","clearTimeout","flush","preventClickHandler","stopPropagation","body","_drawer2","maxCanvasElementWidth","hasProgressCanvas","halfPixel","canvases","progressWave","EntryClass","CanvasEntry","overlap","ceil","createWrapper","createElements","appendChild","createElement","zIndex","left","top","bottom","overflow","display","boxSizing","borderRightStyle","pointerEvents","addCanvas","borderRightWidth","borderRightColor","totalWidth","requiredCanvases","removeCanvas","canvasWidth","lastCanvas","entry","updateDimensions","clearWave","leftOffset","initWave","initProgress","lastEntry","wave","parentElement","removeChild","pop","elementWidth","channelIndex","prepareDraw","_ref","absmax","hasMinVals","offsetY","halfH","peakIndexScale","bar","barWidth","step","scale","peak","floor","h","fillRect","_ref2","reflectedPeaks","len","drawLine","setFillStyles","drawLines","x","y","startCanvas","endCanvas","intersection","x1","y1","x2","y2","fillRects","frame","channelPeaks","some","all","images","lastPos","userSelect","webkitUserSelect","overflowX","overflowY","setupWrapperEvents","noPrevent","preventDefault","clientX","targetTouches","bbox","getBoundingClientRect","right","scrollLeft","scrollWidth","scrollbarHeight","offsetHeight","clientHeight","clientY","handleEvent","drawBars","drawWave","percent","recenterOnPosition","half","maxScroll","updateSize","minPxDelta","pos","newPos","updateProgress","parentNode","waveCtx","progressCtx","id","constructor","toLowerCase","getContext","offsetLeft","elementSize","clearRect","canvas","fillStyle","fillRectToContext","ctx","drawLineToContext","canvasStart","canvasEnd","halfOffset","absmaxHalf","beginPath","moveTo","lineTo","closePath","fill","resolve","toBlob","toDataURL","media","volume","elementPosition","onPlayEnd","createTimer","onAudioProcess","controls","prevMedia","_load","muted","seekable","clearPlayEnd","promise","setPlayEnd","_onPlayEnd","_get","clearPeakCache","peakCacheRanges","peakCacheLength","uncachedRanges","item","sort","a","b","uncachedRangePairs","peakCacheRangePairs"],"mappings":"CAAA,SAAAA,EAAAC,GACA,iBAAAC,SAAA,iBAAAC,OACAA,OAAAD,QAAAD,IACA,mBAAAG,eAAAC,IACAD,OAAA,gBAAAH,GACA,iBAAAC,QACAA,QAAA,WAAAD,IAEAD,EAAA,WAAAC,IARA,CASCK,OAAA,WACD,mBCTA,IAAAC,EAAA,GAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAP,QAGA,IAAAC,EAAAI,EAAAE,GAAA,CACAC,EAAAD,EACAE,GAAA,EACAT,QAAA,IAUA,OANAU,EAAAH,GAAAI,KAAAV,EAAAD,QAAAC,IAAAD,QAAAM,GAGAL,EAAAQ,GAAA,EAGAR,EAAAD,QA0DA,OArDAM,EAAAM,EAAAF,EAGAJ,EAAAO,EAAAR,EAGAC,EAAAQ,EAAA,SAAAd,EAAAe,EAAAC,GACAV,EAAAW,EAAAjB,EAAAe,IACAG,OAAAC,eAAAnB,EAAAe,EAAA,CAA0CK,YAAA,EAAAC,IAAAL,KAK1CV,EAAAgB,EAAA,SAAAtB,GACA,oBAAAuB,eAAAC,aACAN,OAAAC,eAAAnB,EAAAuB,OAAAC,YAAA,CAAwDC,MAAA,WAExDP,OAAAC,eAAAnB,EAAA,cAAiDyB,OAAA,KAQjDnB,EAAAoB,EAAA,SAAAD,EAAAE,GAEA,GADA,EAAAA,IAAAF,EAAAnB,EAAAmB,IACA,EAAAE,EAAA,OAAAF,EACA,KAAAE,GAAA,iBAAAF,QAAAG,WAAA,OAAAH,EACA,IAAAI,EAAAX,OAAAY,OAAA,MAGA,GAFAxB,EAAAgB,EAAAO,GACAX,OAAAC,eAAAU,EAAA,WAAyCT,YAAA,EAAAK,UACzC,EAAAE,GAAA,iBAAAF,EAAA,QAAAM,KAAAN,EAAAnB,EAAAQ,EAAAe,EAAAE,EAAA,SAAAA,GAAgH,OAAAN,EAAAM,IAAqBC,KAAA,KAAAD,IACrI,OAAAF,GAIAvB,EAAA2B,EAAA,SAAAhC,GACA,IAAAe,EAAAf,KAAA2B,WACA,WAA2B,OAAA3B,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAK,EAAAQ,EAAAE,EAAA,IAAAA,GACAA,GAIAV,EAAAW,EAAA,SAAAiB,EAAAC,GAAsD,OAAAjB,OAAAkB,UAAAC,eAAA1B,KAAAuB,EAAAC,IAGtD7B,EAAAgC,EAAA,GAIAhC,IAAAiC,EAAA,k/BClFA,IAAAC,EAAAC,EAAAnC,EAAA,IACAoC,EAAAD,EAAAnC,EAAA,IACAqC,EAAAF,EAAAnC,EAAA,IACAsC,EAAAH,EAAAnC,EAAA,IACAuC,EAAAJ,EAAAnC,EAAA,IACAwC,EAAAL,EAAAnC,EAAA,KACAyC,EAAAN,EAAAnC,EAAA,IACA0C,EAAAP,EAAAnC,EAAA,IACA2C,EAAAR,EAAAnC,EAAA,KACA4C,EAAAT,EAAAnC,EAAA,KACA6C,EAAAV,EAAAnC,EAAA,mUCAqB8C,aAIjB,SAAAA,iGAAcC,CAAAC,KAAAF,GAMVE,KAAKC,SAAW,uDASjBC,EAAOC,GAAI,IAAAC,EAAAJ,KACLA,KAAKC,WACND,KAAKC,SAAW,IAGpB,IAAIA,EAAWD,KAAKC,SAASC,GAO7B,OANKD,IACDA,EAAWD,KAAKC,SAASC,GAAS,IAEtCD,EAASI,KAAKF,GAGP,CACH1C,KAAMyC,EACNI,SAAUH,EACVI,GAAI,SAACC,EAAGL,GAAJ,OAAWC,EAAKG,GAAGC,EAAGL,gCAW/BD,EAAOC,GACN,GAAKH,KAAKC,SAAV,CAIA,IACI/C,EADE+C,EAAWD,KAAKC,SAASC,GAE/B,GAAID,EACA,GAAIE,EACA,IAAKjD,EAAI+C,EAASQ,OAAS,EAAGvD,GAAK,EAAGA,IAC9B+C,EAAS/C,IAAMiD,GACfF,EAASS,OAAOxD,EAAG,QAI3B+C,EAASQ,OAAS,mCAS1BT,KAAKC,SAAW,kCAWfC,EAAOS,GAAS,IAAAC,EAAAZ,KASjB,OAAOA,KAAKa,GAAGX,EARJ,SAALC,IAAkB,QAAAW,EAAAC,UAAAN,OAATO,EAAS,IAAAC,MAAAH,GAAAI,EAAA,EAAAA,EAAAJ,EAAAI,IAATF,EAASE,GAAAH,UAAAG,GAEpBP,EAAQQ,MAAMP,EAAMI,GAEpBI,WAAW,WACPR,EAAKL,GAAGL,EAAOC,IAChB,uCAWDD,GAAgB,QAAAmB,EAAAN,UAAAN,OAANO,EAAM,IAAAC,MAAAI,EAAA,EAAAA,EAAA,KAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAANN,EAAMM,EAAA,GAAAP,UAAAO,GACtB,GAAKtB,KAAKC,SAAV,CAGA,IAAMA,EAAWD,KAAKC,SAASC,GAC/BD,GACIA,EAASsB,QAAQ,SAAApB,GACbA,EAAEgB,WAAF,EAAMH,oKCxGP,SAAeQ,QACXC,IAAXD,IACAA,EAAS,eAEb,OACIA,EACAE,KAAKC,SACAC,SAAS,IACTC,UAAU,iHCXR,SAAeC,EAAIC,GAM9B,OALAnE,OAAOoE,KAAKD,GAAQR,QAAQ,SAAAU,GACpBH,EAAGI,MAAMD,KAAUF,EAAOE,KAC1BH,EAAGI,MAAMD,GAAQF,EAAOE,MAGzBH,8HCNPhF,OAAOqF,uBACPrF,OAAOsF,6BACPtF,OAAOuF,0BACPvF,OAAOwF,wBACPxF,OAAOyF,yBACN,SAACjC,EAAUkC,GAAX,OAAuBpB,WAAWd,EAAU,IAAO,MACtD5B,KAAK5B,wICdP,IAAA2F,ySAAAC,CAAA1F,EAAA,49BAGA,IAAM2F,EAAU,UACVC,EAAS,SACTC,EAAW,WAOIC,cAyFjB,SAAAA,EAAYC,GAAQ,IAAAC,EAAAC,EAAA7C,EAAA,mGAAAL,CAAAC,KAAA8C,IAChB1C,EAAA8C,EAAAlD,KAAAmD,EAAAL,GAAAzF,KAAA2C,QAtFJoD,aAAe,KAqFKhD,EAnFpBiD,oBAAsB,KAmFFjD,EAjFpBkD,gBAiFoBC,EAAAP,EAAA,GAhFfL,EAAU,CACPa,KADO,WAEHxD,KAAKyD,qBAETC,kBAJO,WAKH,IAAMC,EAAW3D,KAAK4D,cACtB,OAAO5D,KAAK6D,iBAAmBF,GAAY,GAE/CE,eARO,WASH,OAAO7D,KAAK8D,cAAgB9D,KAAK+D,mBAuEzBR,EAAAP,EApEfJ,EAAS,CACNY,KADM,WAEFxD,KAAKgE,wBAETN,kBAJM,WAKF,IAAMC,EAAW3D,KAAK4D,cACtB,OAAO5D,KAAK6D,iBAAmBF,GAAY,GAE/CE,eARM,WASF,OAAO7D,KAAK8D,iBA2DJP,EAAAP,EAxDfH,EAAW,CACRW,KADQ,WAEJxD,KAAKgE,uBACLhE,KAAKiE,UAAU,WAEnBP,kBALQ,WAMJ,OAAO,GAEXG,eARQ,WASJ,OAAO7D,KAAK4D,iBA+CJZ,GAGhB5C,EAAK2C,OAASA,EAEd3C,EAAK8D,GACDnB,EAAOK,eACNhD,EAAK+D,mBAAqB/D,EAAKgE,kBAAoB,IAExDhE,EAAKiE,SAAWjE,EAAK8D,GAAGI,YAExBlE,EAAK0D,cAAgB,EAErB1D,EAAKmE,eAAiB,KAEtBnE,EAAKoE,QAALjB,EAAAN,EAAA,GACKN,EAAU/E,OAAOY,OAAO4B,EAAKkD,eAAeX,KADjDY,EAAAN,EAEKL,EAAShF,OAAOY,OAAO4B,EAAKkD,eAAeV,KAFhDW,EAAAN,EAGKJ,EAAWjF,OAAOY,OAAO4B,EAAKkD,eAAeT,KAHlDI,GAMA7C,EAAKqE,SAAW,KAEhBrE,EAAKsE,OAAS,KAEdtE,EAAKuE,QAAU,GAEfvE,EAAKwE,SAAW,KAEhBxE,EAAKyE,YAAc,KAEnBzE,EAAK0E,UAAY,KAEjB1E,EAAK2E,MAAQ,KAEb3E,EAAK4E,aAAe,EAEpB5E,EAAKqE,SAAW,KAEhBrE,EAAK6E,WAAa,KAElB7E,EAAK8E,OAAS,KAEd9E,EAAK+E,WAAa,GAElB/E,EAAKgF,MAAQ,KAEbhF,EAAKiF,iBAAmBtC,EAAOY,SA/CfvD,8OAzFcqC,EAAK3C,wDAqDnC,SAAUhD,OAAOwI,eAAgBxI,OAAOyI,8DAaxC,OAJKzI,OAAO0I,yBACR1I,OAAO0I,uBAAyB,IAAK1I,OAAOwI,cACxCxI,OAAOyI,qBAERzI,OAAO0I,sEAUKC,GAKnB,OAJK3I,OAAO4I,gCACR5I,OAAO4I,8BAAgC,IAAK5I,OAAO6I,qBAC/C7I,OAAO8I,2BAA2B,EAAG,EAAGH,IAEzC3I,OAAO4I,oEA8Dd1F,KAAK6F,mBACL7F,KAAK8F,mBACL9F,KAAK+F,qBAEL/F,KAAKgG,SAASpD,GACd5C,KAAKiG,gBAAgBjG,KAAK+C,OAAOmD,WACjClG,KAAKmG,UAAU,+CAKXnG,KAAK2E,UACL3E,KAAK2E,QAAQpD,QAAQ,SAAA6E,GACjBA,GAAUA,EAAOC,eAErBrG,KAAK2E,QAAU,KAEf3E,KAAKyE,SAAS6B,QAAQtG,KAAK4E,4CAS1BQ,GACDpF,KAAKoF,QAAUpF,KAAKwE,OAAOY,KAC3BpF,KAAKoF,MAAQpF,KAAKwE,OAAOY,GACzBpF,KAAKoF,MAAM5B,KAAKnG,KAAK2C,2CASP,QAAAc,EAAAC,UAAAN,OAATkE,EAAS,IAAA1D,MAAAH,GAAAI,EAAA,EAAAA,EAAAJ,EAAAI,IAATyD,EAASzD,GAAAH,UAAAG,GAClBlB,KAAKuG,WAAW5B,sCAWTA,GAEP3E,KAAKwG,oBAGD7B,GAAWA,EAAQlE,SACnBT,KAAK2E,QAAUA,EAGf3E,KAAKyE,SAAS4B,aAGd1B,EACK8B,OAAO,SAACC,EAAMC,GAEX,OADAD,EAAKJ,QAAQK,GACNA,GACR3G,KAAKyE,UACP6B,QAAQtG,KAAK4E,sDAMlB5E,KAAK+C,OAAO6D,qBACZ5G,KAAKiF,WAAajF,KAAK+C,OAAO6D,qBAE1B5G,KAAKkE,GAAG2C,sBACR7G,KAAKiF,WAAajF,KAAKkE,GAAG2C,sBACtB/D,EAASgE,kBAGb9G,KAAKiF,WAAajF,KAAKkE,GAAG6C,qBACtBjE,EAASgE,kBAIrB9G,KAAKiF,WAAWqB,QAAQtG,KAAKkE,GAAG8C,yDAIhB,IAAApG,EAAAZ,KAChBA,KAAKiF,WAAWgC,eAAiB,WAC7B,IAAMC,EAAOtG,EAAKiD,iBAEdqD,GAAQtG,EAAKgD,eACbhD,EAAKoF,SAASnD,GACdjC,EAAKqD,UAAU,UACRiD,GAAQtG,EAAK2D,eACpB3D,EAAKuG,QACEvG,EAAKwE,QAAUxE,EAAK4D,OAAO7B,IAClC/B,EAAKqD,UAAU,eAAgBiD,mDAOvClH,KAAKiF,WAAWgC,eAAiB,0DAKjCjH,KAAKyE,SAAWzE,KAAKkE,GAAGkD,iBACxBpH,KAAKyE,SAAS6B,QAAQtG,KAAK4E,qDAUvB5E,KAAKkE,GAAGmD,WACRrH,KAAK4E,SAAW5E,KAAKkE,GAAGmD,aAExBrH,KAAK4E,SAAW5E,KAAKkE,GAAGoD,iBAG5BtH,KAAK4E,SAAS0B,QAAQtG,KAAKkE,GAAG8C,+CAUxBO,GACN,GAAIA,EAAU,CAMV,IAAIC,EAAQ,IAAI1K,OAAO2K,MACvB,IAAKD,EAAME,UACP,OAAOC,QAAQC,OACX,IAAIC,MAAM,+CAGlBL,EAAMM,UAAW,EACjB,IAAIC,EAAO/H,KAAKkE,GAAG8D,+BAKnB,OAJAhI,KAAK4E,SAASyB,aACdrG,KAAK4E,SAAS0B,QAAQyB,GACtBP,EAAMS,UAAYF,EAAKG,OAEhBV,EAAME,UAAUH,GAEvB,OAAOI,QAAQC,OAAO,IAAIC,MAAM,qBAAuBN,sCASrDpJ,GACN6B,KAAK4E,SAASuD,KAAKC,eAAejK,EAAO6B,KAAKkE,GAAGI,iDASjD,OAAOtE,KAAK4E,SAASuD,KAAKhK,gDAWZkK,EAAa/H,EAAUgI,GAChCtI,KAAK8E,YACN9E,KAAK8E,UAAY9E,KAAKuI,uBAClBvI,KAAKkE,IAAMlE,KAAKkE,GAAGuB,WAAazF,KAAKkE,GAAGuB,WAAa,QAG7DzF,KAAK8E,UAAU0D,gBACXH,EACA,SAAAI,GAAI,OAAInI,EAASmI,IACjBH,oCAUCvD,EAAOpB,GACI,MAAZA,IACA3D,KAAKqF,iBAAmB1B,GAE5B3D,KAAK+E,MAAQA,oCAQPtE,GAEN,IAAIT,KAAK6E,aAAepE,GAAU,EAAIT,KAAK6E,YAAYpE,OAAS,EAAI,EAApE,CAIAT,KAAKmF,WAAa,GAClBnF,KAAK6E,YAAc,GAGnB,IACItH,EADEmL,EAAW1I,KAAK0E,OAAS1E,KAAK0E,OAAOiE,iBAAmB,EAE9D,IAAKpL,EAAI,EAAGA,EAAImL,EAAUnL,IACtByC,KAAKmF,WAAW5H,GAAK,GACrByC,KAAKmF,WAAW5H,GAAG,GAAKkD,EAAS,IAAM,EACvCT,KAAKmF,WAAW5H,GAAG,GAAKkD,EAAS,GAAK,GAAK,EAE/CT,KAAK6E,YAAY,GAAKpE,EAAS,IAAM,EACrCT,KAAK6E,YAAY,GAAKpE,EAAS,GAAK,GAAK,oCAYpCA,EAAQmI,EAAOC,GACpB,GAAI7I,KAAK+E,MACL,OAAO/E,KAAK+E,MAEhB,IAAK/E,KAAK0E,OACN,MAAO,GAQX,GALAkE,EAAQA,GAAS,EACjBC,EAAOA,GAAQpI,EAAS,EAExBT,KAAKmG,UAAU1F,IAEVT,KAAK0E,OACN,OAAO1E,KAAK+C,OAAO+F,cACb9I,KAAKmF,WACLnF,KAAK6E,YAUf,IAAK7E,KAAK0E,OAAOjE,OAAQ,CACrB,IAAMsI,EAAY/I,KAAKgJ,aAAa,EAAG,KAAMhJ,KAAKyF,YAClDzF,KAAK0E,OAASqE,EAAUrE,OAG5B,IAGInH,EAHE0L,EAAajJ,KAAK0E,OAAOjE,OAASA,EAClCyI,KAAgBD,EAAa,KAAO,EACpCP,EAAW1I,KAAK0E,OAAOiE,iBAG7B,IAAKpL,EAAI,EAAGA,EAAImL,EAAUnL,IAAK,CAC3B,IAAMwH,EAAQ/E,KAAKmF,WAAW5H,GACxB4L,EAAOnJ,KAAK0E,OAAO0E,eAAe7L,GACpCL,OAAC,EAEL,IAAKA,EAAI0L,EAAO1L,GAAK2L,EAAM3L,IAAK,CAC5B,IAAMmM,KAAWnM,EAAI+L,GACfK,KAASD,EAAQJ,GACnBM,EAAM,EACNC,EAAM,EACNC,OAAC,EAEL,IAAKA,EAAIJ,EAAOI,EAAIH,EAAKG,GAAKP,EAAY,CACtC,IAAM/K,EAAQgL,EAAKM,GAEftL,EAAQqL,IACRA,EAAMrL,GAGNA,EAAQoL,IACRA,EAAMpL,GAId4G,EAAM,EAAI7H,GAAKsM,EACfzE,EAAM,EAAI7H,EAAI,GAAKqM,GAEV,GAALhM,GAAUiM,EAAMxJ,KAAK6E,YAAY,EAAI3H,MACrC8C,KAAK6E,YAAY,EAAI3H,GAAKsM,IAGrB,GAALjM,GAAUgM,EAAMvJ,KAAK6E,YAAY,EAAI3H,EAAI,MACzC8C,KAAK6E,YAAY,EAAI3H,EAAI,GAAKqM,IAK1C,OAAOvJ,KAAK+C,OAAO+F,cAAgB9I,KAAKmF,WAAanF,KAAK6E,wDAS1D,OAAO7E,KAAKoF,MAAM1B,kBAAkBrG,KAAK2C,iDAKrCA,KAAKkF,QACLlF,KAAKkF,OAAOmB,+CAQXrG,KAAK0J,YACN1J,KAAKmH,QAETnH,KAAK2J,QACL3J,KAAK0E,OAAS,KACd1E,KAAKwG,oBACLxG,KAAK4J,mBACL5J,KAAK4E,SAASyB,aACdrG,KAAKiF,WAAWoB,aAChBrG,KAAKyE,SAAS4B,aAGVrG,KAAK+C,OAAO8G,oBAGiB,mBAAlB7J,KAAKkE,GAAG4F,OACE,UAAjB9J,KAAKkE,GAAGkB,OAERpF,KAAKkE,GAAG4F,QAGZ9J,KAAKkE,GAAK,KAGLlE,KAAK+C,OAAOK,aAGbpD,KAAK+C,OAAOK,aAAe,KAF3BtG,OAAO0I,uBAAyB,KAKpC1I,OAAO4I,8BAAgC,mCAS1ChB,GACD1E,KAAK8D,cAAgB,EACrB9D,KAAKqE,SAAWrE,KAAKkE,GAAGI,YACxBtE,KAAK0E,OAASA,EACd1E,KAAK+J,sDAKL/J,KAAK4J,mBACL5J,KAAKkF,OAASlF,KAAKkE,GAAG8F,qBAGtBhK,KAAKkF,OAAOmE,MAAQrJ,KAAKkF,OAAOmE,OAASrJ,KAAKkF,OAAO+E,YACrDjK,KAAKkF,OAAOgF,KAAOlK,KAAKkF,OAAOgF,MAAQlK,KAAKkF,OAAOiF,QAEnDnK,KAAKkF,OAAOF,aAAaoD,eACrBpI,KAAKgF,aACLhF,KAAKkE,GAAGI,aAEZtE,KAAKkF,OAAOR,OAAS1E,KAAK0E,OAC1B1E,KAAKkF,OAAOoB,QAAQtG,KAAKyE,6CASzB,OAAOzE,KAAKoF,QAAUpF,KAAKwE,OAAO7B,yCASlC,OAAI3C,KAAKqF,iBACErF,KAAKqF,iBAEXrF,KAAK0E,OAGH1E,KAAK0E,OAAOf,SAFR,iCAaR0F,EAAOC,GACV,GAAKtJ,KAAK0E,OAuBV,OAnBA1E,KAAKuE,eAAiB,KAET,MAAT8E,IACAA,EAAQrJ,KAAK6D,mBACA7D,KAAK4D,gBACdyF,EAAQ,GAGL,MAAPC,IACAA,EAAMtJ,KAAK4D,eAGf5D,KAAK8D,cAAgBuF,EACrBrJ,KAAKqE,SAAWrE,KAAKkE,GAAGI,YAEpBtE,KAAKoF,QAAUpF,KAAKwE,OAAO3B,IAC3B7C,KAAKgG,SAASpD,GAGX,CACHyG,MAAOA,EACPC,IAAKA,2CAUT,OAAQtJ,KAAKkE,GAAGI,YAActE,KAAKqE,UAAYrE,KAAKgF,0CAUnDqE,EAAOC,GACR,GAAKtJ,KAAK0E,OAAV,CAKA1E,KAAK+J,eAEL,IAAMK,EAAepK,KAAKqK,OAAOhB,EAAOC,GAExCD,EAAQe,EAAaf,MACrBC,EAAMc,EAAad,IAEnBtJ,KAAKuE,eAAiB+E,EAEtBtJ,KAAKkF,OAAOmE,MAAM,EAAGA,EAAOC,EAAMD,GAEb,aAAjBrJ,KAAKkE,GAAGkB,OACRpF,KAAKkE,GAAGoG,QAAUtK,KAAKkE,GAAGoG,SAG9BtK,KAAKgG,SAASrD,GAEd3C,KAAKiE,UAAU,yCAOfjE,KAAKuE,eAAiB,KAEtBvE,KAAK8D,eAAiB9D,KAAK+D,gBAC3B/D,KAAKkF,QAAUlF,KAAKkF,OAAOgF,KAAK,GAEhClK,KAAKgG,SAASpD,GAEd5C,KAAKiE,UAAU,kDAUf,OAAOjE,KAAKoF,MAAMvB,eAAexG,KAAK2C,gDAStC,OAAOA,KAAKgF,qDAQA7G,GACZA,EAAQA,GAAS,EACb6B,KAAK0J,WACL1J,KAAKgF,aAAe7G,GAEpB6B,KAAKmH,QACLnH,KAAKgF,aAAe7G,EACpB6B,KAAKuK,6BA9rBIzH,EAEVgE,iBAAmB,wHCd9B,IAAArE,ySAAAC,CAAA1F,EAAA,IACAwN,EAAArL,EAAAnC,EAAA,KACAyN,EAAAtL,EAAAnC,EAAA,IACA0N,EAAAvL,EAAAnC,EAAA,KACA2N,EAAAxL,EAAAnC,EAAA,6/BA6LqB4N,cAoGjB,SAAAA,EAAY7H,GAAQ,IAAA3C,EAchB,GAdgBL,EAAAC,KAAA4K,IAChBxK,EAAA8C,EAAAlD,KAAAmD,EAAAyH,GAAAvN,KAAA2C,QAnGJ6K,cAAgB,CACZzH,aAAc,KACdwD,qBAAsB,KACtBV,UAAW,EACX4E,YAAY,EACZC,QAAS,WACTC,gBAAiB,KACjBC,UAAW,EACXC,OAAQ,KACRC,UAAW,KACXC,YAAa,OACbC,YAAa,EACbC,eAAe,EACf3H,SAAU,KACV4H,YAAY,EACZC,aAAa,EACbC,OAAQ,IACRC,eAAe,EACfC,UAAU,EACVC,eAAe,EACfC,eAAgB,IAChBC,eAAgB,KAChBC,eAAe,EACfC,UAAW,QACXC,YAAa,GACbC,WAAW,EACXC,eAAe,EACfC,WAAYtP,OAAOuP,kBAAoBC,OAAOC,WAAaD,OAAOE,YAClEC,QAAS,GACTC,cAAe,OACfC,6BAA6B,EAC7BC,SAAUC,UACVC,YAAY,EACZC,KAAK,EACLC,cAAc,EACdC,WAAY,EACZnE,eAAe,EACfoE,UAAW,OACXC,IAAK,IA4DW/M,EAxDpBgN,SAAW,CACPC,uBACAvK,oBAsDgB1C,EApBpBqC,KAAOA,EA0BHrC,EAAK2C,OAASN,EAAK6K,OAAO,GAAIlN,EAAKyK,cAAe9H,GAGlD3C,EAAK+K,UACD,iBAAmBpI,EAAOoI,UAC1BoC,SAASC,cAAcpN,EAAK2C,OAAOoI,WACnC/K,EAAK2C,OAAOoI,WAEX/K,EAAK+K,UACN,MAAM,IAAItD,MAAM,+BAgBpB,GAbkC,MAA9BzH,EAAK2C,OAAO+I,eAEZ1L,EAAK0L,eAAiB1L,EAAK+K,UACiB,iBAA9B/K,EAAK2C,OAAO+I,eAE1B1L,EAAK0L,eAAiByB,SAASC,cAC3BpN,EAAK2C,OAAO+I,gBAIhB1L,EAAK0L,eAAiB1L,EAAK2C,OAAO+I,gBAGjC1L,EAAK0L,eACN,MAAM,IAAIjE,MAAM,qCAGpB,GAAIzH,EAAK2C,OAAO8I,gBAAkB,EAC9B,MAAM,IAAIhE,MAAM,yCACb,GAAIzH,EAAK2C,OAAO8I,eAAiB,GAAK,EACzC,MAAM,IAAIhE,MAAM,yCAgDpB,IA7CwB,IAApBzH,EAAK2C,OAAOgK,KACZtK,EAAKP,MAAM9B,EAAK+K,UAAW,CACvBsC,UAAW,oBAIfrN,EAAK2C,OAAOiI,iBACZ5K,EAAKsN,mBAAmBtN,EAAK2C,OAAOiI,iBAQxC5K,EAAKuN,YAAc,EAMnBvN,EAAKwN,SAAU,EAOfxN,EAAKyN,UAAY,GAMjBzN,EAAK0N,YAAc,KAEnB1N,EAAKiI,YAAc,KAEnBjI,EAAK2N,OAAS,KAEd3N,EAAK2K,QAAU,KAEf3K,EAAK4N,UAAY,KAGmB,mBAAzB5N,EAAK2C,OAAO6J,SACnB,MAAM,IAAI/E,MAAM,iCAKpBzH,EAAK6N,OAAS7N,EAAK2C,OAAO6J,SAI1BxM,EAAK8N,QAAU9N,EAAKgN,SAAShN,EAAK2C,OAAOgI,SAKzC3K,EAAK+N,sBAAwB,GAE7B/N,EAAKgO,aAAc,EAQnBhO,EAAKiO,SAAU,EAKf,IAAIC,EAAY,EAgBhB,OAfAlO,EAAKmO,UAAY9L,EAAK+L,SAClB,WAEQF,GAAalO,EAAK2N,OAAOU,QAAQC,aAChCtO,EAAK2C,OAAOiK,eAEbsB,EAAYlO,EAAK2N,OAAOU,QAAQC,YAChCtO,EAAK2N,OAAO9J,UAAU,YAGI,iBAA3B7D,EAAK2C,OAAO+J,WACnB1M,EAAK2C,OAAO+J,WACZ,KAGJ5J,EAAA9C,EAAAuO,EAAAvO,gPAxOgCqC,EAAK3C,iDAwD3BiD,GAEV,OADmB,IAAI6H,EAAW7H,GAChBS,6CA8LlB,OAJAxD,KAAK4O,gBAAgB5O,KAAK+C,OAAO0J,SACjCzM,KAAK6O,eACL7O,KAAK8O,gBACL9O,KAAK+O,kBACE/O,6CAWKyM,GAAS,IAAA7L,EAAAZ,KAarB,OAXAyM,EAAQlL,QAAQ,SAAAyN,GAAM,OAAIpO,EAAKqO,UAAUD,KAGzCvC,EAAQlL,QAAQ,SAAAyN,GAGPA,EAAOE,WACRtO,EAAKuO,WAAWH,EAAOvR,QAG/BuC,KAAKiE,UAAU,qBAAsBwI,GAC9BzM,gDAUP,OAAOA,KAAKmO,wDAWNa,GAAQ,IAAAI,EAAApP,KACd,IAAKgP,EAAOvR,KACR,MAAM,IAAIoK,MAAM,gCAEpB,IAAKmH,EAAOK,SACR,MAAM,IAAIxH,MAAJ,UAAAyH,OACQN,EAAOvR,KADf,yCAMNuR,EAAOO,aACP3R,OAAOoE,KAAKgN,EAAOO,aAAahO,QAAQ,SAAAiO,GAKpCJ,EAAKI,GAAoBR,EAAOO,YAAYC,KAIpD,IAAMC,EAAWT,EAAOK,SAiBxB,OAd8BzR,OAAO8R,oBACjCjN,EAAK3C,SAAShB,WAEIyC,QAAQ,SAAA9C,GAC1BgR,EAAS3Q,UAAUL,GAAOgE,EAAK3C,SAAShB,UAAUL,KAQtDuB,KAAKgP,EAAOvR,MAAQ,IAAIgS,EAAST,EAAOjM,QAAU,GAAI/C,MACtDA,KAAKiE,UAAU,eAAgB+K,EAAOvR,MAC/BuC,wCAWAvC,GACP,IAAKuC,KAAKvC,GACN,MAAM,IAAIoK,MAAJ,UAAAyH,OAAoB7R,EAApB,6BASV,OAPIuC,KAAKmO,sBAAsB1Q,IAE3BuC,KAAK2P,cAAclS,GAEvBuC,KAAKvC,GAAM+F,OACXxD,KAAKmO,sBAAsB1Q,IAAQ,EACnCuC,KAAKiE,UAAU,qBAAsBxG,GAC9BuC,2CAWGvC,GACV,IAAKuC,KAAKvC,GACN,MAAM,IAAIoK,MAAJ,UAAAyH,OACQ7R,EADR,qDAIV,IAAKuC,KAAKmO,sBAAsB1Q,GAC5B,MAAM,IAAIoK,MAAJ,UAAAyH,OACQ7R,EADR,4CAIV,GAAkC,mBAAvBuC,KAAKvC,GAAMmS,QAClB,MAAM,IAAI/H,MAAJ,UAAAyH,OAAoB7R,EAApB,uCAMV,OAHAuC,KAAKvC,GAAMmS,iBACJ5P,KAAKmO,sBAAsB1Q,GAClCuC,KAAKiE,UAAU,mBAAoBxG,GAC5BuC,iDASS,IAAA6P,EAAA7P,KAChBpC,OAAOoE,KAAKhC,KAAKmO,uBAAuB5M,QAAQ,SAAA9D,GAAI,OAChDoS,EAAKF,cAAclS,4CAUZ,IAAAqS,EAAA9P,KACXA,KAAK+N,OAAS,IAAI/N,KAAKiO,OAAOjO,KAAKmL,UAAWnL,KAAK+C,QACnD/C,KAAK+N,OAAOvK,OACZxD,KAAKiE,UAAU,iBAAkBjE,KAAK+N,SAEP,IAA3B/N,KAAK+C,OAAO+J,aACZhQ,OAAOiT,iBAAiB,SAAU/P,KAAKuO,WAAW,GAClDzR,OAAOiT,iBAAiB,oBAAqB/P,KAAKuO,WAAW,IAGjEvO,KAAK+N,OAAOlN,GAAG,SAAU,WACrBiP,EAAKE,aACLF,EAAK/B,OAAOkC,SAASH,EAAK/E,QAAQrH,uBAItC1D,KAAK+N,OAAOlN,GAAG,QAAS,SAACL,EAAGyP,GAExB7O,WAAW,WACP,IAAM8O,EAAkBJ,EAAK/M,OAAOiK,aACpC8C,EAAK/M,OAAOiK,cAAe,EAC3B8C,EAAK7L,UAAU,QAASgM,EAAWH,EAAKlM,eACxCkM,EAAK/M,OAAOiK,aAAekD,GAC5B,KAIPlQ,KAAK+N,OAAOlN,GAAG,SAAU,SAAAL,GACjBsP,EAAK/M,OAAOoJ,eACZ2D,EAAKE,aAETF,EAAK7L,UAAU,SAAUzD,6CAUjB,IAAA2P,EAAAnQ,KACRA,KAAK+K,SACL/K,KAAK+K,QAAQ6E,UAIU,gBAAvB5P,KAAK+C,OAAOgI,UACZ/K,KAAK+C,OAAOgI,QAAU,gBAIC,YAAvB/K,KAAK+C,OAAOgI,SACX/K,KAAKkO,QAAQpP,UAAUqF,iBAAiB9G,KAAK,QAE9C2C,KAAK+C,OAAOgI,QAAU,gBAG1B/K,KAAK+K,QAAU,IAAI/K,KAAKkO,QAAQlO,KAAK+C,QACrC/C,KAAK+K,QAAQvH,OACbxD,KAAKiE,UAAU,kBAAmBjE,KAAK+K,SAEvC/K,KAAK+K,QAAQlK,GAAG,SAAU,WACtBsP,EAAKpC,OAAOkC,SAASE,EAAKpF,QAAQrH,qBAClCyM,EAAKlM,UAAU,YAEnBjE,KAAK+K,QAAQlK,GAAG,OAAQ,kBAAMsP,EAAKlM,UAAU,UAC7CjE,KAAK+K,QAAQlK,GAAG,QAAS,kBAAMsP,EAAKlM,UAAU,WAE9CjE,KAAK+K,QAAQlK,GAAG,eAAgB,SAAAqG,GAC5BiJ,EAAKpC,OAAOkC,SAASE,EAAKpF,QAAQrH,qBAClCyM,EAAKlM,UAAU,eAAgBiD,KAIP,iBAAxBlH,KAAK+C,OAAOgI,UACZ/K,KAAK+K,QAAQlK,GAAG,OAAQ,WACpBsP,EAAKpC,OAAOkC,SAASE,EAAKpF,QAAQrH,uBAGtC1D,KAAK+K,QAAQlK,GAAG,SAAU,WACtB,IAAIuP,EAAYD,EAAKE,YACrBF,EAAKlM,UAAU,SAAUmM,GAErBD,EAAKpF,QAAQ6C,UAAYuC,EAAKvC,UAC9BuC,EAAKvC,QAAUuC,EAAKpF,QAAQ6C,QAC5BuC,EAAKlM,UAAU,OAAQkM,EAAKvC,uDAYpC5N,KAAK+C,OAAOoJ,gBACZnM,KAAKgO,UAAY,IAAIsC,iDAWzB,OAAOtQ,KAAK+K,QAAQnH,uDAUpB,OAAO5D,KAAK+K,QAAQlH,wDAST0M,GACPA,GAAWvQ,KAAK4D,cAChB5D,KAAKqK,OAAO,GAEZrK,KAAKqK,OAAOkG,EAAUvQ,KAAK4D,4CAgB9ByF,EAAOC,GAAK,IAAAkH,EAAAxQ,KAEb,OADAA,KAAKiE,UAAU,cAAe,kBAAMuM,EAAKjG,KAAKlB,EAAOC,KAC9CtJ,KAAK+K,QAAQR,KAAKlB,EAAOC,mCAUhC,IAAKtJ,KAAK+K,QAAQrB,WACd,OAAO1J,KAAK+K,QAAQ5D,4CAWxB,OAAOnH,KAAK+K,QAAQrB,WAAa1J,KAAKuK,OAASvK,KAAKmH,4CAUpD,OAAQnH,KAAK+K,QAAQrB,gDAUZ6G,GACTvQ,KAAKyQ,MAAMF,IAAYvQ,KAAK+C,OAAOkK,gDAU3BsD,GACRvQ,KAAKyQ,KAAKF,GAAWvQ,KAAK+C,OAAOkK,yCAYhCyD,GACD,IAAM/M,EAAW3D,KAAK4D,eAAiB,EACnC+M,EAAW3Q,KAAK6D,kBAAoB,EACxC8M,EAAWjP,KAAK8H,IAAI,EAAG9H,KAAK6H,IAAI5F,EAAUgN,GAAYD,GAAU,KAChE1Q,KAAK4Q,cAAcD,EAAWhN,yCAWpBsM,GACVjQ,KAAKqK,OAAO4F,GACZjQ,KAAK+N,OAAO8C,SAASZ,kCAalBA,GAAU,IAAAa,EAAA9Q,KAEb,GACwB,iBAAbiQ,IACNc,SAASd,IACVA,EAAW,GACXA,EAAW,EAEX,MAAM,IAAIpI,MACN,gFAGR7H,KAAKiE,UAAU,cAAe,kBAAM6M,EAAKzG,OAAO4F,KAEhD,IAAMe,EAAShR,KAAK+K,QAAQrB,WAEvBsH,GACDhR,KAAK+K,QAAQ5D,QAGjB,IAAM+I,EAAkBlQ,KAAK+C,OAAOiK,aACpChN,KAAK+C,OAAOiK,cAAe,EAC3BhN,KAAK+K,QAAQV,OAAO4F,EAAWjQ,KAAK4D,eACpC5D,KAAK+N,OAAOkC,SAASA,GAEhBe,GACDhR,KAAK+K,QAAQR,OAEjBvK,KAAK+C,OAAOiK,aAAekD,EAC3BlQ,KAAKiE,UAAU,OAAQgM,kCASvBjQ,KAAKmH,QACLnH,KAAKqK,OAAO,GACZrK,KAAK+N,OAAOkC,SAAS,qCAWf1I,GACN,OAAOvH,KAAK+K,QAAQrD,UAAUH,qCAUxB6I,GACNpQ,KAAK+K,QAAQkG,UAAUb,GACvBpQ,KAAKiE,UAAU,SAAUmM,uCAUzB,OAAOpQ,KAAK+K,QAAQsF,oDAURa,GACZlR,KAAK+K,QAAQ9E,gBAAgBiL,6CAS7B,OAAOlR,KAAK+K,QAAQoG,uDAYpBnR,KAAKoR,SAASpR,KAAK4N,yCAcfyD,GAEAA,IAASrR,KAAK4N,SAKdyD,GAGArR,KAAK2N,YAAc3N,KAAK+K,QAAQsF,YAChCrQ,KAAK+K,QAAQkG,UAAU,GACvBjR,KAAK4N,SAAU,EACf5N,KAAKiE,UAAU,SAAU,KAIzBjE,KAAK+K,QAAQkG,UAAUjR,KAAK2N,aAC5B3N,KAAK4N,SAAU,EACf5N,KAAKiE,UAAU,SAAUjE,KAAK2N,cAElC3N,KAAKiE,UAAU,OAAQjE,KAAK4N,UAlBxB5N,KAAKiE,UAAU,OAAQjE,KAAK4N,2CA4BhC,OAAO5N,KAAK4N,6CAWZ,OAAO5N,KAAK+K,QAAQpG,SAAW,0CAS/B3E,KAAK+C,OAAOiK,cAAgBhN,KAAK+C,OAAOiK,aACxChN,KAAKgQ,yDASLhQ,KAAK+C,OAAO4I,UAAY3L,KAAK+C,OAAO4I,gDASpC,OAAO3L,KAAK+C,OAAOmK,+CASVoE,GACTtR,KAAK+C,OAAOmK,UAAYoE,EACxBtR,KAAKgQ,wDASL,OAAOhQ,KAAK+C,OAAO2J,uDASN4E,GACbtR,KAAK+C,OAAO2J,cAAgB4E,EAC5BtR,KAAKgQ,0DASL,OAAOhQ,KAAK+C,OAAOiI,2DASJsG,GACftR,KAAK+C,OAAOiI,gBAAkBsG,EAC9B7O,EAAKP,MAAMlC,KAAKmL,UAAW,CACvBoG,WAAYvR,KAAK+C,OAAOiI,2DAW5B,OAAOhL,KAAK+C,OAAOqI,mDAURkG,GACXtR,KAAK+C,OAAOqI,YAAckG,EAC1BtR,KAAK+N,OAAOyD,mDASZ,OAAOxR,KAAK+C,OAAO0I,yCASbA,GACNzL,KAAK+C,OAAO0I,OAASA,EACrBzL,KAAK+N,OAAO0D,UAAUhG,EAASzL,KAAK+C,OAAOqJ,YAC3CpM,KAAKgQ,kDAUL,IAoBIjL,EApBE2M,EAAehQ,KAAKiQ,MACtB3R,KAAK4D,cACL5D,KAAK+C,OAAOkJ,YACZjM,KAAK+C,OAAOqJ,YAEVwF,EAAc5R,KAAK+N,OAAO8D,WAC5BC,EAAQJ,EAERrI,EAAQ,EACRC,EAAM5H,KAAK8H,IAAIH,EAAQuI,EAAaE,GAYxC,GATI9R,KAAK+C,OAAOwI,cACVvL,KAAK+C,OAAOiK,cAAgB0E,EAAeE,KAG7CvI,EAAQ,EACRC,EAFAwI,EAAQF,GAMR5R,KAAK+C,OAAOoJ,cAAe,CAC3B,IAKIjP,EALE6U,EAAY/R,KAAKgO,UAAUgE,oBAC7BF,EACAzI,EACAC,GAGJ,IAAKpM,EAAI,EAAGA,EAAI6U,EAAUtR,OAAQvD,IAC9B6H,EAAQ/E,KAAK+K,QAAQkH,SACjBH,EACAC,EAAU7U,GAAG,GACb6U,EAAU7U,GAAG,IAEjB8C,KAAK+N,OAAOmE,UACRnN,EACA+M,EACAC,EAAU7U,GAAG,GACb6U,EAAU7U,GAAG,SAIrB6H,EAAQ/E,KAAK+K,QAAQkH,SAASH,EAAOzI,EAAOC,GAC5CtJ,KAAK+N,OAAOmE,UAAUnN,EAAO+M,EAAOzI,EAAOC,GAE/CtJ,KAAKiE,UAAU,SAAUc,EAAO+M,gCAa/BK,GACIA,GAIDnS,KAAK+C,OAAOkJ,YAAckG,EAC1BnS,KAAK+C,OAAOiK,cAAe,IAJ3BhN,KAAK+C,OAAOkJ,YAAcjM,KAAK6K,cAAcoB,YAC7CjM,KAAK+C,OAAOiK,cAAe,GAM/BhN,KAAKgQ,aACLhQ,KAAK+N,OAAOkC,SAASjQ,KAAK+K,QAAQrH,qBAElC1D,KAAK+N,OAAO8C,SAAS7Q,KAAK6D,iBAAmB7D,KAAK4D,eAClD5D,KAAKiE,UAAU,OAAQkO,2CASX9J,GAAa,IAAA+J,EAAApS,KACzBA,KAAKqS,kBAAkBhK,EAAa,SAAAI,GAC3B2J,EAAKhE,aACNgE,EAAKE,kBAAkB7J,+CAYjB/D,GACd1E,KAAK+K,QAAQwH,KAAK7N,GAClB1E,KAAKgQ,aACLhQ,KAAKiE,UAAU,SACfjE,KAAKqO,SAAU,mCASVmE,GAAM,IAAAC,EAAAzS,KAEL0S,EAAS,IAAIC,WACnBD,EAAO3C,iBAAiB,WAAY,SAAAvP,GAAC,OAAIiS,EAAKG,WAAWpS,KACzDkS,EAAO3C,iBAAiB,OAAQ,SAAAvP,GAAC,OAC7BiS,EAAKI,gBAAgBrS,EAAEsS,OAAOC,UAElCL,EAAO3C,iBAAiB,QAAS,kBAC7B0C,EAAKxO,UAAU,QAAS,wBAE5ByO,EAAOM,kBAAkBR,GACzBxS,KAAKiT,qCA6BJC,EAAKnO,EAAOoO,EAASxP,GAGtB,GAFA3D,KAAKiT,QAEDE,EAAS,CAGT,IAAMC,EAAuB,CACzBC,+CAAkG,IAAnD,CAAC,OAAQ,WAAY,QAAQC,QAAQH,GACpFI,0BAA2BxO,EAC3ByO,sCAA+D,iBAAxBxT,KAAK+C,OAAOgI,QACnD0I,4BAA4C,iBAARP,GAElCQ,EAAgB9V,OAAOoE,KAAKoR,GAAsBhN,OACpD,SAAAuN,GAAM,OAAIP,EAAqBO,KAE/BD,EAAcjT,SAEdmT,QAAQC,KACJ,sEACAH,EAAcI,KAAK,WAGvBX,EAAU,MAIlB,OAAQnT,KAAK+C,OAAOgI,SAChB,IAAK,WACD,OAAO/K,KAAK+T,WAAWb,EAAKnO,EAAOpB,GACvC,IAAK,eACD,OAAO3D,KAAKgU,iBAAiBd,EAAKnO,EAAOoO,EAASxP,uCAanDuP,EAAKnO,EAAOpB,GAAU,IAAAsQ,EAAAjU,KACvBuS,EAAO,SAAA2B,GAIT,OAHIA,GACAD,EAAKpG,UAAUxN,KAAK4T,EAAKE,KAAK,QAASD,IAEpCD,EAAKG,eAAelB,EAAK,SAAAzK,GAAI,OAAIwL,EAAKpB,gBAAgBpK,MAGjE,IAAI1D,EAKA,OAAOwN,IAJPvS,KAAK+K,QAAQsJ,SAAStP,EAAOpB,GAC7B3D,KAAKgQ,aACLhQ,KAAK6N,UAAUxN,KAAKL,KAAKmU,KAAK,cAAe5B,6CAkBpC+B,EAAUvP,EAAOoO,EAASxP,GAAU,IAAA4Q,EAAAvU,KAC7CkT,EAAMoB,EAEV,GAAwB,iBAAbA,EACPtU,KAAK+K,QAAQwH,KAAKW,EAAKlT,KAAK8L,eAAgB/G,EAAOoO,OAChD,CACH,IAAMqB,EAAMF,EACZtU,KAAK+K,QAAQ0J,QAAQD,EAAKzP,GAI1BmO,EAAMsB,EAAIE,IAGd1U,KAAK6N,UAAUxN,KACXL,KAAK+K,QAAQoJ,KAAK,UAAW,WACzBI,EAAKvE,aACLuE,EAAKtQ,UAAU,SACfsQ,EAAKlG,SAAU,IAEnBrO,KAAK+K,QAAQoJ,KAAK,QAAS,SAAAQ,GAAG,OAAIJ,EAAKtQ,UAAU,QAAS0Q,MAM1D5P,GACA/E,KAAK+K,QAAQsJ,SAAStP,EAAOpB,GAI3BoB,IAAS/E,KAAK+C,OAAOyI,cACvBxL,KAAK+K,QAAQ5G,oBAEbnE,KAAKoU,eAAelB,EAAK,SAAA7K,GACrBkM,EAAKlC,kBAAkBhK,EAAa,SAAA3D,GAChC6P,EAAKxJ,QAAQrG,OAASA,EACtB6P,EAAKxJ,QAAQsJ,SAAS,MACtBE,EAAKvE,aACLuE,EAAKtQ,UAAU,gEAaboE,EAAa/H,GAAU,IAAAsU,EAAA5U,KACrCA,KAAKqI,YAAcA,EAEnBrI,KAAK+K,QAAQsH,kBACThK,EACA,SAAAI,GAGSmM,EAAKxG,aAAewG,EAAKvM,aAAeA,IACzC/H,EAASmI,GACTmM,EAAKvM,YAAc,OAG3B,kBAAMuM,EAAK3Q,UAAU,QAAS,uEAYvBiP,EAAK5S,GAAU,IAAAuU,EAAA7U,KACpB8U,EAAOrS,EAAKqS,KAAK,CACnB5B,IAAKA,EACL6B,aAAc,cACd5H,IAAKnN,KAAK+C,OAAOoK,MAmBrB,OAhBAnN,KAAK8N,YAAcgH,EAEnB9U,KAAK6N,UAAUxN,KACXyU,EAAKjU,GAAG,WAAY,SAAAL,GAChBqU,EAAKjC,WAAWpS,KAEpBsU,EAAKjU,GAAG,UAAW,SAAC4H,EAAMjI,GACtBF,EAASmI,GACToM,EAAK/G,YAAc,OAEvBgH,EAAKjU,GAAG,QAAS,SAAAL,GACbqU,EAAK5Q,UAAU,QAAS,cAAgBzD,EAAEsS,OAAOkC,YACjDH,EAAK/G,YAAc,QAIpBgH,qCAUAtU,GACP,IAAIyU,EAEAA,EADAzU,EAAE0U,iBACgB1U,EAAE2U,OAAS3U,EAAE4U,MAIb5U,EAAE2U,QAAU3U,EAAE2U,OAAS,KAE7CnV,KAAKiE,UAAU,UAAWvC,KAAKiQ,MAAwB,IAAlBsD,GAAwBzU,EAAEsS,0CAczDrS,EAAQ4U,EAAUC,EAAUjM,GAClC5I,EAASA,GAAU,KACnB4I,EAAQA,GAAS,EACjBgM,EAAWA,GAAY,IACvBC,EAAWA,IAAY,EACvB,IAAMvQ,EAAQ/E,KAAK+K,QAAQkH,SAASxR,EAAQ4I,GACtCkM,EAAM,GAAGC,IAAInY,KACf0H,EACA,SAAA0Q,GAAG,OAAI/T,KAAKiQ,MAAM8D,EAAMJ,GAAYA,IAElCK,EAAOC,KAAKC,UAAUL,GAO5B,OANKD,GACDxY,OAAO+Y,KACH,uCACAC,mBAAmBJ,IAGpBA,sCAqBCK,EAAQC,EAASC,GAWzB,OAVKF,IACDA,EAAS,aAERC,IACDA,EAAU,GAETC,IACDA,EAAO,WAGJjW,KAAK+N,OAAOmI,SAASH,EAAQC,EAASC,wCAOzCjW,KAAK8N,cACL9N,KAAK8N,YAAYX,IAAIgJ,QACrBnW,KAAK8N,YAAc,+CAQvB9N,KAAK6N,UAAUtM,QAAQ,SAAAf,GAAC,OAAIA,EAAED,uCAOzBP,KAAK+K,QAAQrB,aACd1J,KAAKkK,OACLlK,KAAK+K,QAAQnB,oBAEjB5J,KAAKqO,SAAU,EACfrO,KAAKoW,aACLpW,KAAKqW,iBACLrW,KAAK+N,OAAOkC,SAAS,GACrBjQ,KAAK+N,OAAOuI,SAAS,GACrBtW,KAAK+N,OAAOmE,UAAU,CAClBzR,OAAQT,KAAK+N,OAAO8D,YACrB,qCASH7R,KAAKuW,oBACLvW,KAAKiE,UAAU,WACfjE,KAAKoW,aACLpW,KAAKqW,iBACLrW,KAAK2J,SAC0B,IAA3B3J,KAAK+C,OAAO+J,aACZhQ,OAAO0Z,oBAAoB,SAAUxW,KAAKuO,WAAW,GACrDzR,OAAO0Z,oBACH,oBACAxW,KAAKuO,WACL,IAGRvO,KAAK+K,QAAQ6E,UACb5P,KAAK+N,OAAO6B,UACZ5P,KAAKoO,aAAc,EACnBpO,KAAKqO,SAAU,EACfrO,KAAKqI,YAAc,0BAj4CNuC,EAqEV6L,QAAUC,QArEA9L,EA0FVnI,KAAOA,+GCjPH,SAAckU,GACzB,IAAMtH,EAAW,IAAIvP,UACfqN,EAAM,IAAIyJ,eACZC,GAAW,EACf1J,EAAI0I,KAAKc,EAAQG,QAAU,MAAOH,EAAQzD,KAAK,GAC/C/F,EAAI4H,aAAe4B,EAAQ5B,cAAgB,OAEvC4B,EAAQxJ,MACJwJ,EAAQxJ,IAAI4J,gBAEZJ,EAAQxJ,IAAI4J,eAAexV,QAAQ,SAAAyV,GAC/B7J,EAAI8J,iBAAiBD,EAAOvY,IAAKuY,EAAO7Y,SAG5CwY,EAAQxJ,IAAI+J,kBAEZ/J,EAAI+J,iBAAkB,IAwB9B,OApBA/J,EAAI4C,iBAAiB,WAAY,SAAAvP,GAC7B6O,EAASpL,UAAU,WAAYzD,GAC3BA,EAAE0U,kBAAoB1U,EAAE2U,QAAU3U,EAAE4U,QACpCyB,GAAW,KAGnB1J,EAAI4C,iBAAiB,OAAQ,SAAAvP,GACpBqW,GACDxH,EAASpL,UAAU,WAAYzD,GAEnC6O,EAASpL,UAAU,OAAQzD,GACvB,KAAO2M,EAAIgK,QAAU,KAAOhK,EAAIgK,OAChC9H,EAASpL,UAAU,UAAWkJ,EAAIiK,SAAU5W,GAE5C6O,EAASpL,UAAU,QAASzD,KAGpC2M,EAAI4C,iBAAiB,QAAS,SAAAvP,GAAC,OAAI6O,EAASpL,UAAU,QAASzD,KAC/D2M,EAAIkK,OACJhI,EAASlC,IAAMA,EACRkC,GAlFX,MAAA9P,KAAAvC,EAAA,6ICOe,SAAasa,GACxB,IAAIC,GAAWC,IAMf,OALA5Z,OAAOoE,KAAKsV,GAAQ/V,QAAQ,SAAArE,GACpBoa,EAAOpa,GAAKqa,IACZA,EAAUD,EAAOpa,MAGlBqa,gHCPI,SAAaD,GACxB,IAAIG,EAAWC,OAAOF,KAMtB,OALA5Z,OAAOoE,KAAKsV,GAAQ/V,QAAQ,SAAArE,GACpBoa,EAAOpa,GAAKua,IACZA,EAAWH,EAAOpa,MAGnBua,gHCNI,SAAgB1P,GAAkB,QAAAjH,EAAAC,UAAAN,OAATkX,EAAS,IAAA1W,MAAAH,EAAA,EAAAA,EAAA,KAAAI,EAAA,EAAAA,EAAAJ,EAAAI,IAATyW,EAASzW,EAAA,GAAAH,UAAAG,GAM7C,OALAyW,EAAQpW,QAAQ,SAAA2D,GACZtH,OAAOoE,KAAKkD,GAAQ3D,QAAQ,SAAA9C,GACxBsJ,EAAKtJ,GAAOyG,EAAOzG,OAGpBsJ,gHCJI,SAAe6P,GAC1B,OAAO,mBAAA9W,EAAAC,UAAAN,OAAIO,EAAJ,IAAAC,MAAAH,GAAAI,EAAA,EAAAA,EAAAJ,EAAAI,IAAIF,EAAJE,GAAAH,UAAAG,GAAA,OAAa,EAAAxB,EAAAmY,SAAkB,kBAAMD,EAAIzW,WAAJ,EAAQH,OAXxD,MAAAtB,KAAA1C,EAAA,mECcA,SAAAwR,EAAAoJ,EAAAE,EAAAC,GACA,IAAAC,EAAAhX,EAAAiX,EAAAC,EAAAnF,EAGA,SAAAoF,IACA,IAAAtP,EAAAuP,KAAAC,MAAAH,EAEArP,EAAAiP,GAAAjP,GAAA,EACAmP,EAAA5W,WAAA+W,EAAAL,EAAAjP,IAEAmP,EAAA,KACAD,IACAhF,EAAA6E,EAAAzW,MAAA8W,EAAAjX,GACAiX,EAAAjX,EAAA,OAXA,MAAA8W,MAAA,KAgBA,IAAAQ,EAAA,WACAL,EAAAjY,KACAgB,EAAAD,UACAmX,EAAAE,KAAAC,MACA,IAAAE,EAAAR,IAAAC,EAOA,OANAA,MAAA5W,WAAA+W,EAAAL,IACAS,IACAxF,EAAA6E,EAAAzW,MAAA8W,EAAAjX,GACAiX,EAAAjX,EAAA,MAGA+R,GAoBA,OAjBAuF,EAAAE,MAAA,WACAR,IACAS,aAAAT,GACAA,EAAA,OAIAM,EAAAI,MAAA,WACAV,IACAjF,EAAA6E,EAAAzW,MAAA8W,EAAAjX,GACAiX,EAAAjX,EAAA,KAEAyX,aAAAT,GACAA,EAAA,OAIAM,EAIA9J,aAEA7R,EAAAD,QAAA8R,gCC/DA,SAASmK,EAAoBzY,GACzBA,EAAM0Y,kBACNrL,SAASsL,KAAKrC,oBAAoB,QAASmC,GAAqB,8DAQrD,SAAsBrB,GACjC/J,SAASsL,KAAK9I,iBAAiB,QAAS4I,GAAqB,wHCjBjE,IAAAnO,EAAArL,EAAAnC,EAAA,KACAyF,ySAAAC,CAAA1F,EAAA,IACA8b,EAAA3Z,EAAAnC,EAAA,m2BASqB6P,cAKjB,SAAAA,EAAY1B,EAAWpI,GAAQ,IAAA3C,EAAA,mGAAAL,CAAAC,KAAA6M,IAC3BzM,EAAA8C,EAAAlD,KAAAmD,EAAA0J,GAAAxP,KAAA2C,KAAMmL,EAAWpI,KAMZ8I,eAAiB9I,EAAO8I,eAM7BzL,EAAK2Y,sBAAwBrX,KAAKiQ,MAC9B5O,EAAO8I,eAAiB9I,EAAOqJ,YASnChM,EAAK4Y,kBAAoBjW,EAAOmK,WAAanK,EAAO2J,cAMpDtM,EAAK6Y,UAAY,GAAMlW,EAAOqJ,WAQ9BhM,EAAK8Y,SAAW,GAMhB9Y,EAAK+Y,aAAe,KAQpB/Y,EAAKgZ,WAAaC,UAQlBjZ,EAAKkZ,QAAU,EAAI5X,KAAK6X,KAAKxW,EAAOqJ,WAAa,GA3DtBhM,wPALM6N,gDAuEjCjO,KAAKwZ,gBACLxZ,KAAKyZ,0DASLzZ,KAAKmZ,aAAenZ,KAAKyO,QAAQiL,YAC7B1Z,KAAKkC,MAAMqL,SAASoM,cAAc,QAAS,CACvChJ,SAAU,WACViJ,OAAQ,EACRC,KAAM,EACNC,IAAK,EACLC,OAAQ,EACRC,SAAU,SACVlI,MAAO,IACPmI,QAAS,OACTC,UAAW,aACXC,iBAAkB,QAClBC,cAAe,UAIvBpa,KAAKqa,YACLra,KAAKwR,sDAOLxR,KAAKkC,MAAMlC,KAAKmZ,aAAc,CAC1BmB,iBAAkBta,KAAK+C,OAAOsI,YAAc,KAC5CkP,iBAAkBva,KAAK+C,OAAOqI,mDAclC,IAPS,IAAAxK,EAAAZ,KACHwa,EAAa9Y,KAAKiQ,MAAM3R,KAAK8R,MAAQ9R,KAAK+C,OAAOqJ,YACjDqO,EAAmB/Y,KAAK6X,KAC1BiB,GAAcxa,KAAK+Y,sBAAwB/Y,KAAKsZ,UAI7CtZ,KAAKkZ,SAASzY,OAASga,GAC1Bza,KAAKqa,YAIT,KAAOra,KAAKkZ,SAASzY,OAASga,GAC1Bza,KAAK0a,eAGT,IAAIC,EAAc3a,KAAK6L,eAAiB7L,KAAKsZ,QACvCsB,EAAa5a,KAAKkZ,SAASzY,OAAS,EAC1CT,KAAKkZ,SAAS3X,QAAQ,SAACsZ,EAAO3d,GACtBA,GAAK0d,IACLD,EAAc/Z,EAAKkR,MAAQlR,EAAKiL,eAAiB+O,GAErDha,EAAKka,iBAAiBD,EAAOF,EAAa/Z,EAAK6K,QAE/CoP,EAAME,kDAUV,IAAMF,EAAQ,IAAI7a,KAAKoZ,WACvByB,EAAM7B,kBAAoBhZ,KAAKgZ,kBAC/B6B,EAAM5B,UAAYjZ,KAAKiZ,UACvB,IAAM+B,EAAahb,KAAK+Y,sBAAwB/Y,KAAKkZ,SAASzY,OAG9Doa,EAAMI,SACFjb,KAAKyO,QAAQiL,YACT1Z,KAAKkC,MAAMqL,SAASoM,cAAc,UAAW,CACzChJ,SAAU,WACViJ,OAAQ,EACRC,KAAMmB,EAAa,KACnBlB,IAAK,EACLC,OAAQ,EACRtO,OAAQ,OACR2O,cAAe,WAMvBpa,KAAKgZ,mBACL6B,EAAMK,aACFlb,KAAKmZ,aAAaO,YACd1Z,KAAKkC,MAAMqL,SAASoM,cAAc,UAAW,CACzChJ,SAAU,WACVkJ,KAAMmB,EAAa,KACnBlB,IAAK,EACLC,OAAQ,EACRtO,OAAQ,WAMxBzL,KAAKkZ,SAAS7Y,KAAKwa,0CASnB,IAAIM,EAAYnb,KAAKkZ,SAASlZ,KAAKkZ,SAASzY,OAAS,GAGrD0a,EAAUC,KAAKC,cAAcC,YAAYH,EAAUC,MAG/Cpb,KAAKgZ,mBACLmC,EAAUlL,SAASoL,cAAcC,YAAYH,EAAUlL,UAIvDkL,IACAA,EAAUvL,UACVuL,EAAY,MAGhBnb,KAAKkZ,SAASqC,+CAWDV,EAAO/I,EAAOrG,GAC3B,IAAM+P,EAAe9Z,KAAKiQ,MAAMG,EAAQ9R,KAAK+C,OAAOqJ,YAC9CoO,EAAa9Y,KAAKiQ,MAAM3R,KAAK8R,MAAQ9R,KAAK+C,OAAOqJ,YAGvDyO,EAAMC,iBAAiBU,EAAchB,EAAY1I,EAAOrG,GAGxDzL,KAAKkC,MAAMlC,KAAKmZ,aAAc,CAAEc,QAAS,8CAOzCja,KAAKkZ,SAAS3X,QAAQ,SAAAsZ,GAAK,OAAIA,EAAME,+CAgBhChW,EAAO0W,EAAcpS,EAAOC,GAAK,IAAA8F,EAAApP,KACtC,OAAOA,KAAK0b,YACR3W,EACA0W,EACApS,EACAC,EACA,SAAAqS,GAA2D,IAAxDC,EAAwDD,EAAxDC,OAAQC,EAAgDF,EAAhDE,WAAoBC,GAA4BH,EAApClQ,OAAoCkQ,EAA5BG,SAASC,EAAmBJ,EAAnBI,MAAOhX,EAAY4W,EAAZ5W,MAG3C,QAActD,IAAV4H,EAqBJ,IAjBA,IAAM2S,EAAiBH,EAAa,EAAI,EAClCpb,EAASsE,EAAMtE,OAASub,EACxBC,EAAM7M,EAAKrM,OAAOmZ,SAAW9M,EAAKrM,OAAOqJ,WAQzC+P,EAAOF,GANc,OAAvB7M,EAAKrM,OAAOmI,OACNxJ,KAAK8H,IAAI4F,EAAKrM,OAAOqJ,cAAe6P,EAAM,IAC1Cva,KAAK8H,IACD4F,EAAKrM,OAAOqJ,WACZgD,EAAKrM,OAAOmI,OAASkE,EAAKrM,OAAOqJ,aAIzCgQ,EAAQ3b,EAAS2O,EAAK0C,MAEtBjJ,EAAOS,EACTpM,EAFUmM,EAINnM,EAAI2L,EAAM3L,GAAKif,EAAM,CACzB,IAAME,EACFtX,EAAMrD,KAAK4a,MAAMpf,EAAIkf,EAAQJ,KAAoB,EAC/CO,EAAI7a,KAAKiQ,MAAO0K,EAAOT,EAAUG,GACvC3M,EAAKoN,SACDtf,EAAIkS,EAAK6J,UACT8C,EAAQQ,EAAIT,EACZG,EAAM7M,EAAK6J,UACP,EAAJsD,uCAoBXxX,EAAO0W,EAAcpS,EAAOC,GAAK,IAAAuG,EAAA7P,KACtC,OAAOA,KAAK0b,YACR3W,EACA0W,EACApS,EACAC,EACA,SAAAmT,GAA2D,IAAxDb,EAAwDa,EAAxDb,OAAQC,EAAgDY,EAAhDZ,WAAoBC,GAA4BW,EAApChR,OAAoCgR,EAA5BX,SAASC,EAAmBU,EAAnBV,MAAOhX,EAAY0X,EAAZ1X,MAC3C,IAAK8W,EAAY,CAIb,IAHA,IAAMa,EAAiB,GACjBC,EAAM5X,EAAMtE,OACdvD,EAAI,EACAA,EAAIyf,EAAKzf,IACbwf,EAAe,EAAIxf,GAAK6H,EAAM7H,GAC9Bwf,EAAe,EAAIxf,EAAI,IAAM6H,EAAM7H,GAEvC6H,EAAQ2X,OAKEjb,IAAV4H,GACAwG,EAAK+M,SAAS7X,EAAO6W,EAAQG,EAAOD,EAASzS,EAAOC,GAIxDuG,EAAK2M,SACD,EACAT,EAAQD,EAAUjM,EAAKoJ,UACvBpJ,EAAKiC,MACLjC,EAAKoJ,8CAmBZlU,EAAO6W,EAAQG,EAAOD,EAASzS,EAAOC,GAAK,IAAAwG,EAAA9P,KAChDA,KAAKkZ,SAAS3X,QAAQ,SAAAsZ,GAClB/K,EAAK+M,cAAchC,GACnBA,EAAMiC,UAAU/X,EAAO6W,EAAQG,EAAOD,EAASzS,EAAOC,sCAYrDyT,EAAGC,EAAGlL,EAAOrG,GAOlB,IANA,IAAMwR,EAAcvb,KAAK4a,MAAMS,EAAI/c,KAAK6L,gBAClCqR,EAAYxb,KAAK6H,IACnB7H,KAAK6X,MAAMwD,EAAIjL,GAAS9R,KAAK6L,gBAAkB,EAC/C7L,KAAKkZ,SAASzY,QAEdvD,EAAI+f,EACA/f,EAAIggB,EAAWhgB,IAAK,CACxB,IAAM2d,EAAQ7a,KAAKkZ,SAAShc,GACtB8d,EAAa9d,EAAI8C,KAAK6L,eAEtBsR,EAAe,CACjBC,GAAI1b,KAAK8H,IAAIuT,EAAG7f,EAAI8C,KAAK6L,gBACzBwR,GAAIL,EACJM,GAAI5b,KAAK6H,IACLwT,EAAIjL,EACJ5U,EAAI8C,KAAK6L,eAAiBgP,EAAMO,KAAKtJ,OAEzCyL,GAAIP,EAAIvR,GAGR0R,EAAaC,GAAKD,EAAaG,KAC/Btd,KAAK6c,cAAchC,GAEnBA,EAAM2C,UACFL,EAAaC,GAAKpC,EAClBmC,EAAaE,GACbF,EAAaG,GAAKH,EAAaC,GAC/BD,EAAaI,GAAKJ,EAAaE,0CAsBnCtY,EAAO0W,EAAcpS,EAAOC,EAAKnJ,GAAI,IAAAgQ,EAAAnQ,KAC7C,OAAOyC,EAAKgb,MAAM,WAEd,GAAI1Y,EAAM,aAAc9D,MAAO,CAC3B,IAAMyH,EAAW3D,EACjB,GAAIoL,EAAKpN,OAAO+F,cAMZ,OALAqH,EAAKsB,UACD/I,EAASjI,OACL0P,EAAKpN,OAAO0I,OACZ0E,EAAKpN,OAAOqJ,YAEb1D,EAASnH,QAAQ,SAACmc,EAAcxgB,GAAf,OACpBiT,EAAKuL,YAAYgC,EAAcxgB,EAAGmM,EAAOC,EAAKnJ,KAGtD4E,EAAQ2D,EAAS,GAKrB,IAAIkT,EAAS,EAAIzL,EAAKpN,OAAOkI,UAC7B,GAAIkF,EAAKpN,OAAOmJ,UAAW,CACvB,IAAM1C,EAAM/G,EAAK+G,IAAIzE,GACfwE,EAAM9G,EAAK8G,IAAIxE,GACrB6W,GAAUrS,EAAMC,GAAOD,EAAMC,EAKjC,IAAMqS,EAAa,GAAG8B,KAAKtgB,KAAK0H,EAAO,SAAA0Q,GAAG,OAAIA,EAAM,IAC9ChK,EAAS0E,EAAKpN,OAAO0I,OAAS0E,EAAKpN,OAAOqJ,WAIhD,OAAOjM,EAAG,CACNyb,OAAQA,EACRC,WAAYA,EACZpQ,OAAQA,EACRqQ,QAPYrQ,EAASgQ,GAAgB,EAQrCM,MAPUtQ,EAAS,EAQnB1G,MAAOA,KAvCRtC,yCAkDGoY,GACVA,EAAMgC,cAAc7c,KAAK+C,OAAOmK,UAAWlN,KAAK+C,OAAO2J,gDAiBlDqJ,EAAQC,EAASC,GACtB,GAAa,SAATA,EACA,OAAOtO,QAAQiW,IACX5d,KAAKkZ,SAAS1D,IAAI,SAAAqF,GACd,OAAOA,EAAM3E,SAASH,EAAQC,EAASC,MAG5C,GAAa,YAATA,EAAoB,CAC3B,IAAI4H,EAAS7d,KAAKkZ,SAAS1D,IAAI,SAAAqF,GAAK,OAChCA,EAAM3E,SAASH,EAAQC,EAASC,KAEpC,OAAO4H,EAAOpd,OAAS,EAAIod,EAASA,EAAO,2CASpClN,GACX3Q,KAAKkC,MAAMlC,KAAKmZ,aAAc,CAAErH,MAAOnB,EAAW,4KC1gB1D,IAAAlO,ySAAAC,CAAA1F,EAAA,+yBAOqBiR,cAKjB,SAAAA,EAAY9C,EAAWpI,GAAQ,IAAA3C,EAAA,mGAAAL,CAAAC,KAAAiO,IAC3B7N,EAAA8C,EAAAlD,KAAAmD,EAAA8K,GAAA5Q,KAAA2C,QAEKmL,UAAYA,EAKjB/K,EAAK2C,OAASA,EAKd3C,EAAK0R,MAAQ,EAKb1R,EAAKqL,OAAS1I,EAAO0I,OAASrL,EAAK2C,OAAOqJ,WAE1ChM,EAAK0d,QAAU,EAKf1d,EAAKqO,QAAU,KAzBYrO,wPALCqC,EAAK3C,8CAwC/BgC,EAAIC,GACN,OAAOU,EAAKP,MAAMJ,EAAIC,2CAQtB/B,KAAKyO,QAAUzO,KAAKmL,UAAUuO,YAC1BnM,SAASoM,cAAc,SAG3B3Z,KAAKkC,MAAMlC,KAAKyO,QAAS,CACrBwL,QAAS,QACTtJ,SAAU,WACVoN,WAAY,OACZC,iBAAkB,OAClBvS,OAAQzL,KAAK+C,OAAO0I,OAAS,QAG7BzL,KAAK+C,OAAOwI,YAAcvL,KAAK+C,OAAOiK,eACtChN,KAAKkC,MAAMlC,KAAKyO,QAAS,CACrBqD,MAAO,OACPmM,UAAWje,KAAK+C,OAAO2I,cAAgB,SAAW,OAClDwS,UAAW,WAInBle,KAAKme,yDAUG3d,EAAG4d,IACVA,GAAa5d,EAAE6d,iBAEhB,IAQIpO,EAREqO,EAAU9d,EAAE+d,cACZ/d,EAAE+d,cAAc,GAAGD,QACnB9d,EAAE8d,QACFE,EAAOxe,KAAKyO,QAAQgQ,wBAEpB/M,EAAe1R,KAAK8R,MACpBF,EAAc5R,KAAK6R,WAoBzB,OAjBK7R,KAAK+C,OAAOwI,YAAcmG,EAAeE,GAC1C3B,GACKjQ,KAAK+C,OAAOgK,IAAMyR,EAAKE,MAAQJ,EAAUA,EAAUE,EAAK3E,OACpD7Z,KAAK+C,OAAOqJ,WAAasF,IAAiB,GAEpC,IACXzB,EAAW,GAGfA,IACMjQ,KAAK+C,OAAOgK,IACRyR,EAAKE,MAAQJ,EACbA,EAAUE,EAAK3E,MACjB7Z,KAAKyO,QAAQkQ,YACb3e,KAAKyO,QAAQmQ,aAAe,EAGjC3O,+CAMU,IAAArP,EAAAZ,KACjBA,KAAKyO,QAAQsB,iBAAiB,QAAS,SAAAvP,GACnC,IAAMqe,EACFje,EAAK6N,QAAQqQ,aAAele,EAAK6N,QAAQsQ,aAC7C,GAAuB,GAAnBF,EAAsB,CAEtB,IAAML,EAAO5d,EAAK6N,QAAQgQ,wBAC1B,GAAIje,EAAEwe,SAAWR,EAAKzE,OAAS8E,EAE3B,OAIJje,EAAKmC,OAAO4I,UACZ/K,EAAKqD,UAAU,QAASzD,EAAGI,EAAKqe,YAAYze,MAIpDR,KAAKyO,QAAQsB,iBAAiB,SAAU,SAAAvP,GAAC,OACrCI,EAAKqD,UAAU,SAAUzD,uCAevBuE,EAAOtE,EAAQ4I,EAAOC,GACvBtJ,KAAKsW,SAAS7V,IACfT,KAAK+a,YAGT/a,KAAK+C,OAAOmZ,SACNlc,KAAKkf,SAASna,EAAO,EAAGsE,EAAOC,GAC/BtJ,KAAKmf,SAASpa,EAAO,EAAGsE,EAAOC,yCAOhB,OAAjBtJ,KAAKyO,UACLzO,KAAKyO,QAAQkQ,WAAa,oCASzBS,GACL,IAAMzO,EAAW3Q,KAAKyO,QAAQmQ,YAAcQ,EAC5Cpf,KAAKqf,mBAAmB1O,GAAU,8CAUnBA,EAAUoH,GACzB,IAAM4G,EAAa3e,KAAKyO,QAAQkQ,WAC1BW,KAAUtf,KAAKyO,QAAQC,YAAc,GACrC6Q,EAAYvf,KAAKyO,QAAQmQ,YAAc5e,KAAKyO,QAAQC,YACtDoE,EAASnC,EAAW2O,EACpB5O,EAASoC,EAAS6L,EAEtB,GAAiB,GAAbY,EAAJ,CAMA,IAAKxH,IAAcuH,GAAQ5O,GAAUA,EAAS4O,EAAM,CAIhDxM,EAAS6L,GADTjO,EAAShP,KAAK8H,KADD,EACY9H,KAAK6H,IADjB,EAC2BmH,MAK5CoC,EAASpR,KAAK8H,IAAI,EAAG9H,KAAK6H,IAAIgW,EAAWzM,MAE3B6L,IACV3e,KAAKyO,QAAQkQ,WAAa7L,yCAU9B,IAAIiK,EAAI,EACR,GAAI/c,KAAKyO,QAAS,CACd,IAAMrC,EAAapM,KAAK+C,OAAOqJ,WAQ/B,GAPA2Q,EAAIrb,KAAKiQ,MAAM3R,KAAKyO,QAAQkQ,WAAavS,GAOrCpM,KAAK+C,OAAOiK,aAAc,CAC1B,IAAMuS,KACFvf,KAAKyO,QAAQmQ,YAAcxS,EAC3BpM,KAAK6R,YAETkL,EAAIrb,KAAK6H,IAAIgW,EAAW7d,KAAK8H,IAAI,EAAGuT,KAG5C,OAAOA,qCASP,OAAOrb,KAAKiQ,MAAM3R,KAAKmL,UAAUuD,YAAc1O,KAAK+C,OAAOqJ,6CAStD0F,GACL,OAAI9R,KAAK8R,OAASA,IAIlB9R,KAAK8R,MAAQA,EAET9R,KAAK+C,OAAOwI,YAAcvL,KAAK+C,OAAOiK,aACtChN,KAAKkC,MAAMlC,KAAKyO,QAAS,CACrBqD,MAAO,KAGX9R,KAAKkC,MAAMlC,KAAKyO,QAAS,CACrBqD,SAAU9R,KAAK8R,MAAQ9R,KAAK+C,OAAOqJ,YAAc,OAIzDpM,KAAKwf,cACE,qCASD/T,GACN,OAAIA,GAAUzL,KAAKyL,SAGnBzL,KAAKyL,OAASA,EAEdzL,KAAKkC,MAAMlC,KAAKyO,QAAS,CACrBhD,UAAWzL,KAAKyL,OAASzL,KAAK+C,OAAOqJ,YAAc,OAGvDpM,KAAKwf,cACE,oCAQFvP,GACL,IAAMwP,EAAa,EAAIzf,KAAK+C,OAAOqJ,WAC7BsT,EAAMhe,KAAKiQ,MAAM1B,EAAWjQ,KAAK8R,OAAS2N,EAEhD,GAAIC,EAAM1f,KAAK8d,SAAW4B,EAAM1f,KAAK8d,SAAW2B,EAAY,CAGxD,GAFAzf,KAAK8d,QAAU4B,EAEX1f,KAAK+C,OAAOiK,cAAgBhN,KAAK+C,OAAO+H,WAAY,CACpD,IAAM6U,KAAY3f,KAAKyO,QAAQmQ,YAAc3O,GAC7CjQ,KAAKqf,mBAAmBM,GAG5B3f,KAAK4f,eAAeF,sCAQxB1f,KAAK2J,QACD3J,KAAKyO,UACDzO,KAAKyO,QAAQoR,YAAc7f,KAAKmL,WAChCnL,KAAKmL,UAAUmQ,YAAYtb,KAAKyO,SAEpCzO,KAAKyO,QAAU,qHAiCd1J,EAAO0W,EAAcpS,EAAOC,qCAe5BvE,EAAO0W,EAAcpS,EAAOC,gFAetBqH,yKCvYnB,IAAAlR,EAAAN,EAAAnC,EAAA,IACAoC,EAAAD,EAAAnC,EAAA,iOASqBqc,aACjB,SAAAA,iGAActZ,CAAAC,KAAAqZ,GAMVrZ,KAAKob,KAAO,KAMZpb,KAAK8f,QAAU,KAMf9f,KAAKiQ,SAAW,KAMhBjQ,KAAK+f,YAAc,KAOnB/f,KAAKqJ,MAAQ,EAObrJ,KAAKsJ,IAAM,EAMXtJ,KAAKggB,IAAK,EAAA5gB,EAAAyY,SAAM7X,KAAKigB,YAAYxiB,KAAKyiB,cAAgB,6DAQjD1d,GACLxC,KAAKob,KAAO5Y,EACZxC,KAAK8f,QAAU9f,KAAKob,KAAK+E,WAAW,2CAS3B3d,GACTxC,KAAKiQ,SAAWzN,EAChBxC,KAAK+f,YAAc/f,KAAKiQ,SAASkQ,WAAW,+CAW/B3E,EAAchB,EAAY1I,EAAOrG,GAG9CzL,KAAKqJ,MAAQrJ,KAAKob,KAAKgF,WAAa5F,GAAc,EAClDxa,KAAKsJ,IAAMtJ,KAAKqJ,MAAQmS,EAAehB,EAGvCxa,KAAKob,KAAKtJ,MAAQA,EAClB9R,KAAKob,KAAK3P,OAASA,EACnB,IAAI4U,EAAc,CAAEvO,MAAO0J,EAAe,OAC1C,EAAA/b,EAAAoY,SAAM7X,KAAKob,KAAMiF,GAEbrgB,KAAKgZ,oBAELhZ,KAAKiQ,SAAS6B,MAAQA,EACtB9R,KAAKiQ,SAASxE,OAASA,GACvB,EAAAhM,EAAAoY,SAAM7X,KAAKiQ,SAAUoQ,wCASzBrgB,KAAK8f,QAAQQ,UACT,EACA,EACAtgB,KAAK8f,QAAQS,OAAOzO,MACpB9R,KAAK8f,QAAQS,OAAO9U,QAIpBzL,KAAKgZ,mBACLhZ,KAAK+f,YAAYO,UACb,EACA,EACAtgB,KAAK+f,YAAYQ,OAAOzO,MACxB9R,KAAK+f,YAAYQ,OAAO9U,8CAWtByB,EAAWR,GACrB1M,KAAK8f,QAAQU,UAAYtT,EAErBlN,KAAKgZ,oBACLhZ,KAAK+f,YAAYS,UAAY9T,qCAY3BqQ,EAAGC,EAAGlL,EAAOrG,GACnBzL,KAAKygB,kBAAkBzgB,KAAK8f,QAAS/C,EAAGC,EAAGlL,EAAOrG,GAE9CzL,KAAKgZ,mBACLhZ,KAAKygB,kBAAkBzgB,KAAK+f,YAAahD,EAAGC,EAAGlL,EAAOrG,6CAc5CiV,EAAK3D,EAAGC,EAAGlL,EAAOrG,GAC3BiV,GAGLA,EAAIlE,SAASO,EAAGC,EAAGlL,EAAOrG,qCAepB1G,EAAO6W,EAAQG,EAAOD,EAASzS,EAAOC,GAC5CtJ,KAAK2gB,kBACD3gB,KAAK8f,QACL/a,EACA6W,EACAG,EACAD,EACAzS,EACAC,GAGAtJ,KAAKgZ,mBACLhZ,KAAK2gB,kBACD3gB,KAAK+f,YACLhb,EACA6W,EACAG,EACAD,EACAzS,EACAC,6CAmBMoX,EAAK3b,EAAO6W,EAAQG,EAAOD,EAASzS,EAAOC,GACzD,GAAKoX,EAAL,CAIA,IAuBIxjB,EAAGmf,EAAME,EAvBP9b,EAASsE,EAAMtE,OAAS,EACxBmI,EAAQlH,KAAKiQ,MAAMlR,EAAST,KAAKqJ,OAMjCuX,EAAchY,EACdiY,EAHOnf,KAAKiQ,MAAMlR,EAAST,KAAKsJ,KAAO,EAIvC8S,EAAQpc,KAAKob,KAAKtJ,OAAS+O,EAAYD,EAAc,GAGrDE,EAAa/E,EAAQD,EACrBiF,EAAanF,EAASG,EAW5B,IATA2E,EAAIM,YACJN,EAAIO,QAAQL,EAAchY,GAASwT,EAAO0E,GAE1CJ,EAAIQ,QACCN,EAAchY,GAASwT,EACxB0E,EAAapf,KAAKiQ,OAAO5M,EAAM,EAAI6b,IAAgB,GAAKG,IAIvD7jB,EAAI0jB,EAAa1jB,EAAI2jB,EAAW3jB,IACjCmf,EAAOtX,EAAM,EAAI7H,IAAM,EACvBqf,EAAI7a,KAAKiQ,MAAM0K,EAAO0E,GACtBL,EAAIQ,QAAQhkB,EAAI0L,GAASwT,EAAQpc,KAAKiZ,UAAW6H,EAAavE,GAMlE,IADA,IAAI9S,EAAIoX,EAAY,EACZpX,GAAKmX,EAAanX,IACtB4S,EAAOtX,EAAM,EAAI0E,EAAI,IAAM,EAC3B8S,EAAI7a,KAAKiQ,MAAM0K,EAAO0E,GACtBL,EAAIQ,QAAQzX,EAAIb,GAASwT,EAAQpc,KAAKiZ,UAAW6H,EAAavE,GAGlEmE,EAAIQ,QACCN,EAAchY,GAASwT,EACxB0E,EACIpf,KAAKiQ,OAAO5M,EAAM,EAAI6b,EAAc,IAAM,GAAKG,IAGvDL,EAAIS,YACJT,EAAIU,0CAOJphB,KAAK8f,QAAU,KACf9f,KAAKob,KAAO,KAEZpb,KAAK+f,YAAc,KACnB/f,KAAKiQ,SAAW,sCAgBX8F,EAAQC,EAASC,GAAM,IAAA7V,EAAAJ,KAC5B,MAAa,SAATiW,EACO,IAAItO,QAAQ,SAAA0Z,GACfjhB,EAAKgb,KAAKkG,OAAOD,EAAStL,EAAQC,KAEtB,YAATC,EACAjW,KAAKob,KAAKmG,UAAUxL,EAAQC,QADhC,uKC1Tf,MAAAvL,KAAAzN,EAAA,gCACAyF,ySAAAC,CAAA1F,EAAA,slCAKqBqQ,cAMjB,SAAAA,EAAYtK,GAAQ,IAAA3C,EAAA,mGAAAL,CAAAC,KAAAqN,IAChBjN,EAAA8C,EAAAlD,KAAAmD,EAAAkK,GAAAhQ,KAAA2C,KAAM+C,KAEDA,OAASA,EAId3C,EAAKohB,MAAQ,CACTld,YAAa,EACbX,SAAU,EACVqN,QAAQ,EACRhM,aAAc,EACduF,KALS,aAMTpD,MANS,aAOTsa,OAAQ,GAIZrhB,EAAK4L,UAAYjJ,EAAOiJ,UAAUkU,cAElC9f,EAAKshB,gBAAkB3e,EAAO2e,gBAE9BthB,EAAK2E,MAAQ,KAEb3E,EAAK4E,aAAe,EAEpB5E,EAAKqhB,OAAS,EAEdrhB,EAAKwN,SAAU,EAEfxN,EAAKsE,OAAS,KAEdtE,EAAKuhB,UAAY,KAhCDvhB,wPANkB0C,gDA6ClC9C,KAAKiG,gBAAgBjG,KAAK+C,OAAOmD,WACjClG,KAAK4hB,oDAQK,IAAAhhB,EAAAZ,KAWVA,KAAKa,GAAG,OAVe,SAAjBghB,IACEjhB,EAAK8I,aAGT9I,EAAKqD,UAAU,eAAgBrD,EAAKiD,kBAGpCpB,EAAKgb,MAAMoE,EAAXpf,MAOJzC,KAAKa,GAAG,QAAS,WACbD,EAAKqD,UAAU,eAAgBrD,EAAKiD,iDAavCqP,EAAK/H,EAAWpG,EAAOoO,GACxB,IAAMqO,EAAQjU,SAASoM,cAAc3Z,KAAKgM,WAC1CwV,EAAMM,SAAW9hB,KAAK+C,OAAOgJ,cAC7ByV,EAAM1Z,SAAW9H,KAAK+C,OAAO+E,WAAY,EACzC0Z,EAAMrO,QAAqB,MAAXA,EAAkB,OAASA,EAC3CqO,EAAM9M,IAAMxB,EACZsO,EAAMtf,MAAM4P,MAAQ,OAEpB,IAAMiQ,EAAY5W,EAAUqC,cAAcxN,KAAKgM,WAC3C+V,GACA5W,EAAUmQ,YAAYyG,GAE1B5W,EAAUuO,YAAY8H,GAEtBxhB,KAAKgiB,MAAMR,EAAOzc,mCASdyP,EAAKzP,GACTyP,EAAIsN,SAAW9hB,KAAK+C,OAAOgJ,cAC3ByI,EAAI1M,SAAW9H,KAAK+C,OAAO+E,WAAY,EAEvC9H,KAAKgiB,MAAMxN,EAAKzP,iCAWdyc,EAAOzc,GAAO,IAAAqK,EAAApP,KAGS,mBAAdwhB,EAAMjP,MAIbiP,EAAMjP,OAGViP,EAAMzR,iBAAiB,QAAS,WAC5BX,EAAKnL,UAAU,QAAS,iCAG5Bud,EAAMzR,iBAAiB,UAAW,WAC9BX,EAAKnL,UAAU,aAGnBud,EAAMzR,iBAAiB,QAAS,WAC5BX,EAAKnL,UAAU,YAKnBud,EAAMzR,iBAAiB,OAAQ,WAC3BX,EAAKnL,UAAU,UAGnBud,EAAMzR,iBAAiB,QAAS,WAC5BX,EAAKnL,UAAU,WAGnBud,EAAMzR,iBAAiB,SAAU,SAAA7P,GAC7BkP,EAAKnL,UAAU,UAGnBud,EAAMzR,iBAAiB,eAAgB,SAAA7P,GACnCkP,EAAKxB,QAAU4T,EAAMS,MACjB7S,EAAKxB,QACLwB,EAAKqS,OAAS,EAEdrS,EAAKqS,OAASD,EAAMC,OAExBrS,EAAKnL,UAAU,YAGnBjE,KAAKwhB,MAAQA,EACbxhB,KAAK+E,MAAQA,EACb/E,KAAK2hB,UAAY,KACjB3hB,KAAK0E,OAAS,KACd1E,KAAK4N,QAAU4T,EAAMS,MACrBjiB,KAAKiG,gBAAgBjG,KAAKgF,cAC1BhF,KAAKiR,UAAUjR,KAAKyhB,2CASpB,OAAQzhB,KAAKwhB,OAASxhB,KAAKwhB,MAAMxQ,6CASjC,GAAIhR,KAAKqF,iBACL,OAAOrF,KAAKqF,iBAEhB,IAAI1B,GAAY3D,KAAK0E,QAAU1E,KAAKwhB,OAAO7d,SAK3C,OAJIA,GAAY6T,MAEZ7T,EAAW3D,KAAKwhB,MAAMU,SAAS5Y,IAAI,IAEhC3F,2CAUP,OAAO3D,KAAKwhB,OAASxhB,KAAKwhB,MAAMld,wDAShC,OAAOtE,KAAK6D,iBAAmB7D,KAAK4D,eAAiB,4CASrD,OAAO5D,KAAKgF,cAAgBhF,KAAKwhB,MAAMxc,qDAQ3B7G,GACZ6B,KAAKgF,aAAe7G,GAAS,EAC7B6B,KAAKwhB,MAAMxc,aAAehF,KAAKgF,4CAQ5BqE,GACU,MAATA,IACArJ,KAAKwhB,MAAMld,YAAc+E,GAE7BrJ,KAAKmiB,4CAYJ9Y,EAAOC,GACRtJ,KAAKqK,OAAOhB,GACZ,IAAM+Y,EAAUpiB,KAAKwhB,MAAMjX,OAG3B,OAFAjB,GAAOtJ,KAAKqiB,WAAW/Y,GAEhB8Y,kCAUP,IAAIA,EAOJ,OALIpiB,KAAKwhB,QACLY,EAAUpiB,KAAKwhB,MAAMra,SAEzBnH,KAAKmiB,eAEEC,qCASA9Y,GAAK,IAAAuG,EAAA7P,KACZA,KAAKsiB,WAAa,SAAApb,GACVA,GAAQoC,IACRuG,EAAK1I,QACL0I,EAAKxF,OAAOf,KAGpBtJ,KAAKa,GAAG,eAAgBb,KAAKsiB,mDAKzBtiB,KAAKsiB,aACLtiB,KAAKO,GAAG,eAAgBP,KAAKsiB,YAC7BtiB,KAAKsiB,WAAa,uCAcjB7hB,EAAQmI,EAAOC,GACpB,OAAI7I,KAAK0E,OACL6d,EAAApf,EAAAkK,EAAAvO,WAAA,WAAAkB,MAAA3C,KAAA2C,KAAsBS,EAAQmI,EAAOC,GAElC7I,KAAK+E,OAAS,qCAUfwC,GACN,OAAIA,EACKvH,KAAKwhB,MAAM9Z,UAKT1H,KAAKwhB,MAAM9Z,UAAUH,GAJjBI,QAAQC,OACX,IAAIC,MAAM,+CAMfF,QAAQC,OAAO,IAAIC,MAAM,qBAAuBN,wCASvD,OAAOvH,KAAKyhB,yCAQNtjB,GACN6B,KAAKyhB,OAAStjB,EAEV6B,KAAKwhB,MAAMC,SAAWzhB,KAAKyhB,SAC3BzhB,KAAKwhB,MAAMC,OAASzhB,KAAKyhB,0CAS7BzhB,KAAKmH,QACLnH,KAAK2J,QAGD3J,KAAK+C,OAAO4J,6BACZ3M,KAAKwhB,OACLxhB,KAAKwhB,MAAM3B,YAEX7f,KAAKwhB,MAAM3B,WAAWvE,YAAYtb,KAAKwhB,OAG3CxhB,KAAKwhB,MAAQ,oVClYAlR,aAIjB,SAAAA,iGAAcvQ,CAAAC,KAAAsQ,GACVtQ,KAAKwiB,iFAaLxiB,KAAKyiB,gBAAkB,GAMvBziB,KAAK0iB,iBAAmB,8CAWRjiB,EAAQ4I,EAAOC,GAC3B7I,GAAUT,KAAK0iB,kBACf1iB,KAAKwiB,iBACLxiB,KAAK0iB,gBAAkBjiB,GAO3B,IAHA,IAAIkiB,EAAiB,GACjBzlB,EAAI,EAGJA,EAAI8C,KAAKyiB,gBAAgBhiB,QACzBT,KAAKyiB,gBAAgBvlB,GAAKmM,GAE1BnM,IASJ,IAHIA,EAAI,GAAK,GACTylB,EAAetiB,KAAKgJ,GAGpBnM,EAAI8C,KAAKyiB,gBAAgBhiB,QACzBT,KAAKyiB,gBAAgBvlB,IAAMoM,GAE3BqZ,EAAetiB,KAAKL,KAAKyiB,gBAAgBvlB,IACzCA,IAGAA,EAAI,GAAK,GACTylB,EAAetiB,KAAKiJ,GAIxBqZ,EAAiBA,EAAevc,OAAO,SAACwc,EAAMlD,EAAKnK,GAC/C,OAAW,GAAPmK,EACOkD,GAAQrN,EAAImK,EAAM,GAClBA,GAAOnK,EAAI9U,OAAS,EACpBmiB,GAAQrN,EAAImK,EAAM,GAEtBkD,GAAQrN,EAAImK,EAAM,IAAMkD,GAAQrN,EAAImK,EAAM,KAMrD1f,KAAKyiB,gBAAkBziB,KAAKyiB,gBAAgBnT,OAAOqT,GACnD3iB,KAAKyiB,gBAAkBziB,KAAKyiB,gBACvBI,KAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,IACnB3c,OAAO,SAACwc,EAAMlD,EAAKnK,GAChB,OAAW,GAAPmK,EACOkD,GAAQrN,EAAImK,EAAM,GAClBA,GAAOnK,EAAI9U,OAAS,EACpBmiB,GAAQrN,EAAImK,EAAM,GAEtBkD,GAAQrN,EAAImK,EAAM,IAAMkD,GAAQrN,EAAImK,EAAM,KAKzD,IAAMsD,EAAqB,GAC3B,IAAK9lB,EAAI,EAAGA,EAAIylB,EAAeliB,OAAQvD,GAAK,EACxC8lB,EAAmB3iB,KAAK,CAACsiB,EAAezlB,GAAIylB,EAAezlB,EAAI,KAGnE,OAAO8lB,2CASP,IACI9lB,EADE+lB,EAAsB,GAE5B,IAAK/lB,EAAI,EAAGA,EAAI8C,KAAKyiB,gBAAgBhiB,OAAQvD,GAAK,EAC9C+lB,EAAoB5iB,KAAK,CACrBL,KAAKyiB,gBAAgBvlB,GACrB8C,KAAKyiB,gBAAgBvlB,EAAI,KAGjC,OAAO+lB","file":"wavesurfer.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"WaveSurfer\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"WaveSurfer\"] = factory();\n\telse\n\t\troot[\"WaveSurfer\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 6);\n","export { default as ajax } from './ajax';\r\nexport { default as getId } from './get-id';\r\nexport { default as max } from './max';\r\nexport { default as min } from './min';\r\nexport { default as Observer } from './observer';\r\nexport { default as extend } from './extend';\r\nexport { default as style } from './style';\r\nexport { default as requestAnimationFrame } from './request-animation-frame';\r\nexport { default as frame } from './frame';\r\nexport { default as debounce } from 'debounce';\r\nexport { default as preventClick } from './prevent-click';\r\n","/**\r\n * @typedef {Object} ListenerDescriptor\r\n * @property {string} name The name of the event\r\n * @property {function} callback The callback\r\n * @property {function} un The function to call to remove the listener\r\n */\r\n\r\n/**\r\n * Observer class\r\n */\r\nexport default class Observer {\r\n    /**\r\n     * Instantiate Observer\r\n     */\r\n    constructor() {\r\n        /**\r\n         * @private\r\n         * @todo Initialise the handlers here already and remove the conditional\r\n         * assignment in `on()`\r\n         */\r\n        this.handlers = null;\r\n    }\r\n    /**\r\n     * Attach a handler function for an event.\r\n     *\r\n     * @param {string} event Name of the event to listen to\r\n     * @param {function} fn The callback to trigger when the event is fired\r\n     * @return {ListenerDescriptor} The event descriptor\r\n     */\r\n    on(event, fn) {\r\n        if (!this.handlers) {\r\n            this.handlers = {};\r\n        }\r\n\r\n        let handlers = this.handlers[event];\r\n        if (!handlers) {\r\n            handlers = this.handlers[event] = [];\r\n        }\r\n        handlers.push(fn);\r\n\r\n        // Return an event descriptor\r\n        return {\r\n            name: event,\r\n            callback: fn,\r\n            un: (e, fn) => this.un(e, fn)\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Remove an event handler.\r\n     *\r\n     * @param {string} event Name of the event the listener that should be\r\n     * removed listens to\r\n     * @param {function} fn The callback that should be removed\r\n     */\r\n    un(event, fn) {\r\n        if (!this.handlers) {\r\n            return;\r\n        }\r\n\r\n        const handlers = this.handlers[event];\r\n        let i;\r\n        if (handlers) {\r\n            if (fn) {\r\n                for (i = handlers.length - 1; i >= 0; i--) {\r\n                    if (handlers[i] == fn) {\r\n                        handlers.splice(i, 1);\r\n                    }\r\n                }\r\n            } else {\r\n                handlers.length = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Remove all event handlers.\r\n     */\r\n    unAll() {\r\n        this.handlers = null;\r\n    }\r\n\r\n    /**\r\n     * Attach a handler to an event. The handler is executed at most once per\r\n     * event type.\r\n     *\r\n     * @param {string} event The event to listen to\r\n     * @param {function} handler The callback that is only to be called once\r\n     * @return {ListenerDescriptor} The event descriptor\r\n     */\r\n    once(event, handler) {\r\n        const fn = (...args) => {\r\n            /*  eslint-disable no-invalid-this */\r\n            handler.apply(this, args);\r\n            /*  eslint-enable no-invalid-this */\r\n            setTimeout(() => {\r\n                this.un(event, fn);\r\n            }, 0);\r\n        };\r\n        return this.on(event, fn);\r\n    }\r\n\r\n    /**\r\n     * Manually fire an event\r\n     *\r\n     * @param {string} event The event to fire manually\r\n     * @param {...any} args The arguments with which to call the listeners\r\n     */\r\n    fireEvent(event, ...args) {\r\n        if (!this.handlers) {\r\n            return;\r\n        }\r\n        const handlers = this.handlers[event];\r\n        handlers &&\r\n            handlers.forEach(fn => {\r\n                fn(...args);\r\n            });\r\n    }\r\n}\r\n","/**\r\n * Get a random prefixed ID\r\n *\r\n * @param {String} prefix Prefix to use. Default is `'wavesurfer_'`.\r\n * @returns {String} Random prefixed ID\r\n * @example\r\n * console.log(getId()); // logs 'wavesurfer_b5pors4ru6g'\r\n *\r\n * let prefix = 'foo-';\r\n * console.log(getId(prefix)); // logs 'foo-b5pors4ru6g'\r\n */\r\nexport default function getId(prefix) {\r\n    if (prefix === undefined) {\r\n        prefix = 'wavesurfer_';\r\n    }\r\n    return (\r\n        prefix +\r\n        Math.random()\r\n            .toString(32)\r\n            .substring(2)\r\n    );\r\n}\r\n","/**\r\n * Apply a map of styles to an element\r\n *\r\n * @param {HTMLElement} el The element that the styles will be applied to\r\n * @param {Object} styles The map of propName: attribute, both are used as-is\r\n *\r\n * @return {HTMLElement} el\r\n */\r\nexport default function style(el, styles) {\r\n    Object.keys(styles).forEach(prop => {\r\n        if (el.style[prop] !== styles[prop]) {\r\n            el.style[prop] = styles[prop];\r\n        }\r\n    });\r\n    return el;\r\n}\r\n","/* eslint-disable valid-jsdoc */\r\n/**\r\n * Returns the `requestAnimationFrame` function for the browser, or a shim with\r\n * `setTimeout` if the function is not found\r\n *\r\n * @return {function} Available `requestAnimationFrame` function for the browser\r\n */\r\nexport default (\r\n    window.requestAnimationFrame ||\r\n    window.webkitRequestAnimationFrame ||\r\n    window.mozRequestAnimationFrame ||\r\n    window.oRequestAnimationFrame ||\r\n    window.msRequestAnimationFrame ||\r\n    ((callback, element) => setTimeout(callback, 1000 / 60))\r\n).bind(window);\r\n","import * as util from './util';\r\n\r\n// using constants to prevent someone writing the string wrong\r\nconst PLAYING = 'playing';\r\nconst PAUSED = 'paused';\r\nconst FINISHED = 'finished';\r\n\r\n/**\r\n * WebAudio backend\r\n *\r\n * @extends {Observer}\r\n */\r\nexport default class WebAudio extends util.Observer {\r\n    /** @private */\r\n    static scriptBufferSize = 256;\r\n    /** @private */\r\n    audioContext = null;\r\n    /** @private */\r\n    offlineAudioContext = null;\r\n    /** @private */\r\n    stateBehaviors = {\r\n        [PLAYING]: {\r\n            init() {\r\n                this.addOnAudioProcess();\r\n            },\r\n            getPlayedPercents() {\r\n                const duration = this.getDuration();\r\n                return this.getCurrentTime() / duration || 0;\r\n            },\r\n            getCurrentTime() {\r\n                return this.startPosition + this.getPlayedTime();\r\n            }\r\n        },\r\n        [PAUSED]: {\r\n            init() {\r\n                this.removeOnAudioProcess();\r\n            },\r\n            getPlayedPercents() {\r\n                const duration = this.getDuration();\r\n                return this.getCurrentTime() / duration || 0;\r\n            },\r\n            getCurrentTime() {\r\n                return this.startPosition;\r\n            }\r\n        },\r\n        [FINISHED]: {\r\n            init() {\r\n                this.removeOnAudioProcess();\r\n                this.fireEvent('finish');\r\n            },\r\n            getPlayedPercents() {\r\n                return 1;\r\n            },\r\n            getCurrentTime() {\r\n                return this.getDuration();\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Does the browser support this backend\r\n     *\r\n     * @return {boolean} Whether or not this browser supports this backend\r\n     */\r\n    supportsWebAudio() {\r\n        return !!(window.AudioContext || window.webkitAudioContext);\r\n    }\r\n\r\n    /**\r\n     * Get the audio context used by this backend or create one\r\n     *\r\n     * @return {AudioContext} Existing audio context, or creates a new one\r\n     */\r\n    getAudioContext() {\r\n        if (!window.WaveSurferAudioContext) {\r\n            window.WaveSurferAudioContext = new (window.AudioContext ||\r\n                window.webkitAudioContext)();\r\n        }\r\n        return window.WaveSurferAudioContext;\r\n    }\r\n\r\n    /**\r\n     * Get the offline audio context used by this backend or create one\r\n     *\r\n     * @param {number} sampleRate The sample rate to use\r\n     * @return {OfflineAudioContext} Existing offline audio context, or creates\r\n     * a new one\r\n     */\r\n    getOfflineAudioContext(sampleRate) {\r\n        if (!window.WaveSurferOfflineAudioContext) {\r\n            window.WaveSurferOfflineAudioContext = new (window.OfflineAudioContext ||\r\n                window.webkitOfflineAudioContext)(1, 2, sampleRate);\r\n        }\r\n        return window.WaveSurferOfflineAudioContext;\r\n    }\r\n\r\n    /**\r\n     * Construct the backend\r\n     *\r\n     * @param {WavesurferParams} params Wavesurfer parameters\r\n     */\r\n    constructor(params) {\r\n        super();\r\n        /** @private */\r\n        this.params = params;\r\n        /** @private */\r\n        this.ac =\r\n            params.audioContext ||\r\n            (this.supportsWebAudio() ? this.getAudioContext() : {});\r\n        /**@private */\r\n        this.lastPlay = this.ac.currentTime;\r\n        /** @private */\r\n        this.startPosition = 0;\r\n        /** @private  */\r\n        this.scheduledPause = null;\r\n        /** @private */\r\n        this.states = {\r\n            [PLAYING]: Object.create(this.stateBehaviors[PLAYING]),\r\n            [PAUSED]: Object.create(this.stateBehaviors[PAUSED]),\r\n            [FINISHED]: Object.create(this.stateBehaviors[FINISHED])\r\n        };\r\n        /** @private */\r\n        this.analyser = null;\r\n        /** @private */\r\n        this.buffer = null;\r\n        /** @private */\r\n        this.filters = [];\r\n        /** @private */\r\n        this.gainNode = null;\r\n        /** @private */\r\n        this.mergedPeaks = null;\r\n        /** @private */\r\n        this.offlineAc = null;\r\n        /** @private */\r\n        this.peaks = null;\r\n        /** @private */\r\n        this.playbackRate = 1;\r\n        /** @private */\r\n        this.analyser = null;\r\n        /** @private */\r\n        this.scriptNode = null;\r\n        /** @private */\r\n        this.source = null;\r\n        /** @private */\r\n        this.splitPeaks = [];\r\n        /** @private */\r\n        this.state = null;\r\n        /** @private */\r\n        this.explicitDuration = params.duration;\r\n    }\r\n\r\n    /**\r\n     * Initialise the backend, called in `wavesurfer.createBackend()`\r\n     */\r\n    init() {\r\n        this.createVolumeNode();\r\n        this.createScriptNode();\r\n        this.createAnalyserNode();\r\n\r\n        this.setState(PAUSED);\r\n        this.setPlaybackRate(this.params.audioRate);\r\n        this.setLength(0);\r\n    }\r\n\r\n    /** @private */\r\n    disconnectFilters() {\r\n        if (this.filters) {\r\n            this.filters.forEach(filter => {\r\n                filter && filter.disconnect();\r\n            });\r\n            this.filters = null;\r\n            // Reconnect direct path\r\n            this.analyser.connect(this.gainNode);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     *\r\n     * @param {string} state The new state\r\n     */\r\n    setState(state) {\r\n        if (this.state !== this.states[state]) {\r\n            this.state = this.states[state];\r\n            this.state.init.call(this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Unpacked `setFilters()`\r\n     *\r\n     * @param {...AudioNode} filters One or more filters to set\r\n     */\r\n    setFilter(...filters) {\r\n        this.setFilters(filters);\r\n    }\r\n\r\n    /**\r\n     * Insert custom Web Audio nodes into the graph\r\n     *\r\n     * @param {AudioNode[]} filters Packed filters array\r\n     * @example\r\n     * const lowpass = wavesurfer.backend.ac.createBiquadFilter();\r\n     * wavesurfer.backend.setFilter(lowpass);\r\n     */\r\n    setFilters(filters) {\r\n        // Remove existing filters\r\n        this.disconnectFilters();\r\n\r\n        // Insert filters if filter array not empty\r\n        if (filters && filters.length) {\r\n            this.filters = filters;\r\n\r\n            // Disconnect direct path before inserting filters\r\n            this.analyser.disconnect();\r\n\r\n            // Connect each filter in turn\r\n            filters\r\n                .reduce((prev, curr) => {\r\n                    prev.connect(curr);\r\n                    return curr;\r\n                }, this.analyser)\r\n                .connect(this.gainNode);\r\n        }\r\n    }\r\n\r\n    /** @private */\r\n    createScriptNode() {\r\n        if (this.params.audioScriptProcessor) {\r\n            this.scriptNode = this.params.audioScriptProcessor;\r\n        } else {\r\n            if (this.ac.createScriptProcessor) {\r\n                this.scriptNode = this.ac.createScriptProcessor(\r\n                    WebAudio.scriptBufferSize\r\n                );\r\n            } else {\r\n                this.scriptNode = this.ac.createJavaScriptNode(\r\n                    WebAudio.scriptBufferSize\r\n                );\r\n            }\r\n        }\r\n        this.scriptNode.connect(this.ac.destination);\r\n    }\r\n\r\n    /** @private */\r\n    addOnAudioProcess() {\r\n        this.scriptNode.onaudioprocess = () => {\r\n            const time = this.getCurrentTime();\r\n\r\n            if (time >= this.getDuration()) {\r\n                this.setState(FINISHED);\r\n                this.fireEvent('pause');\r\n            } else if (time >= this.scheduledPause) {\r\n                this.pause();\r\n            } else if (this.state === this.states[PLAYING]) {\r\n                this.fireEvent('audioprocess', time);\r\n            }\r\n        };\r\n    }\r\n\r\n    /** @private */\r\n    removeOnAudioProcess() {\r\n        this.scriptNode.onaudioprocess = () => {};\r\n    }\r\n\r\n    /** @private */\r\n    createAnalyserNode() {\r\n        this.analyser = this.ac.createAnalyser();\r\n        this.analyser.connect(this.gainNode);\r\n    }\r\n\r\n    /**\r\n     * Create the gain node needed to control the playback volume.\r\n     *\r\n     * @private\r\n     */\r\n    createVolumeNode() {\r\n        // Create gain node using the AudioContext\r\n        if (this.ac.createGain) {\r\n            this.gainNode = this.ac.createGain();\r\n        } else {\r\n            this.gainNode = this.ac.createGainNode();\r\n        }\r\n        // Add the gain node to the graph\r\n        this.gainNode.connect(this.ac.destination);\r\n    }\r\n\r\n    /**\r\n     * Set the sink id for the media player\r\n     *\r\n     * @param {string} deviceId String value representing audio device id.\r\n     * @returns {Promise} A Promise that resolves to `undefined` when there\r\n     * are no errors.\r\n     */\r\n    setSinkId(deviceId) {\r\n        if (deviceId) {\r\n            /**\r\n             * The webaudio API doesn't currently support setting the device\r\n             * output. Here we create an HTMLAudioElement, connect the\r\n             * webaudio stream to that element and setSinkId there.\r\n             */\r\n            let audio = new window.Audio();\r\n            if (!audio.setSinkId) {\r\n                return Promise.reject(\r\n                    new Error('setSinkId is not supported in your browser')\r\n                );\r\n            }\r\n            audio.autoplay = true;\r\n            var dest = this.ac.createMediaStreamDestination();\r\n            this.gainNode.disconnect();\r\n            this.gainNode.connect(dest);\r\n            audio.srcObject = dest.stream;\r\n\r\n            return audio.setSinkId(deviceId);\r\n        } else {\r\n            return Promise.reject(new Error('Invalid deviceId: ' + deviceId));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set the audio volume\r\n     *\r\n     * @param {number} value A floating point value between 0 and 1.\r\n     */\r\n    setVolume(value) {\r\n        this.gainNode.gain.setValueAtTime(value, this.ac.currentTime);\r\n    }\r\n\r\n    /**\r\n     * Get the current volume\r\n     *\r\n     * @return {number} value A floating point value between 0 and 1.\r\n     */\r\n    getVolume() {\r\n        return this.gainNode.gain.value;\r\n    }\r\n\r\n    /**\r\n     * Decode an array buffer and pass data to a callback\r\n     *\r\n     * @private\r\n     * @param {ArrayBuffer} arraybuffer The array buffer to decode\r\n     * @param {function} callback The function to call on complete.\r\n     * @param {function} errback The function to call on error.\r\n     */\r\n    decodeArrayBuffer(arraybuffer, callback, errback) {\r\n        if (!this.offlineAc) {\r\n            this.offlineAc = this.getOfflineAudioContext(\r\n                this.ac && this.ac.sampleRate ? this.ac.sampleRate : 44100\r\n            );\r\n        }\r\n        this.offlineAc.decodeAudioData(\r\n            arraybuffer,\r\n            data => callback(data),\r\n            errback\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Set pre-decoded peaks\r\n     *\r\n     * @param {number[]|Number.<Array[]>} peaks Peaks data\r\n     * @param {?number} duration Explicit duration\r\n     */\r\n    setPeaks(peaks, duration) {\r\n        if (duration != null) {\r\n            this.explicitDuration = duration;\r\n        }\r\n        this.peaks = peaks;\r\n    }\r\n\r\n    /**\r\n     * Set the rendered length (different from the length of the audio)\r\n     *\r\n     * @param {number} length The rendered length\r\n     */\r\n    setLength(length) {\r\n        // No resize, we can preserve the cached peaks.\r\n        if (this.mergedPeaks && length == 2 * this.mergedPeaks.length - 1 + 2) {\r\n            return;\r\n        }\r\n\r\n        this.splitPeaks = [];\r\n        this.mergedPeaks = [];\r\n        // Set the last element of the sparse array so the peak arrays are\r\n        // appropriately sized for other calculations.\r\n        const channels = this.buffer ? this.buffer.numberOfChannels : 1;\r\n        let c;\r\n        for (c = 0; c < channels; c++) {\r\n            this.splitPeaks[c] = [];\r\n            this.splitPeaks[c][2 * (length - 1)] = 0;\r\n            this.splitPeaks[c][2 * (length - 1) + 1] = 0;\r\n        }\r\n        this.mergedPeaks[2 * (length - 1)] = 0;\r\n        this.mergedPeaks[2 * (length - 1) + 1] = 0;\r\n    }\r\n\r\n    /**\r\n     * Compute the max and min value of the waveform when broken into <length> subranges.\r\n     *\r\n     * @param {number} length How many subranges to break the waveform into.\r\n     * @param {number} first First sample in the required range.\r\n     * @param {number} last Last sample in the required range.\r\n     * @return {number[]|Number.<Array[]>} Array of 2*<length> peaks or array of arrays of\r\n     * peaks consisting of (max, min) values for each subrange.\r\n     */\r\n    getPeaks(length, first, last) {\r\n        if (this.peaks) {\r\n            return this.peaks;\r\n        }\r\n        if (!this.buffer) {\r\n            return [];\r\n        }\r\n\r\n        first = first || 0;\r\n        last = last || length - 1;\r\n\r\n        this.setLength(length);\r\n\r\n        if (!this.buffer) {\r\n            return this.params.splitChannels\r\n                ? this.splitPeaks\r\n                : this.mergedPeaks;\r\n        }\r\n\r\n        /**\r\n         * The following snippet fixes a buffering data issue on the Safari\r\n         * browser which returned undefined It creates the missing buffer based\r\n         * on 1 channel, 4096 samples and the sampleRate from the current\r\n         * webaudio context 4096 samples seemed to be the best fit for rendering\r\n         * will review this code once a stable version of Safari TP is out\r\n         */\r\n        if (!this.buffer.length) {\r\n            const newBuffer = this.createBuffer(1, 4096, this.sampleRate);\r\n            this.buffer = newBuffer.buffer;\r\n        }\r\n\r\n        const sampleSize = this.buffer.length / length;\r\n        const sampleStep = ~~(sampleSize / 10) || 1;\r\n        const channels = this.buffer.numberOfChannels;\r\n        let c;\r\n\r\n        for (c = 0; c < channels; c++) {\r\n            const peaks = this.splitPeaks[c];\r\n            const chan = this.buffer.getChannelData(c);\r\n            let i;\r\n\r\n            for (i = first; i <= last; i++) {\r\n                const start = ~~(i * sampleSize);\r\n                const end = ~~(start + sampleSize);\r\n                let min = 0;\r\n                let max = 0;\r\n                let j;\r\n\r\n                for (j = start; j < end; j += sampleStep) {\r\n                    const value = chan[j];\r\n\r\n                    if (value > max) {\r\n                        max = value;\r\n                    }\r\n\r\n                    if (value < min) {\r\n                        min = value;\r\n                    }\r\n                }\r\n\r\n                peaks[2 * i] = max;\r\n                peaks[2 * i + 1] = min;\r\n\r\n                if (c == 0 || max > this.mergedPeaks[2 * i]) {\r\n                    this.mergedPeaks[2 * i] = max;\r\n                }\r\n\r\n                if (c == 0 || min < this.mergedPeaks[2 * i + 1]) {\r\n                    this.mergedPeaks[2 * i + 1] = min;\r\n                }\r\n            }\r\n        }\r\n\r\n        return this.params.splitChannels ? this.splitPeaks : this.mergedPeaks;\r\n    }\r\n\r\n    /**\r\n     * Get the position from 0 to 1\r\n     *\r\n     * @return {number} Position\r\n     */\r\n    getPlayedPercents() {\r\n        return this.state.getPlayedPercents.call(this);\r\n    }\r\n\r\n    /** @private */\r\n    disconnectSource() {\r\n        if (this.source) {\r\n            this.source.disconnect();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This is called when wavesurfer is destroyed\r\n     */\r\n    destroy() {\r\n        if (!this.isPaused()) {\r\n            this.pause();\r\n        }\r\n        this.unAll();\r\n        this.buffer = null;\r\n        this.disconnectFilters();\r\n        this.disconnectSource();\r\n        this.gainNode.disconnect();\r\n        this.scriptNode.disconnect();\r\n        this.analyser.disconnect();\r\n\r\n        // close the audioContext if closeAudioContext option is set to true\r\n        if (this.params.closeAudioContext) {\r\n            // check if browser supports AudioContext.close()\r\n            if (\r\n                typeof this.ac.close === 'function' &&\r\n                this.ac.state != 'closed'\r\n            ) {\r\n                this.ac.close();\r\n            }\r\n            // clear the reference to the audiocontext\r\n            this.ac = null;\r\n            // clear the actual audiocontext, either passed as param or the\r\n            // global singleton\r\n            if (!this.params.audioContext) {\r\n                window.WaveSurferAudioContext = null;\r\n            } else {\r\n                this.params.audioContext = null;\r\n            }\r\n            // clear the offlineAudioContext\r\n            window.WaveSurferOfflineAudioContext = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Loaded a decoded audio buffer\r\n     *\r\n     * @param {Object} buffer Decoded audio buffer to load\r\n     */\r\n    load(buffer) {\r\n        this.startPosition = 0;\r\n        this.lastPlay = this.ac.currentTime;\r\n        this.buffer = buffer;\r\n        this.createSource();\r\n    }\r\n\r\n    /** @private */\r\n    createSource() {\r\n        this.disconnectSource();\r\n        this.source = this.ac.createBufferSource();\r\n\r\n        // adjust for old browsers\r\n        this.source.start = this.source.start || this.source.noteGrainOn;\r\n        this.source.stop = this.source.stop || this.source.noteOff;\r\n\r\n        this.source.playbackRate.setValueAtTime(\r\n            this.playbackRate,\r\n            this.ac.currentTime\r\n        );\r\n        this.source.buffer = this.buffer;\r\n        this.source.connect(this.analyser);\r\n    }\r\n\r\n    /**\r\n     * Used by `wavesurfer.isPlaying()` and `wavesurfer.playPause()`\r\n     *\r\n     * @return {boolean} Whether or not this backend is currently paused\r\n     */\r\n    isPaused() {\r\n        return this.state !== this.states[PLAYING];\r\n    }\r\n\r\n    /**\r\n     * Used by `wavesurfer.getDuration()`\r\n     *\r\n     * @return {number} Duration of loaded buffer\r\n     */\r\n    getDuration() {\r\n        if (this.explicitDuration) {\r\n            return this.explicitDuration;\r\n        }\r\n        if (!this.buffer) {\r\n            return 0;\r\n        }\r\n        return this.buffer.duration;\r\n    }\r\n\r\n    /**\r\n     * Used by `wavesurfer.seekTo()`\r\n     *\r\n     * @param {number} start Position to start at in seconds\r\n     * @param {number} end Position to end at in seconds\r\n     * @return {{start: number, end: number}} Object containing start and end\r\n     * positions\r\n     */\r\n    seekTo(start, end) {\r\n        if (!this.buffer) {\r\n            return;\r\n        }\r\n\r\n        this.scheduledPause = null;\r\n\r\n        if (start == null) {\r\n            start = this.getCurrentTime();\r\n            if (start >= this.getDuration()) {\r\n                start = 0;\r\n            }\r\n        }\r\n        if (end == null) {\r\n            end = this.getDuration();\r\n        }\r\n\r\n        this.startPosition = start;\r\n        this.lastPlay = this.ac.currentTime;\r\n\r\n        if (this.state === this.states[FINISHED]) {\r\n            this.setState(PAUSED);\r\n        }\r\n\r\n        return {\r\n            start: start,\r\n            end: end\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Get the playback position in seconds\r\n     *\r\n     * @return {number} The playback position in seconds\r\n     */\r\n    getPlayedTime() {\r\n        return (this.ac.currentTime - this.lastPlay) * this.playbackRate;\r\n    }\r\n\r\n    /**\r\n     * Plays the loaded audio region.\r\n     *\r\n     * @param {number} start Start offset in seconds, relative to the beginning\r\n     * of a clip.\r\n     * @param {number} end When to stop relative to the beginning of a clip.\r\n     */\r\n    play(start, end) {\r\n        if (!this.buffer) {\r\n            return;\r\n        }\r\n\r\n        // need to re-create source on each playback\r\n        this.createSource();\r\n\r\n        const adjustedTime = this.seekTo(start, end);\r\n\r\n        start = adjustedTime.start;\r\n        end = adjustedTime.end;\r\n\r\n        this.scheduledPause = end;\r\n\r\n        this.source.start(0, start, end - start);\r\n\r\n        if (this.ac.state == 'suspended') {\r\n            this.ac.resume && this.ac.resume();\r\n        }\r\n\r\n        this.setState(PLAYING);\r\n\r\n        this.fireEvent('play');\r\n    }\r\n\r\n    /**\r\n     * Pauses the loaded audio.\r\n     */\r\n    pause() {\r\n        this.scheduledPause = null;\r\n\r\n        this.startPosition += this.getPlayedTime();\r\n        this.source && this.source.stop(0);\r\n\r\n        this.setState(PAUSED);\r\n\r\n        this.fireEvent('pause');\r\n    }\r\n\r\n    /**\r\n     * Returns the current time in seconds relative to the audio-clip's\r\n     * duration.\r\n     *\r\n     * @return {number} The current time in seconds\r\n     */\r\n    getCurrentTime() {\r\n        return this.state.getCurrentTime.call(this);\r\n    }\r\n\r\n    /**\r\n     * Returns the current playback rate. (0=no playback, 1=normal playback)\r\n     *\r\n     * @return {number} The current playback rate\r\n     */\r\n    getPlaybackRate() {\r\n        return this.playbackRate;\r\n    }\r\n\r\n    /**\r\n     * Set the audio source playback rate.\r\n     *\r\n     * @param {number} value The playback rate to use\r\n     */\r\n    setPlaybackRate(value) {\r\n        value = value || 1;\r\n        if (this.isPaused()) {\r\n            this.playbackRate = value;\r\n        } else {\r\n            this.pause();\r\n            this.playbackRate = value;\r\n            this.play();\r\n        }\r\n    }\r\n}\r\n","import * as util from './util';\r\nimport MultiCanvas from './drawer.multicanvas';\r\nimport WebAudio from './webaudio';\r\nimport MediaElement from './mediaelement';\r\nimport PeakCache from './peakcache';\r\n\r\n/*\r\n * This work is licensed under a BSD-3-Clause License.\r\n */\r\n\r\n/** @external {HTMLElement} https://developer.mozilla.org/en/docs/Web/API/HTMLElement */\r\n/** @external {OfflineAudioContext} https://developer.mozilla.org/en-US/docs/Web/API/OfflineAudioContext */\r\n/** @external {File} https://developer.mozilla.org/en-US/docs/Web/API/File */\r\n/** @external {Blob} https://developer.mozilla.org/en-US/docs/Web/API/Blob */\r\n/** @external {CanvasRenderingContext2D} https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D */\r\n/** @external {MediaStreamConstraints} https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamConstraints */\r\n/** @external {AudioNode} https://developer.mozilla.org/de/docs/Web/API/AudioNode */\r\n\r\n/**\r\n * @typedef {Object} WavesurferParams\r\n * @property {AudioContext} audioContext=null Use your own previously\r\n * initialized AudioContext or leave blank.\r\n * @property {number} audioRate=1 Speed at which to play audio. Lower number is\r\n * slower.\r\n * @property {ScriptProcessorNode} audioScriptProcessor=null Use your own previously\r\n * initialized ScriptProcessorNode or leave blank.\r\n * @property {boolean} autoCenter=true If a scrollbar is present, center the\r\n * waveform around the progress\r\n * @property {string} backend='WebAudio' `'WebAudio'|'MediaElement'` In most cases\r\n * you don't have to set this manually. MediaElement is a fallback for\r\n * unsupported browsers.\r\n * @property {string} backgroundColor=null Change background color of the\r\n * waveform container.\r\n * @property {number} barHeight=1 The height of the wave\r\n * @property {number} barGap=null The optional spacing between bars of the wave,\r\n * if not provided will be calculated in legacy format.\r\n * @property {boolean} closeAudioContext=false Close and nullify all audio\r\n * contexts when the destroy method is called.\r\n * @property {!string|HTMLElement} container CSS selector or HTML element where\r\n * the waveform should be drawn. This is the only required parameter.\r\n * @property {string} cursorColor='#333' The fill color of the cursor indicating\r\n * the playhead position.\r\n * @property {number} cursorWidth=1 Measured in pixels.\r\n * @property {number} duration=null Optional audio length so pre-rendered peaks\r\n * can be display immediately for example.\r\n * @property {boolean} fillParent=true Whether to fill the entire container or\r\n * draw only according to `minPxPerSec`.\r\n * @property {boolean} forceDecode=false Force decoding of audio using web audio\r\n * when zooming to get a more detailed waveform.\r\n * @property {number} height=128 The height of the waveform. Measured in\r\n * pixels.\r\n * @property {boolean} hideScrollbar=false Whether to hide the horizontal\r\n * scrollbar when one would normally be shown.\r\n * @property {boolean} interact=true Whether the mouse interaction will be\r\n * enabled at initialization. You can switch this parameter at any time later\r\n * on.\r\n * @property {boolean} loopSelection=true (Use with regions plugin) Enable\r\n * looping of selected regions\r\n * @property {number} maxCanvasWidth=4000 Maximum width of a single canvas in\r\n * pixels, excluding a small overlap (2 * `pixelRatio`, rounded up to the next\r\n * even integer). If the waveform is longer than this value, additional canvases\r\n * will be used to render the waveform, which is useful for very large waveforms\r\n * that may be too wide for browsers to draw on a single canvas.\r\n * @property {boolean} mediaControls=false (Use with backend `MediaElement`)\r\n * this enables the native controls for the media element\r\n * @property {string} mediaType='audio' (Use with backend `MediaElement`)\r\n * `'audio'|'video'`\r\n * @property {number} minPxPerSec=20 Minimum number of pixels per second of\r\n * audio.\r\n * @property {boolean} normalize=false If true, normalize by the maximum peak\r\n * instead of 1.0.\r\n * @property {boolean} partialRender=false Use the PeakCache to improve\r\n * rendering speed of large waveforms\r\n * @property {number} pixelRatio=window.devicePixelRatio The pixel ratio used to\r\n * calculate display\r\n * @property {PluginDefinition[]} plugins=[] An array of plugin definitions to\r\n * register during instantiation, they will be directly initialised unless they\r\n * are added with the `deferInit` property set to true.\r\n * @property {string} progressColor='#555' The fill color of the part of the\r\n * waveform behind the cursor. When `progressColor` and `waveColor` are the same\r\n * the progress wave is not rendered at all.\r\n * @property {boolean} removeMediaElementOnDestroy=true Set to false to keep the\r\n * media element in the DOM when the player is destroyed. This is useful when\r\n * reusing an existing media element via the `loadMediaElement` method.\r\n * @property {Object} renderer=MultiCanvas Can be used to inject a custom\r\n * renderer.\r\n * @property {boolean|number} responsive=false If set to `true` resize the\r\n * waveform, when the window is resized. This is debounced with a `100ms`\r\n * timeout by default. If this parameter is a number it represents that timeout.\r\n * @property {boolean} rtl=false If set to `true`, renders waveform from\r\n * right-to-left.\r\n * @property {boolean} scrollParent=false Whether to scroll the container with a\r\n * lengthy waveform. Otherwise the waveform is shrunk to the container width\r\n * (see fillParent).\r\n * @property {number} skipLength=2 Number of seconds to skip with the\r\n * skipForward() and skipBackward() methods.\r\n * @property {boolean} splitChannels=false Render with separate waveforms for\r\n * the channels of the audio\r\n * @property {string} waveColor='#999' The fill color of the waveform after the\r\n * cursor.\r\n * @property {object} xhr={} XHR options. For example:\r\n * `var xhr = {\r\n *     requestHeaders: [\r\n *         {\r\n *             key: 'Authorization',\r\n *             value: 'my-token'\r\n *         }\r\n *     ],\r\n *     withCredentials: true\r\n * };`\r\n */\r\n\r\n/**\r\n * @typedef {Object} PluginDefinition\r\n * @desc The Object used to describe a plugin\r\n * @example wavesurfer.addPlugin(pluginDefinition);\r\n * @property {string} name The name of the plugin, the plugin instance will be\r\n * added as a property to the wavesurfer instance under this name\r\n * @property {?Object} staticProps The properties that should be added to the\r\n * wavesurfer instance as static properties\r\n * @property {?boolean} deferInit Don't initialise plugin\r\n * automatically\r\n * @property {Object} params={} The plugin parameters, they are the first parameter\r\n * passed to the plugin class constructor function\r\n * @property {PluginClass} instance The plugin instance factory, is called with\r\n * the dependency specified in extends. Returns the plugin class.\r\n */\r\n\r\n/**\r\n * @interface PluginClass\r\n *\r\n * @desc This is the interface which is implemented by all plugin classes. Note\r\n * that this only turns into an observer after being passed through\r\n * `wavesurfer.addPlugin`.\r\n *\r\n * @extends {Observer}\r\n */\r\nclass PluginClass {\r\n    /**\r\n     * Plugin definition factory\r\n     *\r\n     * This function must be used to create a plugin definition which can be\r\n     * used by wavesurfer to correctly instantiate the plugin.\r\n     *\r\n     * It returns a `PluginDefinition` object representing the plugin.\r\n     *\r\n     * @param {Object} params={} The plugin params (specific to the plugin)\r\n     */\r\n    create(params) {}\r\n    /**\r\n     * Construct the plugin\r\n     *\r\n     * @param {Object} params={} The plugin params (specific to the plugin)\r\n     * @param {Object} ws The wavesurfer instance\r\n     */\r\n    constructor(params, ws) {}\r\n    /**\r\n     * Initialise the plugin\r\n     *\r\n     * Start doing something. This is called by\r\n     * `wavesurfer.initPlugin(pluginName)`\r\n     */\r\n    init() {}\r\n    /**\r\n     * Destroy the plugin instance\r\n     *\r\n     * Stop doing something. This is called by\r\n     * `wavesurfer.destroyPlugin(pluginName)`\r\n     */\r\n    destroy() {}\r\n}\r\n\r\n/**\r\n * WaveSurfer core library class\r\n *\r\n * @extends {Observer}\r\n * @example\r\n * const params = {\r\n *   container: '#waveform',\r\n *   waveColor: 'violet',\r\n *   progressColor: 'purple'\r\n * };\r\n *\r\n * // initialise like this\r\n * const wavesurfer = WaveSurfer.create(params);\r\n *\r\n * // or like this ...\r\n * const wavesurfer = new WaveSurfer(params);\r\n * wavesurfer.init();\r\n *\r\n * // load audio file\r\n * wavesurfer.load('example/media/demo.wav');\r\n */\r\nexport default class WaveSurfer extends util.Observer {\r\n    /** @private */\r\n    defaultParams = {\r\n        audioContext: null,\r\n        audioScriptProcessor: null,\r\n        audioRate: 1,\r\n        autoCenter: true,\r\n        backend: 'WebAudio',\r\n        backgroundColor: null,\r\n        barHeight: 1,\r\n        barGap: null,\r\n        container: null,\r\n        cursorColor: '#333',\r\n        cursorWidth: 1,\r\n        dragSelection: true,\r\n        duration: null,\r\n        fillParent: true,\r\n        forceDecode: false,\r\n        height: 128,\r\n        hideScrollbar: false,\r\n        interact: true,\r\n        loopSelection: true,\r\n        maxCanvasWidth: 4000,\r\n        mediaContainer: null,\r\n        mediaControls: false,\r\n        mediaType: 'audio',\r\n        minPxPerSec: 20,\r\n        normalize: false,\r\n        partialRender: false,\r\n        pixelRatio: window.devicePixelRatio || screen.deviceXDPI / screen.logicalXDPI,\r\n        plugins: [],\r\n        progressColor: '#555',\r\n        removeMediaElementOnDestroy: true,\r\n        renderer: MultiCanvas,\r\n        responsive: false,\r\n        rtl: false,\r\n        scrollParent: false,\r\n        skipLength: 2,\r\n        splitChannels: false,\r\n        waveColor: '#999',\r\n        xhr: {}\r\n    };\r\n\r\n    /** @private */\r\n    backends = {\r\n        MediaElement,\r\n        WebAudio\r\n    };\r\n\r\n    /**\r\n     * Instantiate this class, call its `init` function and returns it\r\n     *\r\n     * @param {WavesurferParams} params The wavesurfer parameters\r\n     * @return {Object} WaveSurfer instance\r\n     * @example const wavesurfer = WaveSurfer.create(params);\r\n     */\r\n    static create(params) {\r\n        const wavesurfer = new WaveSurfer(params);\r\n        return wavesurfer.init();\r\n    }\r\n\r\n    /**\r\n     * The library version number is available as a static property of the\r\n     * WaveSurfer class\r\n     *\r\n     * @type {String}\r\n     * @example\r\n     * console.log('Using wavesurfer.js ' + WaveSurfer.VERSION);\r\n     */\r\n    static VERSION = __VERSION__;\r\n\r\n    /**\r\n     * Functions in the `util` property are available as a prototype property to\r\n     * all instances\r\n     *\r\n     * @type {Object}\r\n     * @example\r\n     * const wavesurfer = WaveSurfer.create(params);\r\n     * wavesurfer.util.style(myElement, { background: 'blue' });\r\n     */\r\n    util = util;\r\n\r\n    /**\r\n     * Functions in the `util` property are available as a static property of the\r\n     * WaveSurfer class\r\n     *\r\n     * @type {Object}\r\n     * @example\r\n     * WaveSurfer.util.style(myElement, { background: 'blue' });\r\n     */\r\n    static util = util;\r\n\r\n    /**\r\n     * Initialise wavesurfer instance\r\n     *\r\n     * @param {WavesurferParams} params Instantiation options for wavesurfer\r\n     * @example\r\n     * const wavesurfer = new WaveSurfer(params);\r\n     * @returns {this} Wavesurfer instance\r\n     */\r\n    constructor(params) {\r\n        super();\r\n        /**\r\n         * Extract relevant parameters (or defaults)\r\n         * @private\r\n         */\r\n        this.params = util.extend({}, this.defaultParams, params);\r\n\r\n        /** @private */\r\n        this.container =\r\n            'string' == typeof params.container ?\r\n            document.querySelector(this.params.container) :\r\n            this.params.container;\r\n\r\n        if (!this.container) {\r\n            throw new Error('Container element not found');\r\n        }\r\n\r\n        if (this.params.mediaContainer == null) {\r\n            /** @private */\r\n            this.mediaContainer = this.container;\r\n        } else if (typeof this.params.mediaContainer == 'string') {\r\n            /** @private */\r\n            this.mediaContainer = document.querySelector(\r\n                this.params.mediaContainer\r\n            );\r\n        } else {\r\n            /** @private */\r\n            this.mediaContainer = this.params.mediaContainer;\r\n        }\r\n\r\n        if (!this.mediaContainer) {\r\n            throw new Error('Media Container element not found');\r\n        }\r\n\r\n        if (this.params.maxCanvasWidth <= 1) {\r\n            throw new Error('maxCanvasWidth must be greater than 1');\r\n        } else if (this.params.maxCanvasWidth % 2 == 1) {\r\n            throw new Error('maxCanvasWidth must be an even number');\r\n        }\r\n\r\n        if (this.params.rtl === true) {\r\n            util.style(this.container, {\r\n                transform: 'rotateY(180deg)'\r\n            });\r\n        }\r\n\r\n        if (this.params.backgroundColor) {\r\n            this.setBackgroundColor(this.params.backgroundColor);\r\n        }\r\n\r\n        /**\r\n         * @private Used to save the current volume when muting so we can\r\n         * restore once unmuted\r\n         * @type {number}\r\n         */\r\n        this.savedVolume = 0;\r\n\r\n        /**\r\n         * @private The current muted state\r\n         * @type {boolean}\r\n         */\r\n        this.isMuted = false;\r\n\r\n        /**\r\n         * @private Will hold a list of event descriptors that need to be\r\n         * canceled on subsequent loads of audio\r\n         * @type {Object[]}\r\n         */\r\n        this.tmpEvents = [];\r\n\r\n        /**\r\n         * @private Holds any running audio downloads\r\n         * @type {Observer}\r\n         */\r\n        this.currentAjax = null;\r\n        /** @private */\r\n        this.arraybuffer = null;\r\n        /** @private */\r\n        this.drawer = null;\r\n        /** @private */\r\n        this.backend = null;\r\n        /** @private */\r\n        this.peakCache = null;\r\n\r\n        // cache constructor objects\r\n        if (typeof this.params.renderer !== 'function') {\r\n            throw new Error('Renderer parameter is invalid');\r\n        }\r\n        /**\r\n         * @private The uninitialised Drawer class\r\n         */\r\n        this.Drawer = this.params.renderer;\r\n        /**\r\n         * @private The uninitialised Backend class\r\n         */\r\n        this.Backend = this.backends[this.params.backend];\r\n\r\n        /**\r\n         * @private map of plugin names that are currently initialised\r\n         */\r\n        this.initialisedPluginList = {};\r\n        /** @private */\r\n        this.isDestroyed = false;\r\n\r\n        /**\r\n         * Get the current ready status.\r\n         *\r\n         * @example const isReady = wavesurfer.isReady;\r\n         * @return {boolean}\r\n         */\r\n        this.isReady = false;\r\n\r\n        // responsive debounced event listener. If this.params.responsive is not\r\n        // set, this is never called. Use 100ms or this.params.responsive as\r\n        // timeout for the debounce function.\r\n        let prevWidth = 0;\r\n        this._onResize = util.debounce(\r\n            () => {\r\n                if (\r\n                    prevWidth != this.drawer.wrapper.clientWidth &&\r\n                    !this.params.scrollParent\r\n                ) {\r\n                    prevWidth = this.drawer.wrapper.clientWidth;\r\n                    this.drawer.fireEvent('redraw');\r\n                }\r\n            },\r\n            typeof this.params.responsive === 'number' ?\r\n            this.params.responsive :\r\n            100\r\n        );\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Initialise the wave\r\n     *\r\n     * @example\r\n     * var wavesurfer = new WaveSurfer(params);\r\n     * wavesurfer.init();\r\n     * @return {this} The wavesurfer instance\r\n     */\r\n    init() {\r\n        this.registerPlugins(this.params.plugins);\r\n        this.createDrawer();\r\n        this.createBackend();\r\n        this.createPeakCache();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Add and initialise array of plugins (if `plugin.deferInit` is falsey),\r\n     * this function is called in the init function of wavesurfer\r\n     *\r\n     * @param {PluginDefinition[]} plugins An array of plugin definitions\r\n     * @emits {WaveSurfer#plugins-registered} Called with the array of plugin definitions\r\n     * @return {this} The wavesurfer instance\r\n     */\r\n    registerPlugins(plugins) {\r\n        // first instantiate all the plugins\r\n        plugins.forEach(plugin => this.addPlugin(plugin));\r\n\r\n        // now run the init functions\r\n        plugins.forEach(plugin => {\r\n            // call init function of the plugin if deferInit is falsey\r\n            // in that case you would manually use initPlugins()\r\n            if (!plugin.deferInit) {\r\n                this.initPlugin(plugin.name);\r\n            }\r\n        });\r\n        this.fireEvent('plugins-registered', plugins);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Get a map of plugin names that are currently initialised\r\n     *\r\n     * @example wavesurfer.getPlugins();\r\n     * @return {Object} Object with plugin names\r\n     */\r\n    getActivePlugins() {\r\n        return this.initialisedPluginList;\r\n    }\r\n\r\n    /**\r\n     * Add a plugin object to wavesurfer\r\n     *\r\n     * @param {PluginDefinition} plugin A plugin definition\r\n     * @emits {WaveSurfer#plugin-added} Called with the name of the plugin that was added\r\n     * @example wavesurfer.addPlugin(WaveSurfer.minimap());\r\n     * @return {this} The wavesurfer instance\r\n     */\r\n    addPlugin(plugin) {\r\n        if (!plugin.name) {\r\n            throw new Error('Plugin does not have a name!');\r\n        }\r\n        if (!plugin.instance) {\r\n            throw new Error(\r\n                `Plugin ${plugin.name} does not have an instance property!`\r\n            );\r\n        }\r\n\r\n        // staticProps properties are applied to wavesurfer instance\r\n        if (plugin.staticProps) {\r\n            Object.keys(plugin.staticProps).forEach(pluginStaticProp => {\r\n                /**\r\n                 * Properties defined in a plugin definition's `staticProps` property are added as\r\n                 * staticProps properties of the WaveSurfer instance\r\n                 */\r\n                this[pluginStaticProp] = plugin.staticProps[pluginStaticProp];\r\n            });\r\n        }\r\n\r\n        const Instance = plugin.instance;\r\n\r\n        // turn the plugin instance into an observer\r\n        const observerPrototypeKeys = Object.getOwnPropertyNames(\r\n            util.Observer.prototype\r\n        );\r\n        observerPrototypeKeys.forEach(key => {\r\n            Instance.prototype[key] = util.Observer.prototype[key];\r\n        });\r\n\r\n        /**\r\n         * Instantiated plugin classes are added as a property of the wavesurfer\r\n         * instance\r\n         * @type {Object}\r\n         */\r\n        this[plugin.name] = new Instance(plugin.params || {}, this);\r\n        this.fireEvent('plugin-added', plugin.name);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Initialise a plugin\r\n     *\r\n     * @param {string} name A plugin name\r\n     * @emits WaveSurfer#plugin-initialised\r\n     * @example wavesurfer.initPlugin('minimap');\r\n     * @return {this} The wavesurfer instance\r\n     */\r\n    initPlugin(name) {\r\n        if (!this[name]) {\r\n            throw new Error(`Plugin ${name} has not been added yet!`);\r\n        }\r\n        if (this.initialisedPluginList[name]) {\r\n            // destroy any already initialised plugins\r\n            this.destroyPlugin(name);\r\n        }\r\n        this[name].init();\r\n        this.initialisedPluginList[name] = true;\r\n        this.fireEvent('plugin-initialised', name);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Destroy a plugin\r\n     *\r\n     * @param {string} name A plugin name\r\n     * @emits WaveSurfer#plugin-destroyed\r\n     * @example wavesurfer.destroyPlugin('minimap');\r\n     * @returns {this} The wavesurfer instance\r\n     */\r\n    destroyPlugin(name) {\r\n        if (!this[name]) {\r\n            throw new Error(\r\n                `Plugin ${name} has not been added yet and cannot be destroyed!`\r\n            );\r\n        }\r\n        if (!this.initialisedPluginList[name]) {\r\n            throw new Error(\r\n                `Plugin ${name} is not active and cannot be destroyed!`\r\n            );\r\n        }\r\n        if (typeof this[name].destroy !== 'function') {\r\n            throw new Error(`Plugin ${name} does not have a destroy function!`);\r\n        }\r\n\r\n        this[name].destroy();\r\n        delete this.initialisedPluginList[name];\r\n        this.fireEvent('plugin-destroyed', name);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Destroy all initialised plugins. Convenience function to use when\r\n     * wavesurfer is removed\r\n     *\r\n     * @private\r\n     */\r\n    destroyAllPlugins() {\r\n        Object.keys(this.initialisedPluginList).forEach(name =>\r\n            this.destroyPlugin(name)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Create the drawer and draw the waveform\r\n     *\r\n     * @private\r\n     * @emits WaveSurfer#drawer-created\r\n     */\r\n    createDrawer() {\r\n        this.drawer = new this.Drawer(this.container, this.params);\r\n        this.drawer.init();\r\n        this.fireEvent('drawer-created', this.drawer);\r\n\r\n        if (this.params.responsive !== false) {\r\n            window.addEventListener('resize', this._onResize, true);\r\n            window.addEventListener('orientationchange', this._onResize, true);\r\n        }\r\n\r\n        this.drawer.on('redraw', () => {\r\n            this.drawBuffer();\r\n            this.drawer.progress(this.backend.getPlayedPercents());\r\n        });\r\n\r\n        // Click-to-seek\r\n        this.drawer.on('click', (e, progress) => {\r\n            // setTimeout(() => this.seekTo(progress), 0);\r\n            setTimeout(() => {\r\n                const oldScrollParent = this.params.scrollParent;\r\n                this.params.scrollParent = false;\r\n                this.fireEvent('click', progress * this.getDuration())\r\n                this.params.scrollParent = oldScrollParent;\r\n            }, 0);\r\n        });\r\n\r\n        // Relay the scroll event from the drawer\r\n        this.drawer.on('scroll', e => {\r\n            if (this.params.partialRender) {\r\n                this.drawBuffer();\r\n            }\r\n            this.fireEvent('scroll', e);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Create the backend\r\n     *\r\n     * @private\r\n     * @emits WaveSurfer#backend-created\r\n     */\r\n    createBackend() {\r\n        if (this.backend) {\r\n            this.backend.destroy();\r\n        }\r\n\r\n        // Back compat\r\n        if (this.params.backend == 'AudioElement') {\r\n            this.params.backend = 'MediaElement';\r\n        }\r\n\r\n        if (\r\n            this.params.backend == 'WebAudio' &&\r\n            !this.Backend.prototype.supportsWebAudio.call(null)\r\n        ) {\r\n            this.params.backend = 'MediaElement';\r\n        }\r\n\r\n        this.backend = new this.Backend(this.params);\r\n        this.backend.init();\r\n        this.fireEvent('backend-created', this.backend);\r\n\r\n        this.backend.on('finish', () => {\r\n            this.drawer.progress(this.backend.getPlayedPercents());\r\n            this.fireEvent('finish');\r\n        });\r\n        this.backend.on('play', () => this.fireEvent('play'));\r\n        this.backend.on('pause', () => this.fireEvent('pause'));\r\n\r\n        this.backend.on('audioprocess', time => {\r\n            this.drawer.progress(this.backend.getPlayedPercents());\r\n            this.fireEvent('audioprocess', time);\r\n        });\r\n\r\n        // only needed for MediaElement backend\r\n        if (this.params.backend === 'MediaElement') {\r\n            this.backend.on('seek', () => {\r\n                this.drawer.progress(this.backend.getPlayedPercents());\r\n            });\r\n\r\n            this.backend.on('volume', () => {\r\n                let newVolume = this.getVolume();\r\n                this.fireEvent('volume', newVolume);\r\n\r\n                if (this.backend.isMuted !== this.isMuted) {\r\n                    this.isMuted = this.backend.isMuted;\r\n                    this.fireEvent('mute', this.isMuted);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create the peak cache\r\n     *\r\n     * @private\r\n     */\r\n    createPeakCache() {\r\n        if (this.params.partialRender) {\r\n            this.peakCache = new PeakCache();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the duration of the audio clip\r\n     *\r\n     * @example const duration = wavesurfer.getDuration();\r\n     * @return {number} Duration in seconds\r\n     */\r\n    getDuration() {\r\n        return this.backend.getDuration();\r\n    }\r\n\r\n    /**\r\n     * Get the current playback position\r\n     *\r\n     * @example const currentTime = wavesurfer.getCurrentTime();\r\n     * @return {number} Playback position in seconds\r\n     */\r\n    getCurrentTime() {\r\n        return this.backend.getCurrentTime();\r\n    }\r\n\r\n    /**\r\n     * Set the current play time in seconds.\r\n     *\r\n     * @param {number} seconds A positive number in seconds. E.g. 10 means 10\r\n     * seconds, 60 means 1 minute\r\n     */\r\n    setCurrentTime(seconds) {\r\n        if (seconds >= this.getDuration()) {\r\n            this.seekTo(1);\r\n        } else {\r\n            this.seekTo(seconds / this.getDuration());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Starts playback from the current position. Optional start and end\r\n     * measured in seconds can be used to set the range of audio to play.\r\n     *\r\n     * @param {?number} start Position to start at\r\n     * @param {?number} end Position to end at\r\n     * @emits WaveSurfer#interaction\r\n     * @return {Promise} Result of the backend play method\r\n     * @example\r\n     * // play from second 1 to 5\r\n     * wavesurfer.play(1, 5);\r\n     */\r\n    play(start, end) {\r\n        this.fireEvent('interaction', () => this.play(start, end));\r\n        return this.backend.play(start, end);\r\n    }\r\n\r\n    /**\r\n     * Stops and pauses playback\r\n     *\r\n     * @example wavesurfer.pause();\r\n     * @return {Promise} Result of the backend pause method\r\n     */\r\n    pause() {\r\n        if (!this.backend.isPaused()) {\r\n            return this.backend.pause();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Toggle playback\r\n     *\r\n     * @example wavesurfer.playPause();\r\n     * @return {Promise} Result of the backend play or pause method\r\n     */\r\n    playPause() {\r\n        return this.backend.isPaused() ? this.play() : this.pause();\r\n    }\r\n\r\n    /**\r\n     * Get the current playback state\r\n     *\r\n     * @example const isPlaying = wavesurfer.isPlaying();\r\n     * @return {boolean} False if paused, true if playing\r\n     */\r\n    isPlaying() {\r\n        return !this.backend.isPaused();\r\n    }\r\n\r\n    /**\r\n     * Skip backward\r\n     *\r\n     * @param {?number} seconds Amount to skip back, if not specified `skipLength`\r\n     * is used\r\n     * @example wavesurfer.skipBackward();\r\n     */\r\n    skipBackward(seconds) {\r\n        this.skip(-seconds || -this.params.skipLength);\r\n    }\r\n\r\n    /**\r\n     * Skip forward\r\n     *\r\n     * @param {?number} seconds Amount to skip back, if not specified `skipLength`\r\n     * is used\r\n     * @example wavesurfer.skipForward();\r\n     */\r\n    skipForward(seconds) {\r\n        this.skip(seconds || this.params.skipLength);\r\n    }\r\n\r\n    /**\r\n     * Skip a number of seconds from the current position (use a negative value\r\n     * to go backwards).\r\n     *\r\n     * @param {number} offset Amount to skip back or forwards\r\n     * @example\r\n     * // go back 2 seconds\r\n     * wavesurfer.skip(-2);\r\n     */\r\n    skip(offset) {\r\n        const duration = this.getDuration() || 1;\r\n        let position = this.getCurrentTime() || 0;\r\n        position = Math.max(0, Math.min(duration, position + (offset || 0)));\r\n        this.seekAndCenter(position / duration);\r\n    }\r\n\r\n    /**\r\n     * Seeks to a position and centers the view\r\n     *\r\n     * @param {number} progress Between 0 (=beginning) and 1 (=end)\r\n     * @example\r\n     * // seek and go to the middle of the audio\r\n     * wavesurfer.seekTo(0.5);\r\n     */\r\n    seekAndCenter(progress) {\r\n        this.seekTo(progress);\r\n        this.drawer.recenter(progress);\r\n    }\r\n\r\n    /**\r\n     * Seeks to a position\r\n     *\r\n     * @param {number} progress Between 0 (=beginning) and 1 (=end)\r\n     * @emits WaveSurfer#interaction\r\n     * @emits WaveSurfer#seek\r\n     * @example\r\n     * // seek to the middle of the audio\r\n     * wavesurfer.seekTo(0.5);\r\n     */\r\n    seekTo(progress) {\r\n        // return an error if progress is not a number between 0 and 1\r\n        if (\r\n            typeof progress !== 'number' ||\r\n            !isFinite(progress) ||\r\n            progress < 0 ||\r\n            progress > 1\r\n        ) {\r\n            throw new Error(\r\n                'Error calling wavesurfer.seekTo, parameter must be a number between 0 and 1!'\r\n            );\r\n        }\r\n        this.fireEvent('interaction', () => this.seekTo(progress));\r\n\r\n        const paused = this.backend.isPaused();\r\n        // avoid draw wrong position while playing backward seeking\r\n        if (!paused) {\r\n            this.backend.pause();\r\n        }\r\n        // avoid small scrolls while paused seeking\r\n        const oldScrollParent = this.params.scrollParent;\r\n        this.params.scrollParent = false;\r\n        this.backend.seekTo(progress * this.getDuration());\r\n        this.drawer.progress(progress);\r\n\r\n        if (!paused) {\r\n            this.backend.play();\r\n        }\r\n        this.params.scrollParent = oldScrollParent;\r\n        this.fireEvent('seek', progress);\r\n    }\r\n\r\n    /**\r\n     * Stops and goes to the beginning.\r\n     *\r\n     * @example wavesurfer.stop();\r\n     */\r\n    stop() {\r\n        this.pause();\r\n        this.seekTo(0);\r\n        this.drawer.progress(0);\r\n    }\r\n\r\n    /**\r\n     * Sets the ID of the audio device to use for output and returns a Promise.\r\n     *\r\n     * @param {string} deviceId String value representing underlying output\r\n     * device\r\n     * @returns {Promise} `Promise` that resolves to `undefined` when there are\r\n     * no errors detected.\r\n     */\r\n    setSinkId(deviceId) {\r\n        return this.backend.setSinkId(deviceId);\r\n    }\r\n\r\n    /**\r\n     * Set the playback volume.\r\n     *\r\n     * @param {number} newVolume A value between 0 and 1, 0 being no\r\n     * volume and 1 being full volume.\r\n     * @emits WaveSurfer#volume\r\n     */\r\n    setVolume(newVolume) {\r\n        this.backend.setVolume(newVolume);\r\n        this.fireEvent('volume', newVolume);\r\n    }\r\n\r\n    /**\r\n     * Get the playback volume.\r\n     *\r\n     * @return {number} A value between 0 and 1, 0 being no\r\n     * volume and 1 being full volume.\r\n     */\r\n    getVolume() {\r\n        return this.backend.getVolume();\r\n    }\r\n\r\n    /**\r\n     * Set the playback rate.\r\n     *\r\n     * @param {number} rate A positive number. E.g. 0.5 means half the normal\r\n     * speed, 2 means double speed and so on.\r\n     * @example wavesurfer.setPlaybackRate(2);\r\n     */\r\n    setPlaybackRate(rate) {\r\n        this.backend.setPlaybackRate(rate);\r\n    }\r\n\r\n    /**\r\n     * Get the playback rate.\r\n     *\r\n     * @return {number} The current playback rate.\r\n     */\r\n    getPlaybackRate() {\r\n        return this.backend.getPlaybackRate();\r\n    }\r\n\r\n    /**\r\n     * Toggle the volume on and off. If not currently muted it will save the\r\n     * current volume value and turn the volume off. If currently muted then it\r\n     * will restore the volume to the saved value, and then rest the saved\r\n     * value.\r\n     *\r\n     * @example wavesurfer.toggleMute();\r\n     */\r\n    toggleMute() {\r\n        this.setMute(!this.isMuted);\r\n    }\r\n\r\n    /**\r\n     * Enable or disable muted audio\r\n     *\r\n     * @param {boolean} mute Specify `true` to mute audio.\r\n     * @emits WaveSurfer#volume\r\n     * @emits WaveSurfer#mute\r\n     * @example\r\n     * // unmute\r\n     * wavesurfer.setMute(false);\r\n     * console.log(wavesurfer.getMute()) // logs false\r\n     */\r\n    setMute(mute) {\r\n        // ignore all muting requests if the audio is already in that state\r\n        if (mute === this.isMuted) {\r\n            this.fireEvent('mute', this.isMuted);\r\n            return;\r\n        }\r\n\r\n        if (mute) {\r\n            // If currently not muted then save current volume,\r\n            // turn off the volume and update the mute properties\r\n            this.savedVolume = this.backend.getVolume();\r\n            this.backend.setVolume(0);\r\n            this.isMuted = true;\r\n            this.fireEvent('volume', 0);\r\n        } else {\r\n            // If currently muted then restore to the saved volume\r\n            // and update the mute properties\r\n            this.backend.setVolume(this.savedVolume);\r\n            this.isMuted = false;\r\n            this.fireEvent('volume', this.savedVolume);\r\n        }\r\n        this.fireEvent('mute', this.isMuted);\r\n    }\r\n\r\n    /**\r\n     * Get the current mute status.\r\n     *\r\n     * @example const isMuted = wavesurfer.getMute();\r\n     * @return {boolean} Current mute status\r\n     */\r\n    getMute() {\r\n        return this.isMuted;\r\n    }\r\n\r\n    /**\r\n     * Get the list of current set filters as an array.\r\n     *\r\n     * Filters must be set with setFilters method first\r\n     *\r\n     * @return {array} List of enabled filters\r\n     */\r\n    getFilters() {\r\n        return this.backend.filters || [];\r\n    }\r\n\r\n    /**\r\n     * Toggles `scrollParent` and redraws\r\n     *\r\n     * @example wavesurfer.toggleScroll();\r\n     */\r\n    toggleScroll() {\r\n        this.params.scrollParent = !this.params.scrollParent;\r\n        this.drawBuffer();\r\n    }\r\n\r\n    /**\r\n     * Toggle mouse interaction\r\n     *\r\n     * @example wavesurfer.toggleInteraction();\r\n     */\r\n    toggleInteraction() {\r\n        this.params.interact = !this.params.interact;\r\n    }\r\n\r\n    /**\r\n     * Get the fill color of the waveform after the cursor.\r\n     *\r\n     * @return {string} A CSS color string.\r\n     */\r\n    getWaveColor() {\r\n        return this.params.waveColor;\r\n    }\r\n\r\n    /**\r\n     * Set the fill color of the waveform after the cursor.\r\n     *\r\n     * @param {string} color A CSS color string.\r\n     * @example wavesurfer.setWaveColor('#ddd');\r\n     */\r\n    setWaveColor(color) {\r\n        this.params.waveColor = color;\r\n        this.drawBuffer();\r\n    }\r\n\r\n    /**\r\n     * Get the fill color of the waveform behind the cursor.\r\n     *\r\n     * @return {string} A CSS color string.\r\n     */\r\n    getProgressColor() {\r\n        return this.params.progressColor;\r\n    }\r\n\r\n    /**\r\n     * Set the fill color of the waveform behind the cursor.\r\n     *\r\n     * @param {string} color A CSS color string.\r\n     * @example wavesurfer.setProgressColor('#400');\r\n     */\r\n    setProgressColor(color) {\r\n        this.params.progressColor = color;\r\n        this.drawBuffer();\r\n    }\r\n\r\n    /**\r\n     * Get the background color of the waveform container.\r\n     *\r\n     * @return {string} A CSS color string.\r\n     */\r\n    getBackgroundColor() {\r\n        return this.params.backgroundColor;\r\n    }\r\n\r\n    /**\r\n     * Set the background color of the waveform container.\r\n     *\r\n     * @param {string} color A CSS color string.\r\n     * @example wavesurfer.setBackgroundColor('#FF00FF');\r\n     */\r\n    setBackgroundColor(color) {\r\n        this.params.backgroundColor = color;\r\n        util.style(this.container, {\r\n            background: this.params.backgroundColor\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get the fill color of the cursor indicating the playhead\r\n     * position.\r\n     *\r\n     * @return {string} A CSS color string.\r\n     */\r\n    getCursorColor() {\r\n        return this.params.cursorColor;\r\n    }\r\n\r\n    /**\r\n     * Set the fill color of the cursor indicating the playhead\r\n     * position.\r\n     *\r\n     * @param {string} color A CSS color string.\r\n     * @example wavesurfer.setCursorColor('#222');\r\n     */\r\n    setCursorColor(color) {\r\n        this.params.cursorColor = color;\r\n        this.drawer.updateCursor();\r\n    }\r\n\r\n    /**\r\n     * Get the height of the waveform.\r\n     *\r\n     * @return {number} Height measured in pixels.\r\n     */\r\n    getHeight() {\r\n        return this.params.height;\r\n    }\r\n\r\n    /**\r\n     * Set the height of the waveform.\r\n     *\r\n     * @param {number} height Height measured in pixels.\r\n     * @example wavesurfer.setHeight(200);\r\n     */\r\n    setHeight(height) {\r\n        this.params.height = height;\r\n        this.drawer.setHeight(height * this.params.pixelRatio);\r\n        this.drawBuffer();\r\n    }\r\n\r\n    /**\r\n     * Get the correct peaks for current wave view-port and render wave\r\n     *\r\n     * @private\r\n     * @emits WaveSurfer#redraw\r\n     */\r\n    drawBuffer() {\r\n        const nominalWidth = Math.round(\r\n            this.getDuration() *\r\n            this.params.minPxPerSec *\r\n            this.params.pixelRatio\r\n        );\r\n        const parentWidth = this.drawer.getWidth();\r\n        let width = nominalWidth;\r\n        // always start at 0 after zooming for scrolling : issue redraw left part\r\n        let start = 0;\r\n        let end = Math.max(start + parentWidth, width);\r\n        // Fill container\r\n        if (\r\n            this.params.fillParent &&\r\n            (!this.params.scrollParent || nominalWidth < parentWidth)\r\n        ) {\r\n            width = parentWidth;\r\n            start = 0;\r\n            end = width;\r\n        }\r\n\r\n        let peaks;\r\n        if (this.params.partialRender) {\r\n            const newRanges = this.peakCache.addRangeToPeakCache(\r\n                width,\r\n                start,\r\n                end\r\n            );\r\n            let i;\r\n            for (i = 0; i < newRanges.length; i++) {\r\n                peaks = this.backend.getPeaks(\r\n                    width,\r\n                    newRanges[i][0],\r\n                    newRanges[i][1]\r\n                );\r\n                this.drawer.drawPeaks(\r\n                    peaks,\r\n                    width,\r\n                    newRanges[i][0],\r\n                    newRanges[i][1]\r\n                );\r\n            }\r\n        } else {\r\n            peaks = this.backend.getPeaks(width, start, end);\r\n            this.drawer.drawPeaks(peaks, width, start, end);\r\n        }\r\n        this.fireEvent('redraw', peaks, width);\r\n    }\r\n\r\n    /**\r\n     * Horizontally zooms the waveform in and out. It also changes the parameter\r\n     * `minPxPerSec` and enables the `scrollParent` option. Calling the function\r\n     * with a falsey parameter will reset the zoom state.\r\n     *\r\n     * @param {?number} pxPerSec Number of horizontal pixels per second of\r\n     * audio, if none is set the waveform returns to unzoomed state\r\n     * @emits WaveSurfer#zoom\r\n     * @example wavesurfer.zoom(20);\r\n     */\r\n    zoom(pxPerSec) {\r\n        if (!pxPerSec) {\r\n            this.params.minPxPerSec = this.defaultParams.minPxPerSec;\r\n            this.params.scrollParent = false;\r\n        } else {\r\n            this.params.minPxPerSec = pxPerSec;\r\n            this.params.scrollParent = true;\r\n        }\r\n\r\n        this.drawBuffer();\r\n        this.drawer.progress(this.backend.getPlayedPercents());\r\n\r\n        this.drawer.recenter(this.getCurrentTime() / this.getDuration());\r\n        this.fireEvent('zoom', pxPerSec);\r\n    }\r\n\r\n    /**\r\n     * Decode buffer and load\r\n     *\r\n     * @private\r\n     * @param {ArrayBuffer} arraybuffer Buffer to process\r\n     */\r\n    loadArrayBuffer(arraybuffer) {\r\n        this.decodeArrayBuffer(arraybuffer, data => {\r\n            if (!this.isDestroyed) {\r\n                this.loadDecodedBuffer(data);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Directly load an externally decoded AudioBuffer\r\n     *\r\n     * @private\r\n     * @param {AudioBuffer} buffer Buffer to process\r\n     * @emits WaveSurfer#ready\r\n     */\r\n    loadDecodedBuffer(buffer) {\r\n        this.backend.load(buffer);\r\n        this.drawBuffer();\r\n        this.fireEvent('ready');\r\n        this.isReady = true;\r\n    }\r\n\r\n    /**\r\n     * Loads audio data from a Blob or File object\r\n     *\r\n     * @param {Blob|File} blob Audio data\r\n     * @example\r\n     */\r\n    loadBlob(blob) {\r\n        // Create file reader\r\n        const reader = new FileReader();\r\n        reader.addEventListener('progress', e => this.onProgress(e));\r\n        reader.addEventListener('load', e =>\r\n            this.loadArrayBuffer(e.target.result)\r\n        );\r\n        reader.addEventListener('error', () =>\r\n            this.fireEvent('error', 'Error reading file')\r\n        );\r\n        reader.readAsArrayBuffer(blob);\r\n        this.empty();\r\n    }\r\n\r\n    /**\r\n     * Loads audio and re-renders the waveform.\r\n     *\r\n     * @param {string|HTMLMediaElement} url The url of the audio file or the\r\n     * audio element with the audio\r\n     * @param {number[]|Number.<Array[]>} peaks Wavesurfer does not have to decode\r\n     * the audio to render the waveform if this is specified\r\n     * @param {?string} preload (Use with backend `MediaElement`)\r\n     * `'none'|'metadata'|'auto'` Preload attribute for the media element\r\n     * @param {?number} duration The duration of the audio. This is used to\r\n     * render the peaks data in the correct size for the audio duration (as\r\n     * befits the current `minPxPerSec` and zoom value) without having to decode\r\n     * the audio.\r\n     * @returns {void}\r\n     * @example\r\n     * // using ajax or media element to load (depending on backend)\r\n     * wavesurfer.load('http://example.com/demo.wav');\r\n     *\r\n     * // setting preload attribute with media element backend and supplying\r\n     * // peaks\r\n     * wavesurfer.load(\r\n     *   'http://example.com/demo.wav',\r\n     *   [0.0218, 0.0183, 0.0165, 0.0198, 0.2137, 0.2888],\r\n     *   true\r\n     * );\r\n     */\r\n    load(url, peaks, preload, duration) {\r\n        this.empty();\r\n\r\n        if (preload) {\r\n            // check whether the preload attribute will be usable and if not log\r\n            // a warning listing the reasons why not and nullify the variable\r\n            const preloadIgnoreReasons = {\r\n                \"Preload is not 'auto', 'none' or 'metadata'\": ['auto', 'metadata', 'none'].indexOf(preload) === -1,\r\n                'Peaks are not provided': !peaks,\r\n                'Backend is not of type MediaElement': this.params.backend !== 'MediaElement',\r\n                'Url is not of type string': typeof url !== 'string'\r\n            };\r\n            const activeReasons = Object.keys(preloadIgnoreReasons).filter(\r\n                reason => preloadIgnoreReasons[reason]\r\n            );\r\n            if (activeReasons.length) {\r\n                // eslint-disable-next-line no-console\r\n                console.warn(\r\n                    'Preload parameter of wavesurfer.load will be ignored because:\\n\\t- ' +\r\n                    activeReasons.join('\\n\\t- ')\r\n                );\r\n                // stop invalid values from being used\r\n                preload = null;\r\n            }\r\n        }\r\n\r\n        switch (this.params.backend) {\r\n            case 'WebAudio':\r\n                return this.loadBuffer(url, peaks, duration);\r\n            case 'MediaElement':\r\n                return this.loadMediaElement(url, peaks, preload, duration);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Loads audio using Web Audio buffer backend.\r\n     *\r\n     * @private\r\n     * @param {string} url URL of audio file\r\n     * @param {number[]|Number.<Array[]>} peaks Peaks data\r\n     * @param {?number} duration Optional duration of audio file\r\n     * @returns {void}\r\n     */\r\n    loadBuffer(url, peaks, duration) {\r\n        const load = action => {\r\n            if (action) {\r\n                this.tmpEvents.push(this.once('ready', action));\r\n            }\r\n            return this.getArrayBuffer(url, data => this.loadArrayBuffer(data));\r\n        };\r\n\r\n        if (peaks) {\r\n            this.backend.setPeaks(peaks, duration);\r\n            this.drawBuffer();\r\n            this.tmpEvents.push(this.once('interaction', load));\r\n        } else {\r\n            return load();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Either create a media element, or load an existing media element.\r\n     *\r\n     * @private\r\n     * @param {string|HTMLMediaElement} urlOrElt Either a path to a media file, or an\r\n     * existing HTML5 Audio/Video Element\r\n     * @param {number[]|Number.<Array[]>} peaks Array of peaks. Required to bypass web audio\r\n     * dependency\r\n     * @param {?boolean} preload Set to true if the preload attribute of the\r\n     * audio element should be enabled\r\n     * @param {?number} duration Optional duration of audio file\r\n     */\r\n    loadMediaElement(urlOrElt, peaks, preload, duration) {\r\n        let url = urlOrElt;\r\n\r\n        if (typeof urlOrElt === 'string') {\r\n            this.backend.load(url, this.mediaContainer, peaks, preload);\r\n        } else {\r\n            const elt = urlOrElt;\r\n            this.backend.loadElt(elt, peaks);\r\n\r\n            // If peaks are not provided,\r\n            // url = element.src so we can get peaks with web audio\r\n            url = elt.src;\r\n        }\r\n\r\n        this.tmpEvents.push(\r\n            this.backend.once('canplay', () => {\r\n                this.drawBuffer();\r\n                this.fireEvent('ready');\r\n                this.isReady = true;\r\n            }),\r\n            this.backend.once('error', err => this.fireEvent('error', err))\r\n        );\r\n\r\n        // If no pre-decoded peaks provided or pre-decoded peaks are\r\n        // provided with forceDecode flag, attempt to download the\r\n        // audio file and decode it with Web Audio.\r\n        if (peaks) {\r\n            this.backend.setPeaks(peaks, duration);\r\n        }\r\n\r\n        if (\r\n            (!peaks || this.params.forceDecode) &&\r\n            this.backend.supportsWebAudio()\r\n        ) {\r\n            this.getArrayBuffer(url, arraybuffer => {\r\n                this.decodeArrayBuffer(arraybuffer, buffer => {\r\n                    this.backend.buffer = buffer;\r\n                    this.backend.setPeaks(null);\r\n                    this.drawBuffer();\r\n                    this.fireEvent('waveform-ready');\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Decode an array buffer and pass data to a callback\r\n     *\r\n     * @private\r\n     * @param {Object} arraybuffer The array buffer to decode\r\n     * @param {function} callback The function to call on complete\r\n     */\r\n    decodeArrayBuffer(arraybuffer, callback) {\r\n        this.arraybuffer = arraybuffer;\r\n\r\n        this.backend.decodeArrayBuffer(\r\n            arraybuffer,\r\n            data => {\r\n                // Only use the decoded data if we haven't been destroyed or\r\n                // another decode started in the meantime\r\n                if (!this.isDestroyed && this.arraybuffer == arraybuffer) {\r\n                    callback(data);\r\n                    this.arraybuffer = null;\r\n                }\r\n            },\r\n            () => this.fireEvent('error', 'Error decoding audiobuffer')\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Load an array buffer using ajax and pass the result to a callback\r\n     *\r\n     * @param {string} url The URL of the file object\r\n     * @param {function} callback The function to call on complete\r\n     * @returns {util.ajax} Ajax call\r\n     * @private\r\n     */\r\n    getArrayBuffer(url, callback) {\r\n        const ajax = util.ajax({\r\n            url: url,\r\n            responseType: 'arraybuffer',\r\n            xhr: this.params.xhr\r\n        });\r\n\r\n        this.currentAjax = ajax;\r\n\r\n        this.tmpEvents.push(\r\n            ajax.on('progress', e => {\r\n                this.onProgress(e);\r\n            }),\r\n            ajax.on('success', (data, e) => {\r\n                callback(data);\r\n                this.currentAjax = null;\r\n            }),\r\n            ajax.on('error', e => {\r\n                this.fireEvent('error', 'XHR error: ' + e.target.statusText);\r\n                this.currentAjax = null;\r\n            })\r\n        );\r\n\r\n        return ajax;\r\n    }\r\n\r\n    /**\r\n     * Called while the audio file is loading\r\n     *\r\n     * @private\r\n     * @param {Event} e Progress event\r\n     * @emits WaveSurfer#loading\r\n     */\r\n    onProgress(e) {\r\n        let percentComplete;\r\n        if (e.lengthComputable) {\r\n            percentComplete = e.loaded / e.total;\r\n        } else {\r\n            // Approximate progress with an asymptotic\r\n            // function, and assume downloads in the 1-3 MB range.\r\n            percentComplete = e.loaded / (e.loaded + 1000000);\r\n        }\r\n        this.fireEvent('loading', Math.round(percentComplete * 100), e.target);\r\n    }\r\n\r\n    /**\r\n     * Exports PCM data into a JSON array and opens in a new window.\r\n     *\r\n     * @param {number} length=1024 The scale in which to export the peaks. (Integer)\r\n     * @param {number} accuracy=10000 (Integer)\r\n     * @param {?boolean} noWindow Set to true to disable opening a new\r\n     * window with the JSON\r\n     * @param {number} start Start index\r\n     * @todo Update exportPCM to work with new getPeaks signature\r\n     * @return {string} JSON of peaks\r\n     */\r\n    exportPCM(length, accuracy, noWindow, start) {\r\n        length = length || 1024;\r\n        start = start || 0;\r\n        accuracy = accuracy || 10000;\r\n        noWindow = noWindow || false;\r\n        const peaks = this.backend.getPeaks(length, start);\r\n        const arr = [].map.call(\r\n            peaks,\r\n            val => Math.round(val * accuracy) / accuracy\r\n        );\r\n        const json = JSON.stringify(arr);\r\n        if (!noWindow) {\r\n            window.open(\r\n                'data:application/json;charset=utf-8,' +\r\n                encodeURIComponent(json)\r\n            );\r\n        }\r\n        return json;\r\n    }\r\n\r\n    /**\r\n     * Save waveform image as data URI.\r\n     *\r\n     * The default format is `'image/png'`. Other supported types are\r\n     * `'image/jpeg'` and `'image/webp'`.\r\n     *\r\n     * @param {string} format='image/png' A string indicating the image format.\r\n     * The default format type is `'image/png'`.\r\n     * @param {number} quality=1 A number between 0 and 1 indicating the image\r\n     * quality to use for image formats that use lossy compression such as\r\n     * `'image/jpeg'`` and `'image/webp'`.\r\n     * @param {string} type Image data type to return. Either 'dataURL' (default)\r\n     * or 'blob'.\r\n     * @return {string|string[]|Promise} When using `'dataURL'` type this returns\r\n     * a single data URL or an array of data URLs, one for each canvas. When using\r\n     * `'blob'` type this returns a `Promise` resolving with an array of `Blob`\r\n     * instances, one for each canvas.\r\n     */\r\n    exportImage(format, quality, type) {\r\n        if (!format) {\r\n            format = 'image/png';\r\n        }\r\n        if (!quality) {\r\n            quality = 1;\r\n        }\r\n        if (!type) {\r\n            type = 'dataURL';\r\n        }\r\n\r\n        return this.drawer.getImage(format, quality, type);\r\n    }\r\n\r\n    /**\r\n     * Cancel any ajax request currently in progress\r\n     */\r\n    cancelAjax() {\r\n        if (this.currentAjax) {\r\n            this.currentAjax.xhr.abort();\r\n            this.currentAjax = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    clearTmpEvents() {\r\n        this.tmpEvents.forEach(e => e.un());\r\n    }\r\n\r\n    /**\r\n     * Display empty waveform.\r\n     */\r\n    empty() {\r\n        if (!this.backend.isPaused()) {\r\n            this.stop();\r\n            this.backend.disconnectSource();\r\n        }\r\n        this.isReady = false;\r\n        this.cancelAjax();\r\n        this.clearTmpEvents();\r\n        this.drawer.progress(0);\r\n        this.drawer.setWidth(0);\r\n        this.drawer.drawPeaks({\r\n            length: this.drawer.getWidth()\r\n        }, 0);\r\n    }\r\n\r\n    /**\r\n     * Remove events, elements and disconnect WebAudio nodes.\r\n     *\r\n     * @emits WaveSurfer#destroy\r\n     */\r\n    destroy() {\r\n        this.destroyAllPlugins();\r\n        this.fireEvent('destroy');\r\n        this.cancelAjax();\r\n        this.clearTmpEvents();\r\n        this.unAll();\r\n        if (this.params.responsive !== false) {\r\n            window.removeEventListener('resize', this._onResize, true);\r\n            window.removeEventListener(\r\n                'orientationchange',\r\n                this._onResize,\r\n                true\r\n            );\r\n        }\r\n        this.backend.destroy();\r\n        this.drawer.destroy();\r\n        this.isDestroyed = true;\r\n        this.isReady = false;\r\n        this.arraybuffer = null;\r\n    }\r\n}","import Observer from './observer';\r\n\r\n/**\r\n * Perform an ajax request\r\n *\r\n * @param {Object} options AJAX options to use. See example below for options.\r\n * @returns {Observer} Observer instance\r\n *\r\n * @example\r\n * // default options\r\n * let options = {\r\n *     method: 'GET',\r\n *     url: undefined,\r\n *     responseType: 'json',\r\n *     xhr: {}\r\n * };\r\n *\r\n * // override default options\r\n * options.url = '../media/demo.wav';\r\n * options.responseType = 'arraybuffer';\r\n * options.xhr = {\r\n *     requestHeaders: [\r\n *         {\r\n *             key: 'Authorization',\r\n *             value: 'my-token'\r\n *         }\r\n *     ],\r\n *     withCredentials: true\r\n * };\r\n *\r\n * // make ajax call\r\n * let ajaxCall = util.ajax(options);\r\n * ajaxCall.on('progress', e => {\r\n *     console.log('progress', e);\r\n * });\r\n * ajaxCall.on('success', (data, e) => {\r\n *     console.log('success!', data);\r\n * });\r\n * ajaxCall.on('error', e => {\r\n *     console.warn('ajax error: ' + e.target.statusText);\r\n * });\r\n */\r\nexport default function ajax(options) {\r\n    const instance = new Observer();\r\n    const xhr = new XMLHttpRequest();\r\n    let fired100 = false;\r\n    xhr.open(options.method || 'GET', options.url, true);\r\n    xhr.responseType = options.responseType || 'json';\r\n\r\n    if (options.xhr) {\r\n        if (options.xhr.requestHeaders) {\r\n            // add custom request headers\r\n            options.xhr.requestHeaders.forEach(header => {\r\n                xhr.setRequestHeader(header.key, header.value);\r\n            });\r\n        }\r\n        if (options.xhr.withCredentials) {\r\n            // use credentials\r\n            xhr.withCredentials = true;\r\n        }\r\n    }\r\n\r\n    xhr.addEventListener('progress', e => {\r\n        instance.fireEvent('progress', e);\r\n        if (e.lengthComputable && e.loaded == e.total) {\r\n            fired100 = true;\r\n        }\r\n    });\r\n    xhr.addEventListener('load', e => {\r\n        if (!fired100) {\r\n            instance.fireEvent('progress', e);\r\n        }\r\n        instance.fireEvent('load', e);\r\n        if (200 == xhr.status || 206 == xhr.status) {\r\n            instance.fireEvent('success', xhr.response, e);\r\n        } else {\r\n            instance.fireEvent('error', e);\r\n        }\r\n    });\r\n    xhr.addEventListener('error', e => instance.fireEvent('error', e));\r\n    xhr.send();\r\n    instance.xhr = xhr;\r\n    return instance;\r\n}\r\n","/**\r\n * Get the largest value\r\n *\r\n * @param   {Array} values Array of numbers\r\n * @returns {Number} Largest number found\r\n * @example console.log(max([1, 2, 3])); // logs 3\r\n */\r\nexport default function max(values) {\r\n    let largest = -Infinity;\r\n    Object.keys(values).forEach(i => {\r\n        if (values[i] > largest) {\r\n            largest = values[i];\r\n        }\r\n    });\r\n    return largest;\r\n}\r\n","/**\r\n * Get the smallest value\r\n *\r\n * @param   {Array} values Array of numbers\r\n * @returns {Number} Smallest number found\r\n * @example console.log(min([1, 2, 3])); // logs 1\r\n */\r\nexport default function min(values) {\r\n    let smallest = Number(Infinity);\r\n    Object.keys(values).forEach(i => {\r\n        if (values[i] < smallest) {\r\n            smallest = values[i];\r\n        }\r\n    });\r\n    return smallest;\r\n}\r\n","/**\r\n * Extend an object shallowly with others\r\n *\r\n * @param {Object} dest The target object\r\n * @param {Object[]} sources The objects to use for extending\r\n *\r\n * @return {Object} Merged object\r\n */\r\nexport default function extend(dest, ...sources) {\r\n    sources.forEach(source => {\r\n        Object.keys(source).forEach(key => {\r\n            dest[key] = source[key];\r\n        });\r\n    });\r\n    return dest;\r\n}\r\n","import reqAnimationFrame from './request-animation-frame';\r\n\r\n/**\r\n * Create a function which will be called at the next requestAnimationFrame\r\n * cycle\r\n *\r\n * @param {function} func The function to call\r\n *\r\n * @return {func} The function wrapped within a requestAnimationFrame\r\n */\r\nexport default function frame(func) {\r\n    return (...args) => reqAnimationFrame(() => func(...args));\r\n}\r\n","/**\n * Returns a function, that, as long as it continues to be invoked, will not\n * be triggered. The function will be called after it stops being called for\n * N milliseconds. If `immediate` is passed, trigger the function on the\n * leading edge, instead of the trailing. The function also has a property 'clear' \n * that is a function which will clear the timer to prevent previously scheduled executions. \n *\n * @source underscore.js\n * @see http://unscriptable.com/2009/03/20/debouncing-javascript-methods/\n * @param {Function} function to wrap\n * @param {Number} timeout in ms (`100`)\n * @param {Boolean} whether to execute at the beginning (`false`)\n * @api public\n */\nfunction debounce(func, wait, immediate){\n  var timeout, args, context, timestamp, result;\n  if (null == wait) wait = 100;\n\n  function later() {\n    var last = Date.now() - timestamp;\n\n    if (last < wait && last >= 0) {\n      timeout = setTimeout(later, wait - last);\n    } else {\n      timeout = null;\n      if (!immediate) {\n        result = func.apply(context, args);\n        context = args = null;\n      }\n    }\n  };\n\n  var debounced = function(){\n    context = this;\n    args = arguments;\n    timestamp = Date.now();\n    var callNow = immediate && !timeout;\n    if (!timeout) timeout = setTimeout(later, wait);\n    if (callNow) {\n      result = func.apply(context, args);\n      context = args = null;\n    }\n\n    return result;\n  };\n\n  debounced.clear = function() {\n    if (timeout) {\n      clearTimeout(timeout);\n      timeout = null;\n    }\n  };\n  \n  debounced.flush = function() {\n    if (timeout) {\n      result = func.apply(context, args);\n      context = args = null;\n      \n      clearTimeout(timeout);\n      timeout = null;\n    }\n  };\n\n  return debounced;\n};\n\n// Adds compatibility for ES modules\ndebounce.debounce = debounce;\n\nmodule.exports = debounce;\n","/**\r\n * Stops propagation of click event and removes event listener\r\n *\r\n * @private\r\n * @param {object} event The click event\r\n */\r\nfunction preventClickHandler(event) {\r\n    event.stopPropagation();\r\n    document.body.removeEventListener('click', preventClickHandler, true);\r\n}\r\n\r\n/**\r\n * Starts listening for click event and prevent propagation\r\n *\r\n * @param {object} values Values\r\n */\r\nexport default function preventClick(values) {\r\n    document.body.addEventListener('click', preventClickHandler, true);\r\n}\r\n","import Drawer from './drawer';\r\nimport * as util from './util';\r\nimport CanvasEntry from './drawer.canvasentry';\r\n\r\n/**\r\n * MultiCanvas renderer for wavesurfer. Is currently the default and sole\r\n * builtin renderer.\r\n *\r\n * A `MultiCanvas` consists of one or more `CanvasEntry` instances, depending\r\n * on the zoom level.\r\n */\r\nexport default class MultiCanvas extends Drawer {\r\n    /**\r\n     * @param {HTMLElement} container The container node of the wavesurfer instance\r\n     * @param {WavesurferParams} params The wavesurfer initialisation options\r\n     */\r\n    constructor(container, params) {\r\n        super(container, params);\r\n\r\n        /**\r\n         * @type {number}\r\n         * @private\r\n         */\r\n        this.maxCanvasWidth = params.maxCanvasWidth;\r\n\r\n        /**\r\n         * @private\r\n         * @type {number}\r\n         */\r\n        this.maxCanvasElementWidth = Math.round(\r\n            params.maxCanvasWidth / params.pixelRatio\r\n        );\r\n\r\n        /**\r\n         * Whether or not the progress wave is rendered. If the `waveColor`\r\n         * and `progressColor` are the same color it is not.\r\n         *\r\n         * @type {boolean}\r\n         */\r\n        this.hasProgressCanvas = params.waveColor != params.progressColor;\r\n\r\n        /**\r\n         * @private\r\n         * @type {number}\r\n         */\r\n        this.halfPixel = 0.5 / params.pixelRatio;\r\n\r\n        /**\r\n         * List of `CanvasEntry` instances.\r\n         *\r\n         * @private\r\n         * @type {Array}\r\n         */\r\n        this.canvases = [];\r\n\r\n        /**\r\n         * @private\r\n         * @type {HTMLElement}\r\n         */\r\n        this.progressWave = null;\r\n\r\n        /**\r\n         * Class used to generate entries.\r\n         *\r\n         * @private\r\n         * @type {function}\r\n         */\r\n        this.EntryClass = CanvasEntry;\r\n\r\n        /**\r\n         * Overlap added between entries to prevent vertical white stripes\r\n         * between `canvas` elements.\r\n         *\r\n         * @type {number}\r\n         */\r\n        this.overlap = 2 * Math.ceil(params.pixelRatio / 2);\r\n    }\r\n\r\n    /**\r\n     * Initialize the drawer\r\n     */\r\n    init() {\r\n        this.createWrapper();\r\n        this.createElements();\r\n    }\r\n\r\n    /**\r\n     * Create the canvas elements and style them\r\n     *\r\n     * @private\r\n     */\r\n    createElements() {\r\n        this.progressWave = this.wrapper.appendChild(\r\n            this.style(document.createElement('wave'), {\r\n                position: 'absolute',\r\n                zIndex: 3,\r\n                left: 0,\r\n                top: 0,\r\n                bottom: 0,\r\n                overflow: 'hidden',\r\n                width: '0',\r\n                display: 'none',\r\n                boxSizing: 'border-box',\r\n                borderRightStyle: 'solid',\r\n                pointerEvents: 'none'\r\n            })\r\n        );\r\n\r\n        this.addCanvas();\r\n        this.updateCursor();\r\n    }\r\n\r\n    /**\r\n     * Update cursor style\r\n     */\r\n    updateCursor() {\r\n        this.style(this.progressWave, {\r\n            borderRightWidth: this.params.cursorWidth + 'px',\r\n            borderRightColor: this.params.cursorColor\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Adjust to the updated size by adding or removing canvases\r\n     */\r\n    updateSize() {\r\n        const totalWidth = Math.round(this.width / this.params.pixelRatio);\r\n        const requiredCanvases = Math.ceil(\r\n            totalWidth / (this.maxCanvasElementWidth + this.overlap)\r\n        );\r\n\r\n        // add required canvases\r\n        while (this.canvases.length < requiredCanvases) {\r\n            this.addCanvas();\r\n        }\r\n\r\n        // remove older existing canvases, if any\r\n        while (this.canvases.length > requiredCanvases) {\r\n            this.removeCanvas();\r\n        }\r\n\r\n        let canvasWidth = this.maxCanvasWidth + this.overlap;\r\n        const lastCanvas = this.canvases.length - 1;\r\n        this.canvases.forEach((entry, i) => {\r\n            if (i == lastCanvas) {\r\n                canvasWidth = this.width - this.maxCanvasWidth * lastCanvas;\r\n            }\r\n            this.updateDimensions(entry, canvasWidth, this.height);\r\n\r\n            entry.clearWave();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Add a canvas to the canvas list\r\n     *\r\n     * @private\r\n     */\r\n    addCanvas() {\r\n        const entry = new this.EntryClass();\r\n        entry.hasProgressCanvas = this.hasProgressCanvas;\r\n        entry.halfPixel = this.halfPixel;\r\n        const leftOffset = this.maxCanvasElementWidth * this.canvases.length;\r\n\r\n        // wave\r\n        entry.initWave(\r\n            this.wrapper.appendChild(\r\n                this.style(document.createElement('canvas'), {\r\n                    position: 'absolute',\r\n                    zIndex: 2,\r\n                    left: leftOffset + 'px',\r\n                    top: 0,\r\n                    bottom: 0,\r\n                    height: '100%',\r\n                    pointerEvents: 'none'\r\n                })\r\n            )\r\n        );\r\n\r\n        // progress\r\n        if (this.hasProgressCanvas) {\r\n            entry.initProgress(\r\n                this.progressWave.appendChild(\r\n                    this.style(document.createElement('canvas'), {\r\n                        position: 'absolute',\r\n                        left: leftOffset + 'px',\r\n                        top: 0,\r\n                        bottom: 0,\r\n                        height: '100%'\r\n                    })\r\n                )\r\n            );\r\n        }\r\n\r\n        this.canvases.push(entry);\r\n    }\r\n\r\n    /**\r\n     * Pop single canvas from the list\r\n     *\r\n     * @private\r\n     */\r\n    removeCanvas() {\r\n        let lastEntry = this.canvases[this.canvases.length - 1];\r\n\r\n        // wave\r\n        lastEntry.wave.parentElement.removeChild(lastEntry.wave);\r\n\r\n        // progress\r\n        if (this.hasProgressCanvas) {\r\n            lastEntry.progress.parentElement.removeChild(lastEntry.progress);\r\n        }\r\n\r\n        // cleanup\r\n        if (lastEntry) {\r\n            lastEntry.destroy();\r\n            lastEntry = null;\r\n        }\r\n\r\n        this.canvases.pop();\r\n    }\r\n\r\n    /**\r\n     * Update the dimensions of a canvas element\r\n     *\r\n     * @private\r\n     * @param {CanvasEntry} entry Target entry\r\n     * @param {number} width The new width of the element\r\n     * @param {number} height The new height of the element\r\n     */\r\n    updateDimensions(entry, width, height) {\r\n        const elementWidth = Math.round(width / this.params.pixelRatio);\r\n        const totalWidth = Math.round(this.width / this.params.pixelRatio);\r\n\r\n        // update canvas dimensions\r\n        entry.updateDimensions(elementWidth, totalWidth, width, height);\r\n\r\n        // style element\r\n        this.style(this.progressWave, { display: 'block' });\r\n    }\r\n\r\n    /**\r\n     * Clear the whole multi-canvas\r\n     */\r\n    clearWave() {\r\n        this.canvases.forEach(entry => entry.clearWave());\r\n    }\r\n\r\n    /**\r\n     * Draw a waveform with bars\r\n     *\r\n     * @param {number[]|Number.<Array[]>} peaks Can also be an array of arrays\r\n     * for split channel rendering\r\n     * @param {number} channelIndex The index of the current channel. Normally\r\n     * should be 0. Must be an integer.\r\n     * @param {number} start The x-offset of the beginning of the area that\r\n     * should be rendered\r\n     * @param {number} end The x-offset of the end of the area that should be\r\n     * rendered\r\n     * @returns {void}\r\n     */\r\n    drawBars(peaks, channelIndex, start, end) {\r\n        return this.prepareDraw(\r\n            peaks,\r\n            channelIndex,\r\n            start,\r\n            end,\r\n            ({ absmax, hasMinVals, height, offsetY, halfH, peaks }) => {\r\n                // if drawBars was called within ws.empty we don't pass a start and\r\n                // don't want anything to happen\r\n                if (start === undefined) {\r\n                    return;\r\n                }\r\n                // Skip every other value if there are negatives.\r\n                const peakIndexScale = hasMinVals ? 2 : 1;\r\n                const length = peaks.length / peakIndexScale;\r\n                const bar = this.params.barWidth * this.params.pixelRatio;\r\n                const gap =\r\n                    this.params.barGap === null\r\n                        ? Math.max(this.params.pixelRatio, ~~(bar / 2))\r\n                        : Math.max(\r\n                              this.params.pixelRatio,\r\n                              this.params.barGap * this.params.pixelRatio\r\n                          );\r\n                const step = bar + gap;\r\n\r\n                const scale = length / this.width;\r\n                const first = start;\r\n                const last = end;\r\n                let i = first;\r\n\r\n                for (i; i < last; i += step) {\r\n                    const peak =\r\n                        peaks[Math.floor(i * scale * peakIndexScale)] || 0;\r\n                    const h = Math.round((peak / absmax) * halfH);\r\n                    this.fillRect(\r\n                        i + this.halfPixel,\r\n                        halfH - h + offsetY,\r\n                        bar + this.halfPixel,\r\n                        h * 2\r\n                    );\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Draw a waveform\r\n     *\r\n     * @param {number[]|Number.<Array[]>} peaks Can also be an array of arrays\r\n     * for split channel rendering\r\n     * @param {number} channelIndex The index of the current channel. Normally\r\n     * should be 0\r\n     * @param {number?} start The x-offset of the beginning of the area that\r\n     * should be rendered (If this isn't set only a flat line is rendered)\r\n     * @param {number?} end The x-offset of the end of the area that should be\r\n     * rendered\r\n     * @returns {void}\r\n     */\r\n    drawWave(peaks, channelIndex, start, end) {\r\n        return this.prepareDraw(\r\n            peaks,\r\n            channelIndex,\r\n            start,\r\n            end,\r\n            ({ absmax, hasMinVals, height, offsetY, halfH, peaks }) => {\r\n                if (!hasMinVals) {\r\n                    const reflectedPeaks = [];\r\n                    const len = peaks.length;\r\n                    let i = 0;\r\n                    for (i; i < len; i++) {\r\n                        reflectedPeaks[2 * i] = peaks[i];\r\n                        reflectedPeaks[2 * i + 1] = -peaks[i];\r\n                    }\r\n                    peaks = reflectedPeaks;\r\n                }\r\n\r\n                // if drawWave was called within ws.empty we don't pass a start and\r\n                // end and simply want a flat line\r\n                if (start !== undefined) {\r\n                    this.drawLine(peaks, absmax, halfH, offsetY, start, end);\r\n                }\r\n\r\n                // always draw a median line\r\n                this.fillRect(\r\n                    0,\r\n                    halfH + offsetY - this.halfPixel,\r\n                    this.width,\r\n                    this.halfPixel\r\n                );\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Tell the canvas entries to render their portion of the waveform\r\n     *\r\n     * @private\r\n     * @param {number[]} peaks Peaks data\r\n     * @param {number} absmax Maximum peak value (absolute)\r\n     * @param {number} halfH Half the height of the waveform\r\n     * @param {number} offsetY Offset to the top\r\n     * @param {number} start The x-offset of the beginning of the area that\r\n     * should be rendered\r\n     * @param {number} end The x-offset of the end of the area that\r\n     * should be rendered\r\n     */\r\n    drawLine(peaks, absmax, halfH, offsetY, start, end) {\r\n        this.canvases.forEach(entry => {\r\n            this.setFillStyles(entry);\r\n            entry.drawLines(peaks, absmax, halfH, offsetY, start, end);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Draw a rectangle on the multi-canvas\r\n     *\r\n     * @param {number} x X-position of the rectangle\r\n     * @param {number} y Y-position of the rectangle\r\n     * @param {number} width Width of the rectangle\r\n     * @param {number} height Height of the rectangle\r\n     */\r\n    fillRect(x, y, width, height) {\r\n        const startCanvas = Math.floor(x / this.maxCanvasWidth);\r\n        const endCanvas = Math.min(\r\n            Math.ceil((x + width) / this.maxCanvasWidth) + 1,\r\n            this.canvases.length\r\n        );\r\n        let i = startCanvas;\r\n        for (i; i < endCanvas; i++) {\r\n            const entry = this.canvases[i];\r\n            const leftOffset = i * this.maxCanvasWidth;\r\n\r\n            const intersection = {\r\n                x1: Math.max(x, i * this.maxCanvasWidth),\r\n                y1: y,\r\n                x2: Math.min(\r\n                    x + width,\r\n                    i * this.maxCanvasWidth + entry.wave.width\r\n                ),\r\n                y2: y + height\r\n            };\r\n\r\n            if (intersection.x1 < intersection.x2) {\r\n                this.setFillStyles(entry);\r\n\r\n                entry.fillRects(\r\n                    intersection.x1 - leftOffset,\r\n                    intersection.y1,\r\n                    intersection.x2 - intersection.x1,\r\n                    intersection.y2 - intersection.y1\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Performs preparation tasks and calculations which are shared by `drawBars`\r\n     * and `drawWave`\r\n     *\r\n     * @private\r\n     * @param {number[]|Number.<Array[]>} peaks Can also be an array of arrays for\r\n     * split channel rendering\r\n     * @param {number} channelIndex The index of the current channel. Normally\r\n     * should be 0\r\n     * @param {number?} start The x-offset of the beginning of the area that\r\n     * should be rendered. If this isn't set only a flat line is rendered\r\n     * @param {number?} end The x-offset of the end of the area that should be\r\n     * rendered\r\n     * @param {function} fn The render function to call, e.g. `drawWave`\r\n     * @returns {void}\r\n     */\r\n    prepareDraw(peaks, channelIndex, start, end, fn) {\r\n        return util.frame(() => {\r\n            // Split channels and call this function with the channelIndex set\r\n            if (peaks[0] instanceof Array) {\r\n                const channels = peaks;\r\n                if (this.params.splitChannels) {\r\n                    this.setHeight(\r\n                        channels.length *\r\n                            this.params.height *\r\n                            this.params.pixelRatio\r\n                    );\r\n                    return channels.forEach((channelPeaks, i) =>\r\n                        this.prepareDraw(channelPeaks, i, start, end, fn)\r\n                    );\r\n                }\r\n                peaks = channels[0];\r\n            }\r\n            // calculate maximum modulation value, either from the barHeight\r\n            // parameter or if normalize=true from the largest value in the peak\r\n            // set\r\n            let absmax = 1 / this.params.barHeight;\r\n            if (this.params.normalize) {\r\n                const max = util.max(peaks);\r\n                const min = util.min(peaks);\r\n                absmax = -min > max ? -min : max;\r\n            }\r\n\r\n            // Bar wave draws the bottom only as a reflection of the top,\r\n            // so we don't need negative values\r\n            const hasMinVals = [].some.call(peaks, val => val < 0);\r\n            const height = this.params.height * this.params.pixelRatio;\r\n            const offsetY = height * channelIndex || 0;\r\n            const halfH = height / 2;\r\n\r\n            return fn({\r\n                absmax: absmax,\r\n                hasMinVals: hasMinVals,\r\n                height: height,\r\n                offsetY: offsetY,\r\n                halfH: halfH,\r\n                peaks: peaks\r\n            });\r\n        })();\r\n    }\r\n\r\n    /**\r\n     * Set the fill styles for a certain entry (wave and progress)\r\n     *\r\n     * @private\r\n     * @param {CanvasEntry} entry Target entry\r\n     */\r\n    setFillStyles(entry) {\r\n        entry.setFillStyles(this.params.waveColor, this.params.progressColor);\r\n    }\r\n\r\n    /**\r\n     * Return image data of the multi-canvas\r\n     *\r\n     * When using a `type` of `'blob'`, this will return a `Promise`.\r\n     *\r\n     * @param {string} format='image/png' An optional value of a format type.\r\n     * @param {number} quality=0.92 An optional value between 0 and 1.\r\n     * @param {string} type='dataURL' Either 'dataURL' or 'blob'.\r\n     * @return {string|string[]|Promise} When using the default `'dataURL'`\r\n     * `type` this returns a single data URL or an array of data URLs,\r\n     * one for each canvas. When using the `'blob'` `type` this returns a\r\n     * `Promise` that resolves with an array of `Blob` instances, one for each\r\n     * canvas.\r\n     */\r\n    getImage(format, quality, type) {\r\n        if (type === 'blob') {\r\n            return Promise.all(\r\n                this.canvases.map(entry => {\r\n                    return entry.getImage(format, quality, type);\r\n                })\r\n            );\r\n        } else if (type === 'dataURL') {\r\n            let images = this.canvases.map(entry =>\r\n                entry.getImage(format, quality, type)\r\n            );\r\n            return images.length > 1 ? images : images[0];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Render the new progress\r\n     *\r\n     * @param {number} position X-offset of progress position in pixels\r\n     */\r\n    updateProgress(position) {\r\n        this.style(this.progressWave, { width: position + 'px' });\r\n    }\r\n}\r\n","import * as util from './util';\r\n\r\n/**\r\n * Parent class for renderers\r\n *\r\n * @extends {Observer}\r\n */\r\nexport default class Drawer extends util.Observer {\r\n    /**\r\n     * @param {HTMLElement} container The container node of the wavesurfer instance\r\n     * @param {WavesurferParams} params The wavesurfer initialisation options\r\n     */\r\n    constructor(container, params) {\r\n        super();\r\n        /** @private */\r\n        this.container = container;\r\n        /**\r\n         * @type {WavesurferParams}\r\n         * @private\r\n         */\r\n        this.params = params;\r\n        /**\r\n         * The width of the renderer\r\n         * @type {number}\r\n         */\r\n        this.width = 0;\r\n        /**\r\n         * The height of the renderer\r\n         * @type {number}\r\n         */\r\n        this.height = params.height * this.params.pixelRatio;\r\n        /** @private */\r\n        this.lastPos = 0;\r\n        /**\r\n         * The `<wave>` element which is added to the container\r\n         * @type {HTMLElement}\r\n         */\r\n        this.wrapper = null;\r\n    }\r\n\r\n    /**\r\n     * Alias of `util.style`\r\n     *\r\n     * @param {HTMLElement} el The element that the styles will be applied to\r\n     * @param {Object} styles The map of propName: attribute, both are used as-is\r\n     * @return {HTMLElement} el\r\n     */\r\n    style(el, styles) {\r\n        return util.style(el, styles);\r\n    }\r\n\r\n    /**\r\n     * Create the wrapper `<wave>` element, style it and set up the events for\r\n     * interaction\r\n     */\r\n    createWrapper() {\r\n        this.wrapper = this.container.appendChild(\r\n            document.createElement('wave')\r\n        );\r\n\r\n        this.style(this.wrapper, {\r\n            display: 'block',\r\n            position: 'relative',\r\n            userSelect: 'none',\r\n            webkitUserSelect: 'none',\r\n            height: this.params.height + 'px'\r\n        });\r\n\r\n        if (this.params.fillParent || this.params.scrollParent) {\r\n            this.style(this.wrapper, {\r\n                width: '100%',\r\n                overflowX: this.params.hideScrollbar ? 'hidden' : 'auto',\r\n                overflowY: 'hidden'\r\n            });\r\n        }\r\n\r\n        this.setupWrapperEvents();\r\n    }\r\n\r\n    /**\r\n     * Handle click event\r\n     *\r\n     * @param {Event} e Click event\r\n     * @param {?boolean} noPrevent Set to true to not call `e.preventDefault()`\r\n     * @return {number} Playback position from 0 to 1\r\n     */\r\n    handleEvent(e, noPrevent) {\r\n        !noPrevent && e.preventDefault();\r\n\r\n        const clientX = e.targetTouches\r\n            ? e.targetTouches[0].clientX\r\n            : e.clientX;\r\n        const bbox = this.wrapper.getBoundingClientRect();\r\n\r\n        const nominalWidth = this.width;\r\n        const parentWidth = this.getWidth();\r\n\r\n        let progress;\r\n        if (!this.params.fillParent && nominalWidth < parentWidth) {\r\n            progress =\r\n                (this.params.rtl ? bbox.right - clientX : clientX - bbox.left) *\r\n                    (this.params.pixelRatio / nominalWidth) || 0;\r\n\r\n            if (progress > 1) {\r\n                progress = 1;\r\n            }\r\n        } else {\r\n            progress =\r\n                ((this.params.rtl\r\n                    ? bbox.right - clientX\r\n                    : clientX - bbox.left) +\r\n                    this.wrapper.scrollLeft) /\r\n                    this.wrapper.scrollWidth || 0;\r\n        }\r\n\r\n        return progress;\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    setupWrapperEvents() {\r\n        this.wrapper.addEventListener('click', e => {\r\n            const scrollbarHeight =\r\n                this.wrapper.offsetHeight - this.wrapper.clientHeight;\r\n            if (scrollbarHeight != 0) {\r\n                // scrollbar is visible.  Check if click was on it\r\n                const bbox = this.wrapper.getBoundingClientRect();\r\n                if (e.clientY >= bbox.bottom - scrollbarHeight) {\r\n                    // ignore mousedown as it was on the scrollbar\r\n                    return;\r\n                }\r\n            }\r\n\r\n            if (this.params.interact) {\r\n                this.fireEvent('click', e, this.handleEvent(e));\r\n            }\r\n        });\r\n\r\n        this.wrapper.addEventListener('scroll', e =>\r\n            this.fireEvent('scroll', e)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Draw peaks on the canvas\r\n     *\r\n     * @param {number[]|Number.<Array[]>} peaks Can also be an array of arrays\r\n     * for split channel rendering\r\n     * @param {number} length The width of the area that should be drawn\r\n     * @param {number} start The x-offset of the beginning of the area that\r\n     * should be rendered\r\n     * @param {number} end The x-offset of the end of the area that should be\r\n     * rendered\r\n     */\r\n    drawPeaks(peaks, length, start, end) {\r\n        if (!this.setWidth(length)) {\r\n            this.clearWave();\r\n        }\r\n\r\n        this.params.barWidth\r\n            ? this.drawBars(peaks, 0, start, end)\r\n            : this.drawWave(peaks, 0, start, end);\r\n    }\r\n\r\n    /**\r\n     * Scroll to the beginning\r\n     */\r\n    resetScroll() {\r\n        if (this.wrapper !== null) {\r\n            this.wrapper.scrollLeft = 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Recenter the view-port at a certain percent of the waveform\r\n     *\r\n     * @param {number} percent Value from 0 to 1 on the waveform\r\n     */\r\n    recenter(percent) {\r\n        const position = this.wrapper.scrollWidth * percent;\r\n        this.recenterOnPosition(position, true);\r\n    }\r\n\r\n    /**\r\n     * Recenter the view-port on a position, either scroll there immediately or\r\n     * in steps of 5 pixels\r\n     *\r\n     * @param {number} position X-offset in pixels\r\n     * @param {boolean} immediate Set to true to immediately scroll somewhere\r\n     */\r\n    recenterOnPosition(position, immediate) {\r\n        const scrollLeft = this.wrapper.scrollLeft;\r\n        const half = ~~(this.wrapper.clientWidth / 2);\r\n        const maxScroll = this.wrapper.scrollWidth - this.wrapper.clientWidth;\r\n        let target = position - half;\r\n        let offset = target - scrollLeft;\r\n\r\n        if (maxScroll == 0) {\r\n            // no need to continue if scrollbar is not there\r\n            return;\r\n        }\r\n\r\n        // if the cursor is currently visible...\r\n        if (!immediate && -half <= offset && offset < half) {\r\n            // we'll limit the \"re-center\" rate.\r\n            const rate = 5;\r\n            offset = Math.max(-rate, Math.min(rate, offset));\r\n            target = scrollLeft + offset;\r\n        }\r\n\r\n        // limit target to valid range (0 to maxScroll)\r\n        target = Math.max(0, Math.min(maxScroll, target));\r\n        // no use attempting to scroll if we're not moving\r\n        if (target != scrollLeft) {\r\n            this.wrapper.scrollLeft = target;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the current scroll position in pixels\r\n     *\r\n     * @return {number} Horizontal scroll position in pixels\r\n     */\r\n    getScrollX() {\r\n        let x = 0;\r\n        if (this.wrapper) {\r\n            const pixelRatio = this.params.pixelRatio;\r\n            x = Math.round(this.wrapper.scrollLeft * pixelRatio);\r\n\r\n            // In cases of elastic scroll (safari with mouse wheel) you can\r\n            // scroll beyond the limits of the container\r\n            // Calculate and floor the scrollable extent to make sure an out\r\n            // of bounds value is not returned\r\n            // Ticket #1312\r\n            if (this.params.scrollParent) {\r\n                const maxScroll = ~~(\r\n                    this.wrapper.scrollWidth * pixelRatio -\r\n                    this.getWidth()\r\n                );\r\n                x = Math.min(maxScroll, Math.max(0, x));\r\n            }\r\n        }\r\n        return x;\r\n    }\r\n\r\n    /**\r\n     * Get the width of the container\r\n     *\r\n     * @return {number} The width of the container\r\n     */\r\n    getWidth() {\r\n        return Math.round(this.container.clientWidth * this.params.pixelRatio);\r\n    }\r\n\r\n    /**\r\n     * Set the width of the container\r\n     *\r\n     * @param {number} width The new width of the container\r\n     * @return {boolean} Whether the width of the container was updated or not\r\n     */\r\n    setWidth(width) {\r\n        if (this.width == width) {\r\n            return false;\r\n        }\r\n\r\n        this.width = width;\r\n\r\n        if (this.params.fillParent || this.params.scrollParent) {\r\n            this.style(this.wrapper, {\r\n                width: ''\r\n            });\r\n        } else {\r\n            this.style(this.wrapper, {\r\n                width: ~~(this.width / this.params.pixelRatio) + 'px'\r\n            });\r\n        }\r\n\r\n        this.updateSize();\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Set the height of the container\r\n     *\r\n     * @param {number} height The new height of the container.\r\n     * @return {boolean} Whether the height of the container was updated or not\r\n     */\r\n    setHeight(height) {\r\n        if (height == this.height) {\r\n            return false;\r\n        }\r\n        this.height = height;\r\n\r\n        this.style(this.wrapper, {\r\n            height: ~~(this.height / this.params.pixelRatio) + 'px'\r\n        });\r\n\r\n        this.updateSize();\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Called by wavesurfer when progress should be rendered\r\n     *\r\n     * @param {number} progress From 0 to 1\r\n     */\r\n    progress(progress) {\r\n        const minPxDelta = 1 / this.params.pixelRatio;\r\n        const pos = Math.round(progress * this.width) * minPxDelta;\r\n\r\n        if (pos < this.lastPos || pos - this.lastPos >= minPxDelta) {\r\n            this.lastPos = pos;\r\n\r\n            if (this.params.scrollParent && this.params.autoCenter) {\r\n                const newPos = ~~(this.wrapper.scrollWidth * progress);\r\n                this.recenterOnPosition(newPos);\r\n            }\r\n\r\n            this.updateProgress(pos);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This is called when wavesurfer is destroyed\r\n     */\r\n    destroy() {\r\n        this.unAll();\r\n        if (this.wrapper) {\r\n            if (this.wrapper.parentNode == this.container) {\r\n                this.container.removeChild(this.wrapper);\r\n            }\r\n            this.wrapper = null;\r\n        }\r\n    }\r\n\r\n    /* Renderer-specific methods */\r\n\r\n    /**\r\n     * Called after cursor related params have changed.\r\n     *\r\n     * @abstract\r\n     */\r\n    updateCursor() {}\r\n\r\n    /**\r\n     * Called when the size of the container changes so the renderer can adjust\r\n     *\r\n     * @abstract\r\n     */\r\n    updateSize() {}\r\n\r\n    /**\r\n     * Draw a waveform with bars\r\n     *\r\n     * @abstract\r\n     * @param {number[]|Number.<Array[]>} peaks Can also be an array of arrays for split channel\r\n     * rendering\r\n     * @param {number} channelIndex The index of the current channel. Normally\r\n     * should be 0\r\n     * @param {number} start The x-offset of the beginning of the area that\r\n     * should be rendered\r\n     * @param {number} end The x-offset of the end of the area that should be\r\n     * rendered\r\n     */\r\n    drawBars(peaks, channelIndex, start, end) {}\r\n\r\n    /**\r\n     * Draw a waveform\r\n     *\r\n     * @abstract\r\n     * @param {number[]|Number.<Array[]>} peaks Can also be an array of arrays for split channel\r\n     * rendering\r\n     * @param {number} channelIndex The index of the current channel. Normally\r\n     * should be 0\r\n     * @param {number} start The x-offset of the beginning of the area that\r\n     * should be rendered\r\n     * @param {number} end The x-offset of the end of the area that should be\r\n     * rendered\r\n     */\r\n    drawWave(peaks, channelIndex, start, end) {}\r\n\r\n    /**\r\n     * Clear the waveform\r\n     *\r\n     * @abstract\r\n     */\r\n    clearWave() {}\r\n\r\n    /**\r\n     * Render the new progress\r\n     *\r\n     * @abstract\r\n     * @param {number} position X-Offset of progress position in pixels\r\n     */\r\n    updateProgress(position) {}\r\n}\r\n","/**\r\n * @since 3.0.0\r\n */\r\n\r\nimport style from './util/style';\r\nimport getId from './util/get-id';\r\n\r\n/**\r\n * The `CanvasEntry` class represents an element consisting of a wave `canvas`\r\n * and an (optional) progress wave `canvas`.\r\n *\r\n * The `MultiCanvas` renderer uses one or more `CanvasEntry` instances to\r\n * render a waveform, depending on the zoom level.\r\n */\r\nexport default class CanvasEntry {\r\n    constructor() {\r\n        /**\r\n         * The wave node\r\n         *\r\n         * @type {HTMLCanvasElement}\r\n         */\r\n        this.wave = null;\r\n        /**\r\n         * The wave canvas rendering context\r\n         *\r\n         * @type {CanvasRenderingContext2D}\r\n         */\r\n        this.waveCtx = null;\r\n        /**\r\n         * The (optional) progress wave node\r\n         *\r\n         * @type {HTMLCanvasElement}\r\n         */\r\n        this.progress = null;\r\n        /**\r\n         * The (optional) progress wave canvas rendering context\r\n         *\r\n         * @type {CanvasRenderingContext2D}\r\n         */\r\n        this.progressCtx = null;\r\n        /**\r\n         * Start of the area the canvas should render, between 0 and 1\r\n         *\r\n         * @type {number}\r\n         * @private\r\n         */\r\n        this.start = 0;\r\n        /**\r\n         * End of the area the canvas should render, between 0 and 1\r\n         *\r\n         * @type {number}\r\n         * @private\r\n         */\r\n        this.end = 1;\r\n        /**\r\n         * Unique identifier for this entry\r\n         *\r\n         * @type {string}\r\n         */\r\n        this.id = getId(this.constructor.name.toLowerCase() + '_');\r\n    }\r\n\r\n    /**\r\n     * Store the wave canvas element and create the 2D rendering context\r\n     *\r\n     * @param {HTMLCanvasElement} element The wave `canvas` element.\r\n     */\r\n    initWave(element) {\r\n        this.wave = element;\r\n        this.waveCtx = this.wave.getContext('2d');\r\n    }\r\n\r\n    /**\r\n     * Store the progress wave canvas element and create the 2D rendering\r\n     * context\r\n     *\r\n     * @param {HTMLCanvasElement} element The progress wave `canvas` element.\r\n     */\r\n    initProgress(element) {\r\n        this.progress = element;\r\n        this.progressCtx = this.progress.getContext('2d');\r\n    }\r\n\r\n    /**\r\n     * Update the dimensions\r\n     *\r\n     * @param {number} elementWidth Width of the entry\r\n     * @param {number} totalWidth Total width of the multi canvas renderer\r\n     * @param {number} width The new width of the element\r\n     * @param {number} height The new height of the element\r\n     */\r\n    updateDimensions(elementWidth, totalWidth, width, height) {\r\n        // where the canvas starts and ends in the waveform, represented as a\r\n        // decimal between 0 and 1\r\n        this.start = this.wave.offsetLeft / totalWidth || 0;\r\n        this.end = this.start + elementWidth / totalWidth;\r\n\r\n        // set wave canvas dimensions\r\n        this.wave.width = width;\r\n        this.wave.height = height;\r\n        let elementSize = { width: elementWidth + 'px' };\r\n        style(this.wave, elementSize);\r\n\r\n        if (this.hasProgressCanvas) {\r\n            // set progress canvas dimensions\r\n            this.progress.width = width;\r\n            this.progress.height = height;\r\n            style(this.progress, elementSize);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clear the wave and progress rendering contexts\r\n     */\r\n    clearWave() {\r\n        // wave\r\n        this.waveCtx.clearRect(\r\n            0,\r\n            0,\r\n            this.waveCtx.canvas.width,\r\n            this.waveCtx.canvas.height\r\n        );\r\n\r\n        // progress\r\n        if (this.hasProgressCanvas) {\r\n            this.progressCtx.clearRect(\r\n                0,\r\n                0,\r\n                this.progressCtx.canvas.width,\r\n                this.progressCtx.canvas.height\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set the fill styles for wave and progress\r\n     *\r\n     * @param {string} waveColor Fill color for the wave canvas\r\n     * @param {?string} progressColor Fill color for the progress canvas\r\n     */\r\n    setFillStyles(waveColor, progressColor) {\r\n        this.waveCtx.fillStyle = waveColor;\r\n\r\n        if (this.hasProgressCanvas) {\r\n            this.progressCtx.fillStyle = progressColor;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Draw a rectangle for wave and progress\r\n     *\r\n     * @param {number} x X start position\r\n     * @param {number} y Y start position\r\n     * @param {number} width Width of the rectangle\r\n     * @param {number} height Height of the rectangle\r\n     */\r\n    fillRects(x, y, width, height) {\r\n        this.fillRectToContext(this.waveCtx, x, y, width, height);\r\n\r\n        if (this.hasProgressCanvas) {\r\n            this.fillRectToContext(this.progressCtx, x, y, width, height);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Draw the actual rectangle on a `canvas` element\r\n     *\r\n     * @private\r\n     * @param {CanvasRenderingContext2D} ctx Rendering context of target canvas\r\n     * @param {number} x X start position\r\n     * @param {number} y Y start position\r\n     * @param {number} width Width of the rectangle\r\n     * @param {number} height Height of the rectangle\r\n     */\r\n    fillRectToContext(ctx, x, y, width, height) {\r\n        if (!ctx) {\r\n            return;\r\n        }\r\n        ctx.fillRect(x, y, width, height);\r\n    }\r\n\r\n    /**\r\n     * Render the actual wave and progress lines\r\n     *\r\n     * @param {number[]} peaks Array with peaks data\r\n     * @param {number} absmax Maximum peak value (absolute)\r\n     * @param {number} halfH Half the height of the waveform\r\n     * @param {number} offsetY Offset to the top\r\n     * @param {number} start The x-offset of the beginning of the area that\r\n     * should be rendered\r\n     * @param {number} end The x-offset of the end of the area that\r\n     * should be rendered\r\n     */\r\n    drawLines(peaks, absmax, halfH, offsetY, start, end) {\r\n        this.drawLineToContext(\r\n            this.waveCtx,\r\n            peaks,\r\n            absmax,\r\n            halfH,\r\n            offsetY,\r\n            start,\r\n            end\r\n        );\r\n\r\n        if (this.hasProgressCanvas) {\r\n            this.drawLineToContext(\r\n                this.progressCtx,\r\n                peaks,\r\n                absmax,\r\n                halfH,\r\n                offsetY,\r\n                start,\r\n                end\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Render the actual waveform line on a `canvas` element\r\n     *\r\n     * @private\r\n     * @param {CanvasRenderingContext2D} ctx Rendering context of target canvas\r\n     * @param {number[]} peaks Array with peaks data\r\n     * @param {number} absmax Maximum peak value (absolute)\r\n     * @param {number} halfH Half the height of the waveform\r\n     * @param {number} offsetY Offset to the top\r\n     * @param {number} start The x-offset of the beginning of the area that\r\n     * should be rendered\r\n     * @param {number} end The x-offset of the end of the area that\r\n     * should be rendered\r\n     */\r\n    drawLineToContext(ctx, peaks, absmax, halfH, offsetY, start, end) {\r\n        if (!ctx) {\r\n            return;\r\n        }\r\n\r\n        const length = peaks.length / 2;\r\n        const first = Math.round(length * this.start);\r\n\r\n        // use one more peak value to make sure we join peaks at ends -- unless,\r\n        // of course, this is the last canvas\r\n        const last = Math.round(length * this.end) + 1;\r\n\r\n        const canvasStart = first;\r\n        const canvasEnd = last;\r\n        const scale = this.wave.width / (canvasEnd - canvasStart - 1);\r\n\r\n        // optimization\r\n        const halfOffset = halfH + offsetY;\r\n        const absmaxHalf = absmax / halfH;\r\n\r\n        ctx.beginPath();\r\n        ctx.moveTo((canvasStart - first) * scale, halfOffset);\r\n\r\n        ctx.lineTo(\r\n            (canvasStart - first) * scale,\r\n            halfOffset - Math.round((peaks[2 * canvasStart] || 0) / absmaxHalf)\r\n        );\r\n\r\n        let i, peak, h;\r\n        for (i = canvasStart; i < canvasEnd; i++) {\r\n            peak = peaks[2 * i] || 0;\r\n            h = Math.round(peak / absmaxHalf);\r\n            ctx.lineTo((i - first) * scale + this.halfPixel, halfOffset - h);\r\n        }\r\n\r\n        // draw the bottom edge going backwards, to make a single\r\n        // closed hull to fill\r\n        let j = canvasEnd - 1;\r\n        for (j; j >= canvasStart; j--) {\r\n            peak = peaks[2 * j + 1] || 0;\r\n            h = Math.round(peak / absmaxHalf);\r\n            ctx.lineTo((j - first) * scale + this.halfPixel, halfOffset - h);\r\n        }\r\n\r\n        ctx.lineTo(\r\n            (canvasStart - first) * scale,\r\n            halfOffset -\r\n                Math.round((peaks[2 * canvasStart + 1] || 0) / absmaxHalf)\r\n        );\r\n\r\n        ctx.closePath();\r\n        ctx.fill();\r\n    }\r\n\r\n    /**\r\n     * Destroys this entry\r\n     */\r\n    destroy() {\r\n        this.waveCtx = null;\r\n        this.wave = null;\r\n\r\n        this.progressCtx = null;\r\n        this.progress = null;\r\n    }\r\n\r\n    /**\r\n     * Return image data of the wave `canvas` element\r\n     *\r\n     * When using a `type` of `'blob'`, this will return a `Promise` that\r\n     * resolves with a `Blob` instance.\r\n     *\r\n     * @param {string} format='image/png' An optional value of a format type.\r\n     * @param {number} quality=0.92 An optional value between 0 and 1.\r\n     * @param {string} type='dataURL' Either 'dataURL' or 'blob'.\r\n     * @return {string|Promise} When using the default `'dataURL'` `type` this\r\n     * returns a data URL. When using the `'blob'` `type` this returns a\r\n     * `Promise` that resolves with a `Blob` instance.\r\n     */\r\n    getImage(format, quality, type) {\r\n        if (type === 'blob') {\r\n            return new Promise(resolve => {\r\n                this.wave.toBlob(resolve, format, quality);\r\n            });\r\n        } else if (type === 'dataURL') {\r\n            return this.wave.toDataURL(format, quality);\r\n        }\r\n    }\r\n}\r\n","import WebAudio from './webaudio';\r\nimport * as util from './util';\r\n\r\n/**\r\n * MediaElement backend\r\n */\r\nexport default class MediaElement extends WebAudio {\r\n    /**\r\n     * Construct the backend\r\n     *\r\n     * @param {WavesurferParams} params Wavesurfer parameters\r\n     */\r\n    constructor(params) {\r\n        super(params);\r\n        /** @private */\r\n        this.params = params;\r\n\r\n        // Dummy media to catch errors\r\n        /** @private */\r\n        this.media = {\r\n            currentTime: 0,\r\n            duration: 0,\r\n            paused: true,\r\n            playbackRate: 1,\r\n            play() {},\r\n            pause() {},\r\n            volume: 0\r\n        };\r\n\r\n        /** @private */\r\n        this.mediaType = params.mediaType.toLowerCase();\r\n        /** @private */\r\n        this.elementPosition = params.elementPosition;\r\n        /** @private */\r\n        this.peaks = null;\r\n        /** @private */\r\n        this.playbackRate = 1;\r\n        /** @private */\r\n        this.volume = 1;\r\n        /** @private */\r\n        this.isMuted = false;\r\n        /** @private */\r\n        this.buffer = null;\r\n        /** @private */\r\n        this.onPlayEnd = null;\r\n    }\r\n\r\n    /**\r\n     * Initialise the backend, called in `wavesurfer.createBackend()`\r\n     */\r\n    init() {\r\n        this.setPlaybackRate(this.params.audioRate);\r\n        this.createTimer();\r\n    }\r\n\r\n    /**\r\n     * Create a timer to provide a more precise `audioprocess` event.\r\n     *\r\n     * @private\r\n     */\r\n    createTimer() {\r\n        const onAudioProcess = () => {\r\n            if (this.isPaused()) {\r\n                return;\r\n            }\r\n            this.fireEvent('audioprocess', this.getCurrentTime());\r\n\r\n            // Call again in the next frame\r\n            util.frame(onAudioProcess)();\r\n        };\r\n\r\n        this.on('play', onAudioProcess);\r\n\r\n        // Update the progress one more time to prevent it from being stuck in\r\n        // case of lower framerates\r\n        this.on('pause', () => {\r\n            this.fireEvent('audioprocess', this.getCurrentTime());\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Create media element with url as its source,\r\n     * and append to container element.\r\n     *\r\n     * @param {string} url Path to media file\r\n     * @param {HTMLElement} container HTML element\r\n     * @param {number[]|Number.<Array[]>} peaks Array of peak data\r\n     * @param {string} preload HTML 5 preload attribute value\r\n     */\r\n    load(url, container, peaks, preload) {\r\n        const media = document.createElement(this.mediaType);\r\n        media.controls = this.params.mediaControls;\r\n        media.autoplay = this.params.autoplay || false;\r\n        media.preload = preload == null ? 'auto' : preload;\r\n        media.src = url;\r\n        media.style.width = '100%';\r\n\r\n        const prevMedia = container.querySelector(this.mediaType);\r\n        if (prevMedia) {\r\n            container.removeChild(prevMedia);\r\n        }\r\n        container.appendChild(media);\r\n\r\n        this._load(media, peaks);\r\n    }\r\n\r\n    /**\r\n     * Load existing media element.\r\n     *\r\n     * @param {HTMLMediaElement} elt HTML5 Audio or Video element\r\n     * @param {number[]|Number.<Array[]>} peaks Array of peak data\r\n     */\r\n    loadElt(elt, peaks) {\r\n        elt.controls = this.params.mediaControls;\r\n        elt.autoplay = this.params.autoplay || false;\r\n\r\n        this._load(elt, peaks);\r\n    }\r\n\r\n    /**\r\n     * Private method called by both `load` (from url)\r\n     * and `loadElt` (existing media element) methods.\r\n     *\r\n     * @param {HTMLMediaElement} media HTML5 Audio or Video element\r\n     * @param {number[]|Number.<Array[]>} peaks Array of peak data\r\n     * @private\r\n     */\r\n    _load(media, peaks) {\r\n        // load must be called manually on iOS, otherwise peaks won't draw\r\n        // until a user interaction triggers load --> 'ready' event\r\n        if (typeof media.load == 'function') {\r\n            // Resets the media element and restarts the media resource. Any\r\n            // pending events are discarded. How much media data is fetched is\r\n            // still affected by the preload attribute.\r\n            media.load();\r\n        }\r\n\r\n        media.addEventListener('error', () => {\r\n            this.fireEvent('error', 'Error loading media element');\r\n        });\r\n\r\n        media.addEventListener('canplay', () => {\r\n            this.fireEvent('canplay');\r\n        });\r\n\r\n        media.addEventListener('ended', () => {\r\n            this.fireEvent('finish');\r\n        });\r\n\r\n        // Listen to and relay play, pause and seeked events to enable\r\n        // playback control from the external media element\r\n        media.addEventListener('play', () => {\r\n            this.fireEvent('play');\r\n        });\r\n\r\n        media.addEventListener('pause', () => {\r\n            this.fireEvent('pause');\r\n        });\r\n\r\n        media.addEventListener('seeked', event => {\r\n            this.fireEvent('seek');\r\n        });\r\n\r\n        media.addEventListener('volumechange', event => {\r\n            this.isMuted = media.muted;\r\n            if (this.isMuted) {\r\n                this.volume = 0;\r\n            } else {\r\n                this.volume = media.volume;\r\n            }\r\n            this.fireEvent('volume');\r\n        });\r\n\r\n        this.media = media;\r\n        this.peaks = peaks;\r\n        this.onPlayEnd = null;\r\n        this.buffer = null;\r\n        this.isMuted = media.muted;\r\n        this.setPlaybackRate(this.playbackRate);\r\n        this.setVolume(this.volume);\r\n    }\r\n\r\n    /**\r\n     * Used by `wavesurfer.isPlaying()` and `wavesurfer.playPause()`\r\n     *\r\n     * @return {boolean} Media paused or not\r\n     */\r\n    isPaused() {\r\n        return !this.media || this.media.paused;\r\n    }\r\n\r\n    /**\r\n     * Used by `wavesurfer.getDuration()`\r\n     *\r\n     * @return {number} Duration\r\n     */\r\n    getDuration() {\r\n        if (this.explicitDuration) {\r\n            return this.explicitDuration;\r\n        }\r\n        let duration = (this.buffer || this.media).duration;\r\n        if (duration >= Infinity) {\r\n            // streaming audio\r\n            duration = this.media.seekable.end(0);\r\n        }\r\n        return duration;\r\n    }\r\n\r\n    /**\r\n     * Returns the current time in seconds relative to the audio-clip's\r\n     * duration.\r\n     *\r\n     * @return {number} Current time\r\n     */\r\n    getCurrentTime() {\r\n        return this.media && this.media.currentTime;\r\n    }\r\n\r\n    /**\r\n     * Get the position from 0 to 1\r\n     *\r\n     * @return {number} Current position\r\n     */\r\n    getPlayedPercents() {\r\n        return this.getCurrentTime() / this.getDuration() || 0;\r\n    }\r\n\r\n    /**\r\n     * Get the audio source playback rate.\r\n     *\r\n     * @return {number} Playback rate\r\n     */\r\n    getPlaybackRate() {\r\n        return this.playbackRate || this.media.playbackRate;\r\n    }\r\n\r\n    /**\r\n     * Set the audio source playback rate.\r\n     *\r\n     * @param {number} value Playback rate\r\n     */\r\n    setPlaybackRate(value) {\r\n        this.playbackRate = value || 1;\r\n        this.media.playbackRate = this.playbackRate;\r\n    }\r\n\r\n    /**\r\n     * Used by `wavesurfer.seekTo()`\r\n     *\r\n     * @param {number} start Position to start at in seconds\r\n     */\r\n    seekTo(start) {\r\n        if (start != null) {\r\n            this.media.currentTime = start;\r\n        }\r\n        this.clearPlayEnd();\r\n    }\r\n\r\n    /**\r\n     * Plays the loaded audio region.\r\n     *\r\n     * @param {number} start Start offset in seconds, relative to the beginning\r\n     * of a clip.\r\n     * @param {number} end When to stop, relative to the beginning of a clip.\r\n     * @emits MediaElement#play\r\n     * @return {Promise} Result\r\n     */\r\n    play(start, end) {\r\n        this.seekTo(start);\r\n        const promise = this.media.play();\r\n        end && this.setPlayEnd(end);\r\n\r\n        return promise;\r\n    }\r\n\r\n    /**\r\n     * Pauses the loaded audio.\r\n     *\r\n     * @emits MediaElement#pause\r\n     * @return {Promise} Result\r\n     */\r\n    pause() {\r\n        let promise;\r\n\r\n        if (this.media) {\r\n            promise = this.media.pause();\r\n        }\r\n        this.clearPlayEnd();\r\n\r\n        return promise;\r\n    }\r\n\r\n    /**\r\n     * Set the play end\r\n     *\r\n     * @private\r\n     * @param {number} end Where to end\r\n     */\r\n    setPlayEnd(end) {\r\n        this._onPlayEnd = time => {\r\n            if (time >= end) {\r\n                this.pause();\r\n                this.seekTo(end);\r\n            }\r\n        };\r\n        this.on('audioprocess', this._onPlayEnd);\r\n    }\r\n\r\n    /** @private */\r\n    clearPlayEnd() {\r\n        if (this._onPlayEnd) {\r\n            this.un('audioprocess', this._onPlayEnd);\r\n            this._onPlayEnd = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Compute the max and min value of the waveform when broken into\r\n     * <length> subranges.\r\n     *\r\n     * @param {number} length How many subranges to break the waveform into.\r\n     * @param {number} first First sample in the required range.\r\n     * @param {number} last Last sample in the required range.\r\n     * @return {number[]|Number.<Array[]>} Array of 2*<length> peaks or array of\r\n     * arrays of peaks consisting of (max, min) values for each subrange.\r\n     */\r\n    getPeaks(length, first, last) {\r\n        if (this.buffer) {\r\n            return super.getPeaks(length, first, last);\r\n        }\r\n        return this.peaks || [];\r\n    }\r\n\r\n    /**\r\n     * Set the sink id for the media player\r\n     *\r\n     * @param {string} deviceId String value representing audio device id.\r\n     * @returns {Promise} A Promise that resolves to `undefined` when there\r\n     * are no errors.\r\n     */\r\n    setSinkId(deviceId) {\r\n        if (deviceId) {\r\n            if (!this.media.setSinkId) {\r\n                return Promise.reject(\r\n                    new Error('setSinkId is not supported in your browser')\r\n                );\r\n            }\r\n            return this.media.setSinkId(deviceId);\r\n        }\r\n\r\n        return Promise.reject(new Error('Invalid deviceId: ' + deviceId));\r\n    }\r\n\r\n    /**\r\n     * Get the current volume\r\n     *\r\n     * @return {number} value A floating point value between 0 and 1.\r\n     */\r\n    getVolume() {\r\n        return this.volume;\r\n    }\r\n\r\n    /**\r\n     * Set the audio volume\r\n     *\r\n     * @param {number} value A floating point value between 0 and 1.\r\n     */\r\n    setVolume(value) {\r\n        this.volume = value;\r\n        // no need to change when it's already at that volume\r\n        if (this.media.volume !== this.volume) {\r\n            this.media.volume = this.volume;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This is called when wavesurfer is destroyed\r\n     *\r\n     */\r\n    destroy() {\r\n        this.pause();\r\n        this.unAll();\r\n\r\n        if (\r\n            this.params.removeMediaElementOnDestroy &&\r\n            this.media &&\r\n            this.media.parentNode\r\n        ) {\r\n            this.media.parentNode.removeChild(this.media);\r\n        }\r\n\r\n        this.media = null;\r\n    }\r\n}\r\n","/**\r\n * Caches the decoded peaks data to improve rendering speed for large audio\r\n *\r\n * Is used if the option parameter `partialRender` is set to `true`\r\n */\r\nexport default class PeakCache {\r\n    /**\r\n     * Instantiate cache\r\n     */\r\n    constructor() {\r\n        this.clearPeakCache();\r\n    }\r\n\r\n    /**\r\n     * Empty the cache\r\n     */\r\n    clearPeakCache() {\r\n        /**\r\n         * Flat array with entries that are always in pairs to mark the\r\n         * beginning and end of each subrange.  This is a convenience so we can\r\n         * iterate over the pairs for easy set difference operations.\r\n         * @private\r\n         */\r\n        this.peakCacheRanges = [];\r\n        /**\r\n         * Length of the entire cachable region, used for resetting the cache\r\n         * when this changes (zoom events, for instance).\r\n         * @private\r\n         */\r\n        this.peakCacheLength = -1;\r\n    }\r\n\r\n    /**\r\n     * Add a range of peaks to the cache\r\n     *\r\n     * @param {number} length The length of the range\r\n     * @param {number} start The x offset of the start of the range\r\n     * @param {number} end The x offset of the end of the range\r\n     * @return {Number.<Array[]>} Array with arrays of numbers\r\n     */\r\n    addRangeToPeakCache(length, start, end) {\r\n        if (length != this.peakCacheLength) {\r\n            this.clearPeakCache();\r\n            this.peakCacheLength = length;\r\n        }\r\n\r\n        // Return ranges that weren't in the cache before the call.\r\n        let uncachedRanges = [];\r\n        let i = 0;\r\n        // Skip ranges before the current start.\r\n        while (\r\n            i < this.peakCacheRanges.length &&\r\n            this.peakCacheRanges[i] < start\r\n        ) {\r\n            i++;\r\n        }\r\n        // If |i| is even, |start| falls after an existing range.  Otherwise,\r\n        // |start| falls between an existing range, and the uncached region\r\n        // starts when we encounter the next node in |peakCacheRanges| or\r\n        // |end|, whichever comes first.\r\n        if (i % 2 == 0) {\r\n            uncachedRanges.push(start);\r\n        }\r\n        while (\r\n            i < this.peakCacheRanges.length &&\r\n            this.peakCacheRanges[i] <= end\r\n        ) {\r\n            uncachedRanges.push(this.peakCacheRanges[i]);\r\n            i++;\r\n        }\r\n        // If |i| is even, |end| is after all existing ranges.\r\n        if (i % 2 == 0) {\r\n            uncachedRanges.push(end);\r\n        }\r\n\r\n        // Filter out the 0-length ranges.\r\n        uncachedRanges = uncachedRanges.filter((item, pos, arr) => {\r\n            if (pos == 0) {\r\n                return item != arr[pos + 1];\r\n            } else if (pos == arr.length - 1) {\r\n                return item != arr[pos - 1];\r\n            }\r\n            return item != arr[pos - 1] && item != arr[pos + 1];\r\n        });\r\n\r\n        // Merge the two ranges together, uncachedRanges will either contain\r\n        // wholly new points, or duplicates of points in peakCacheRanges.  If\r\n        // duplicates are detected, remove both and extend the range.\r\n        this.peakCacheRanges = this.peakCacheRanges.concat(uncachedRanges);\r\n        this.peakCacheRanges = this.peakCacheRanges\r\n            .sort((a, b) => a - b)\r\n            .filter((item, pos, arr) => {\r\n                if (pos == 0) {\r\n                    return item != arr[pos + 1];\r\n                } else if (pos == arr.length - 1) {\r\n                    return item != arr[pos - 1];\r\n                }\r\n                return item != arr[pos - 1] && item != arr[pos + 1];\r\n            });\r\n\r\n        // Push the uncached ranges into an array of arrays for ease of\r\n        // iteration in the functions that call this.\r\n        const uncachedRangePairs = [];\r\n        for (i = 0; i < uncachedRanges.length; i += 2) {\r\n            uncachedRangePairs.push([uncachedRanges[i], uncachedRanges[i + 1]]);\r\n        }\r\n\r\n        return uncachedRangePairs;\r\n    }\r\n\r\n    /**\r\n     * For testing\r\n     *\r\n     * @return {Number.<Array[]>} Array with arrays of numbers\r\n     */\r\n    getCacheRanges() {\r\n        const peakCacheRangePairs = [];\r\n        let i;\r\n        for (i = 0; i < this.peakCacheRanges.length; i += 2) {\r\n            peakCacheRangePairs.push([\r\n                this.peakCacheRanges[i],\r\n                this.peakCacheRanges[i + 1]\r\n            ]);\r\n        }\r\n        return peakCacheRangePairs;\r\n    }\r\n}\r\n"],"sourceRoot":""}